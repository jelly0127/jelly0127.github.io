<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jelly</title>
    <url>/2023/01/30/Jelly/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​        前端之路不容易，更新迭代较快，需要学的东西太多了。但掌握了基础便能应对（任尔东西南北风）。同为小白入门自学前端，大四才开始学习，现在感慨还是悟得太晚了，倘若大三就开始学，那么我想水平也应该不止步现阶段了。人生又哪有这么多的假设，还是趁着现在的时间赶紧学起来，提升技术，增加收入。整理了一下笔记（按序学习）。</p>
<p>暂时还是以文档更新叭，后续搭建自己的博客了再上传。(拖了半年，终于弄上了博客…)</p>
<h2 id="一、基础："><a href="#一、基础：" class="headerlink" title="一、基础："></a>一、基础：</h2><ol>
<li><a href="https://jelly0127.github.io/2023/01/29/html/">HTML</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/css/">CSS</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/JavaScript/">JavaScript</a></li>
</ol>
<h2 id="二、中等："><a href="#二、中等：" class="headerlink" title="二、中等："></a>二、中等：</h2><ol>
<li><a href="https://jelly0127.github.io/2023/01/29/ES6%E5%90%8E%E7%BB%AD%E8%AF%AD%E6%B3%95/">ES6后续语法</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/HTTP/">Http协议</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/Cookie%E4%B8%8ESession/">cookie与Session</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/TypeScript/">TypeScript</a></li>
</ol>
<h2 id="三、进阶："><a href="#三、进阶：" class="headerlink" title="三、进阶："></a>三、进阶：</h2><ol>
<li><a href="https://jelly0127.github.io/2023/01/29/Vue2%E5%85%A8%E5%AE%B6%E6%A1%B6/">Vue2（全家桶）</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/Echarts/">Echart(数据可视化)</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/Git/">git</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/Vue3/">Vue3</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/">微信小程序</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/">微信云开发</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/uniapp/">UniApp</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/ReactHook%E5%85%A8%E5%AE%B6%E6%A1%B6/">ReactHooks（全家桶）</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/koa2/">Koa2（NodeJs后端）</a>（待更…）</li>
<li><a href="https://jelly0127.github.io/2023/01/29/%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9%E4%B8%8A%E6%8A%A5/">前端数据埋点上报</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/webpack/">webpack</a>（待更…）</li>
<li><a href="https://jelly0127.github.io/2023/01/29/we3/">web3（区块链）</a>（待更…）</li>
<li><a href="https://jelly0127.github.io/2023/01/29/vite/">vite</a>（待更…）</li>
<li><a href="https://jelly0127.github.io/2023/01/29/react%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/">react脚手架搭建</a>（待更…）</li>
</ol>
]]></content>
      <categories>
        <category>简介</category>
      </categories>
      <tags>
        <tag>Im</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2023/01/30/about/</url>
    <content><![CDATA[<p>- </p>
<ul>
<li><blockquote>
<p>A developer, live in Shenzhen, China.</p>
</blockquote>
姓名：Jelly<br>常驻：深圳<br>职位：前端开发<br>GitHub: <a href="https://github.com/jelly0127">jelly0127</a><br>twitter: <a href="https://twitter.com/meiyouguodonge1">meiyouguodonge1</a><br>QQ: <a href="http://wpa.qq.com/msgrd?v=3&uin=806352173&site=qq&menu=yes">806352173</a><br>微信: ChenGGDong</li>
</ul>
<p><img src='https://pic.imgdb.cn/item/63d6bc87face21e9efaa0d7e.jpg' style=" border-radius: 50%;
 width: 120px;
 height: 120px;"></p>
]]></content>
      <tags>
        <tag>Im</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Hook</title>
    <url>/2023/01/30/%E8%87%AA%E5%AE%9A%E4%B9%89Hook/</url>
    <content><![CDATA[<p><strong>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">//这是一个可以通过friendID去判断是否在线的自定义Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFriendStatus</span>(<span class="params">friendID</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//这里只是返回了isOnline这个属性，当然你连setIsOnline也可以返回出去，可以让组件调用的时候接收这个方法，在必要的时候自行修改Hook的State</span></span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义Hook看起来特别的像一个函数的使用，传递一个参数，得到一个结果。</p>
<p>定义Hook和函数不同的是，Hook可以利用起生命周期钩子，以及有Hook内部自己的数据。</p>
<p><strong>注意：自定义Hook每次调用的时候会创建一个新的State作用域（如果你有使用useState的话），所以不用担心多次调用Hook导致State互相影响</strong></p>
<p><strong>自定义Hook服用逻辑，但不服用State，作用域还是独立的</strong></p>
<span id="more"></span>

<p>如何在组件中使用这个自定义Hook呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FriendStatus</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = <span class="title function_">useFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用一个变量保存即可，无需Hook关心内部的逻辑，内部帮你绑定了生命周期，帮你创建State作用域，这些你都不用关心，直接用即可。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>nest</title>
    <url>/2023/01/29/nest/</url>
    <content><![CDATA[<p>待更新。。。</p>
]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>react脚手架搭建</title>
    <url>/2023/01/29/react%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>后续更新。。。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>vite</title>
    <url>/2023/01/29/vite/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>web3区块链</title>
    <url>/2023/01/29/web3/</url>
    <content><![CDATA[<p>后续更新。。。</p>
]]></content>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2023/01/29/webpack/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p><strong><code>Webpack</code> 是一个静态资源打包工具。</strong></p>
<p>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</p>
<p>输出的文件就是编译好的文件，就可以在浏览器段运行了。</p>
<p>我们将 <code>Webpack</code> 输出的文件叫做 <code>bundle</code>。</p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>Webpack 本身功能是有限的:</p>
<ul>
<li>开发模式：仅能编译 JS 中的 <code>ES Module</code> 语法</li>
<li>生产模式：能编译 JS 中的 <code>ES Module</code> 语法，还能压缩 JS 代码</li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol>
<li>资源目录</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">webpack_code  项目根目录（所有指令必须在这个目录运行）</span><br><span class="line">    └── src  项目源码目录</span><br><span class="line">        ├── js  js文件目录</span><br><span class="line">        │   ├── count.js</span><br><span class="line">        │   └── sum.js</span><br><span class="line">        └── main.js  项目主文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-创建文件"><a href="#2-创建文件" class="headerlink" title="2. 创建文件"></a>2. 创建文件</h3><ul>
<li>count.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>sum.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h3 id="3-下载依赖"><a href="#3-下载依赖" class="headerlink" title="3. 下载依赖"></a>3. 下载依赖</h3><p>打开终端，来到项目根目录。运行以下指令：</p>
<ul>
<li>初始化<code>package.json</code></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>此时会生成一个基础的 <code>package.json</code> 文件。</p>
<p><strong>需要注意的是 <code>package.json</code> 中 <code>name</code> 字段不能叫做 <code>webpack</code>, 否则下一步会报错</strong></p>
<ul>
<li>下载依赖</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>

<h3 id="4-启用-Webpack"><a href="#4-启用-Webpack" class="headerlink" title="4. 启用 Webpack"></a>4. 启用 Webpack</h3><ul>
<li>开发模式</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npx webpack ./src/main.js --mode=development</span><br></pre></td></tr></table></figure>

<ul>
<li>生产模式</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npx webpack ./src/main.js --mode=production</span><br></pre></td></tr></table></figure>

<p><code>npx webpack</code>: 是用来运行本地安装 <code>Webpack</code> 包的。</p>
<p><code>./src/main.js</code>: 指定 <code>Webpack</code> 从 <code>main.js</code> 文件开始打包，不但会打包 <code>main.js</code>，还会将其依赖也一起打包进来。</p>
<p><code>--mode=xxx</code>：指定模式（环境）。</p>
<h3 id="5-观察输出文件"><a href="#5-观察输出文件" class="headerlink" title="5. 观察输出文件"></a>5. 观察输出文件</h3><p>默认 <code>Webpack</code> 会将文件打包输出到 <code>dist</code> 目录下，我们查看 <code>dist</code> 目录下文件情况就好了</p>
<p>基本配置</p>
<p>在开始使用 <code>Webpack</code> 之前，我们需要对 <code>Webpack</code> 的配置有一定的认识。</p>
<h2 id="5-大核心概念"><a href="#5-大核心概念" class="headerlink" title="5 大核心概念"></a>5 大核心概念</h2><ol>
<li>entry（入口）</li>
</ol>
<p>指示 Webpack 从哪个文件开始打包</p>
<ol>
<li>output（输出）</li>
</ol>
<p>指示 Webpack 打包完的文件输出到哪里去，如何命名等</p>
<ol>
<li>loader（加载器）</li>
</ol>
<p>webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</p>
<ol>
<li>plugins（插件）</li>
</ol>
<p>扩展 Webpack 的功能</p>
<ol>
<li>mode（模式）</li>
</ol>
<p>主要由两种模式：</p>
<ul>
<li>开发模式：development</li>
<li>生产模式：production</li>
</ul>
<h2 id="准备-Webpack-配置文件"><a href="#准备-Webpack-配置文件" class="headerlink" title="准备 Webpack 配置文件"></a>准备 Webpack 配置文件</h2><p>在项目根目录下新建文件：<code>webpack.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ol>
<li>配置文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Node.js的核心模块，专门用来处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// path: 文件输出目录，必须是绝对路径</span></span><br><span class="line">    <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">    <span class="comment">// __dirname 当前文件的文件夹绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="comment">// filename: 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li>运行指令</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>

<p>此时功能和之前一样，也不能处理样式资源</p>
<h1 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h1><h2 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a>处理 Css 资源</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure>

<h2 id="处理-Less-资源"><a href="#处理-Less-资源" class="headerlink" title="处理 Less 资源"></a>处理 Less 资源</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i less-loader -D</span><br></pre></td></tr></table></figure>

<h2 id="处理-Sass-和-Scss-资源"><a href="#处理-Sass-和-Scss-资源" class="headerlink" title="处理 Sass 和 Scss 资源"></a>处理 Sass 和 Scss 资源</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i sass-loader sass -D</span><br></pre></td></tr></table></figure>

<h2 id="处理-Styl-资源"><a href="#处理-Styl-资源" class="headerlink" title="处理 Styl 资源"></a>处理 Styl 资源</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i stylus-loader -D</span><br></pre></td></tr></table></figure>

<h1 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h1><p>Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">           <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="修改输出资源的名称和路径"><a href="#修改输出资源的名称和路径" class="headerlink" title="修改输出资源的名称和路径"></a>修改输出资源的名称和路径</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">   <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">   <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">     <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="处理字体图标、音频资源"><a href="#处理字体图标、音频资源" class="headerlink" title="处理字体图标、音频资源"></a>处理字体图标、音频资源</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?|map4|map3|avi)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="处理-js-资源"><a href="#处理-js-资源" class="headerlink" title="处理 js 资源"></a>处理 js 资源</h1><h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>

<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义 Babel 配置文件</span></span><br><span class="line"><span class="comment">//babel.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="处理-Html-资源"><a href="#处理-Html-资源" class="headerlink" title="处理 Html 资源"></a>处理 Html 资源</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">    <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">    <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h1 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器&amp;自动化"></a>开发服务器&amp;自动化</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开发服务器</span></span><br><span class="line"> <span class="attr">devServer</span>: &#123;</span><br><span class="line">   <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">   <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">   <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="Css-处理"><a href="#Css-处理" class="headerlink" title="Css 处理"></a>Css 处理</h1><h2 id="提取-Css-成单独文件"><a href="#提取-Css-成单独文件" class="headerlink" title="#提取 Css 成单独文件"></a><a href="https://yk2012.github.io/sgg_webpack5/base/optimizeCss.html#%E6%8F%90%E5%8F%96-css-%E6%88%90%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6">#</a>提取 Css 成单独文件</h2><p>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式</p>
<p>这样对于网站来说，会出现闪屏现象，们应该是单独的 Css 文件，通过 link 标签加载性能才好</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Css-兼容性处理"><a href="#Css-兼容性处理" class="headerlink" title="Css 兼容性处理"></a>Css 兼容性处理</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">use</span>: [</span><br><span class="line">         <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">         <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">           <span class="attr">options</span>: &#123;</span><br><span class="line">             <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">               <span class="attr">plugins</span>: [</span><br><span class="line">                 <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">               ],</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">       ],</span><br></pre></td></tr></table></figure>

<h2 id="Css-压缩"><a href="#Css-压缩" class="headerlink" title="Css 压缩"></a>Css 压缩</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// css压缩</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>



<h1 id="webpack优化"><a href="#webpack优化" class="headerlink" title="webpack优化"></a>webpack优化</h1><ol>
<li>提升开发体验</li>
<li>提升打包构建速度</li>
<li>减少代码体积</li>
<li>优化代码运行性能</li>
</ol>
<h2 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h2><h3 id="SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。"><a href="#SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。" class="headerlink" title="SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。"></a>SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="HotModuleReplacement"><a href="#HotModuleReplacement" class="headerlink" title="HotModuleReplacement"></a>HotModuleReplacement</h2><h3 id="HotModuleReplacement（HMR-x2F-热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。"><a href="#HotModuleReplacement（HMR-x2F-热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。" class="headerlink" title="HotModuleReplacement（HMR&#x2F;热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。"></a>HotModuleReplacement（HMR&#x2F;热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启HMR功能（只能用于开发环境，生产环境不需要）</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a>OneOf</h2><h3 id="匹配上一个-loader-剩下的就不匹配了。"><a href="#匹配上一个-loader-剩下的就不匹配了。" class="headerlink" title="匹配上一个 loader, 剩下的就不匹配了。"></a>匹配上一个 loader, 剩下的就不匹配了。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">         </span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Include-x2F-Exclude"><a href="#Include-x2F-Exclude" class="headerlink" title="Include&#x2F;Exclude"></a>Include&#x2F;Exclude</h2><ul>
<li>include</li>
</ul>
<p>包含，只处理 xxx 文件</p>
<ul>
<li>exclude</li>
</ul>
<p>排除，除了 xxx 文件以外其他文件都处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure>

<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>对 Eslint 检查 和 Babel 编译结果进行缓存。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">     <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">     <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">     <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">     <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">     <span class="comment">// 缓存目录</span></span><br><span class="line">     <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">       __dirname,</span><br><span class="line">       <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">     ),</span><br><span class="line">   &#125;),</span><br></pre></td></tr></table></figure>

<h2 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a>Thead</h2><p>多进程打包：开启电脑的多个进程同时干一件事，速度更快。</p>
<p><strong>需要注意：请仅在特别耗时的操作中使用，因为每个进程启动就有大约为 600ms 左右开销。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i thread-loader -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              </span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="减少代码体积"><a href="#减少代码体积" class="headerlink" title="减少代码体积"></a>减少代码体积</h1><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><p>Webpack 已经默认开启了这个功能，无需其他配置。</p>
<h2 id="Tree-Shaking-是一个术语，通常用于描述移除-JavaScript-中的没有使用上的代码。"><a href="#Tree-Shaking-是一个术语，通常用于描述移除-JavaScript-中的没有使用上的代码。" class="headerlink" title="Tree Shaking 是一个术语，通常用于描述移除 JavaScript 中的没有使用上的代码。"></a><code>Tree Shaking</code> 是一个术语，通常用于描述移除 JavaScript 中的没有使用上的代码。</h2><h2 id="Babel-1"><a href="#Babel-1" class="headerlink" title="Babel"></a>Babel</h2><p>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大！</p>
<p>Babel 对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code>。默认情况下会被添加到每一个需要它的文件中。</p>
<p>你可以将这些辅助代码作为一个独立模块，来避免重复引入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">           <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">           <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">           <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">           <span class="attr">use</span>: [</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">               <span class="attr">options</span>: &#123;</span><br><span class="line">                 <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">               <span class="attr">options</span>: &#123;</span><br><span class="line">                 <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                 <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                 <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>], <span class="comment">// 减少代码体积</span></span><br><span class="line">               &#125;,</span><br><span class="line">             &#125;,</span><br><span class="line">           ],</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="Image-Minimizer"><a href="#Image-Minimizer" class="headerlink" title="Image Minimizer"></a>Image Minimizer</h2><h3 id="对图片进行压缩，减少图片体积。"><a href="#对图片进行压缩，减少图片体积。" class="headerlink" title="对图片进行压缩，减少图片体积。"></a>对图片进行压缩，减少图片体积。</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i image-minimizer-webpack-plugin imagemin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">//无损压缩</span><br><span class="line">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br><span class="line"></span><br><span class="line">//有损压缩</span><br><span class="line">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">       <span class="attr">minimizer</span>: &#123;</span><br><span class="line">         <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">         <span class="attr">options</span>: &#123;</span><br><span class="line">           <span class="attr">plugins</span>: [</span><br><span class="line">             [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">             [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],<span class="comment">//需下载jpegtran</span></span><br><span class="line">             [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],<span class="comment">//需下载optipng</span></span><br><span class="line">             [</span><br><span class="line">               <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">               &#123;</span><br><span class="line">                 <span class="attr">plugins</span>: [</span><br><span class="line">                   <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                   &#123;</span><br><span class="line">                     <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                     <span class="attr">params</span>: &#123;</span><br><span class="line">                       <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                     &#125;,</span><br><span class="line">                   &#125;,</span><br><span class="line">                 ],</span><br><span class="line">               &#125;,</span><br><span class="line">             ],</span><br><span class="line">           ],</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;),</span><br></pre></td></tr></table></figure>

<h1 id="优化代码运行性能"><a href="#优化代码运行性能" class="headerlink" title="优化代码运行性能"></a>优化代码运行性能</h1><h2 id="Code-Split"><a href="#Code-Split" class="headerlink" title="Code Split"></a>Code Split</h2><p>代码分割（Code Split）主要做了两件事：</p>
<ol>
<li>分割文件：将打包生成的文件进行分割，生成多个 js 文件。</li>
<li>按需加载：需要哪个文件就加载哪个文件。</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">     <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">   &#125;),</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="attr">optimization</span>: &#123;</span><br><span class="line">   <span class="comment">// 代码分割配置</span></span><br><span class="line">   <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">     <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">     <span class="comment">// 以下是默认值</span></span><br><span class="line">     <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">     <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">     <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">     <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">     <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">     <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">     <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">     <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">     <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">     <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">     <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">     <span class="comment">//   &#125;,</span></span><br><span class="line">     <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">     <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">     <span class="comment">//     priority: -20,</span></span><br><span class="line">     <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">     <span class="comment">//   &#125;,</span></span><br><span class="line">     <span class="comment">// &#125;,</span></span><br><span class="line">     <span class="comment">// 修改配置</span></span><br><span class="line">     <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">       <span class="comment">// 组，哪些模块要打包到一个组</span></span><br><span class="line">       <span class="comment">// defaultVendors: &#123; // 组名</span></span><br><span class="line">       <span class="comment">//   test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">       <span class="comment">//   priority: -10, // 权重（越大越高）</span></span><br><span class="line">       <span class="comment">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">       <span class="comment">// &#125;,</span></span><br><span class="line">       <span class="attr">default</span>: &#123;</span><br><span class="line">         <span class="comment">// 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">         <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 我们定义的文件体积太小了，所以要改打包的最小文件体积</span></span><br><span class="line">         <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">         <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">         <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<h5 id="按需加载，动态导入"><a href="#按需加载，动态导入" class="headerlink" title="按需加载，动态导入"></a>按需加载，动态导入</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i eslint-plugin-import -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>], <span class="comment">// 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的</span></span><br></pre></td></tr></table></figure>

<h2 id="Preload-x2F-Prefetch"><a href="#Preload-x2F-Prefetch" class="headerlink" title="Preload &#x2F; Prefetch"></a>Preload &#x2F; Prefetch</h2><ul>
<li><code>Preload</code>：告诉浏览器立即加载资源。</li>
<li><code>Prefetch</code>：告诉浏览器在空闲时才开始加载资源。</li>
</ul>
<p>它们共同点：</p>
<ul>
<li>都只会加载资源，并不执行。</li>
<li>都有缓存。</li>
</ul>
<p>它们区别：</p>
<ul>
<li><code>Preload</code>加载优先级高，<code>Prefetch</code>加载优先级低。</li>
<li><code>Preload</code>只能加载当前页面需要使用的资源，<code>Prefetch</code>可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</li>
</ul>
<p>总结：</p>
<ul>
<li>当前页面优先级高的资源用 <code>Preload</code> 加载。</li>
<li>下一个页面需要使用的资源用 <code>Prefetch</code> 加载。</li>
</ul>
<p>它们的问题：兼容性较差。</p>
<ul>
<li>我们可以去 <a href="https://caniuse.com/">Can I Useopen in new window</a> 网站查询 API 的兼容性问题。</li>
<li><code>Preload</code> 相对于 <code>Prefetch</code> 兼容性好一点。</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i @vue/preload-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">PreloadWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@vue/preload-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">PreloadWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&quot;preload&quot;</span>, <span class="comment">// preload兼容性更好</span></span><br><span class="line">    <span class="attr">as</span>: <span class="string">&quot;script&quot;</span>,</span><br><span class="line">    <span class="comment">// rel: &#x27;prefetch&#x27; // prefetch兼容性更差</span></span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure>

<h2 id="Network-Cache"><a href="#Network-Cache" class="headerlink" title="Network Cache"></a>Network Cache</h2><p>它们都会生成一个唯一的 hash 值。</p>
<ul>
<li>fullhash（webpack4 是 hash）</li>
</ul>
<p>每次修改任何一个文件，所有文件名的 hash 至都将改变。所以一旦修改了任何一个文件，整个项目的文件缓存都将失效。</p>
<ul>
<li>chunkhash</li>
</ul>
<p>根据不同的入口文件(Entry)进行依赖文件解析、构建对应的 chunk，生成对应的哈希值。我们 js 和 css 是同一个引入，会共享一个 hash 值。</p>
<ul>
<li>contenthash</li>
</ul>
<p>根据文件内容生成 hash 值，只有文件内容变化了，hash 值才会变化。所有文件 hash 值是独享且不同的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="comment">// [contenthash:8]使用contenthash，取8位长度</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].[contenthash:8].js&quot;</span>, <span class="comment">// 入口文件打包输出资源命名方式</span></span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].[contenthash:8].chunk.js&quot;</span>, <span class="comment">// 动态导入输出资源命名方式</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/media/[name].[hash][ext]&quot;</span>, <span class="comment">// 图片、字体等资源命名方式（注意用hash）</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="Core-js"><a href="#Core-js" class="headerlink" title="Core-js"></a>Core-js</h2><p><code>core-js</code> 是专门用来做 ES6 以及以上 API 的 <code>polyfill</code>。</p>
<p><code>polyfill</code>翻译过来叫做垫片&#x2F;补丁。就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm i @babel/eslint-parser -D</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>, <span class="comment">// 支持最新的最终 ECMAScript 标准</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>], <span class="comment">// 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">// es6</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// es module</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 智能预设：能够编译ES6语法</span></span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      <span class="comment">// 按需加载core-js的polyfill</span></span><br><span class="line">      &#123; <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>, <span class="attr">corejs</span>: &#123; <span class="attr">version</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">proposals</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="React-脚手架示列"><a href="#React-脚手架示列" class="headerlink" title="React 脚手架示列"></a>React 脚手架示列</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReactRefreshWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@pmmmwh/react-refresh-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    isProduction ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor &amp;&amp; &#123;</span><br><span class="line">      <span class="attr">loader</span>: preProcessor,</span><br><span class="line">      <span class="attr">options</span>:</span><br><span class="line">        preProcessor === <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">          ? &#123;</span><br><span class="line">              <span class="comment">// antd的自定义主题</span></span><br><span class="line">              <span class="attr">lessOptions</span>: &#123;</span><br><span class="line">                <span class="attr">modifyVars</span>: &#123;</span><br><span class="line">                  <span class="comment">// 其他主题色：https://ant.design/docs/react/customize-theme-cn</span></span><br><span class="line">                  <span class="string">&quot;@primary-color&quot;</span>: <span class="string">&quot;#1DA57A&quot;</span>, <span class="comment">// 全局主色</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          : &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: isProduction ? path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>) : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">filename</span>: isProduction</span><br><span class="line">      ? <span class="string">&quot;static/js/[name].[contenthash:10].js&quot;</span></span><br><span class="line">      : <span class="string">&quot;static/js/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: isProduction</span><br><span class="line">      ? <span class="string">&quot;static/js/[name].[contenthash:10].chunk.js&quot;</span></span><br><span class="line">      : <span class="string">&quot;static/js/[name].chunk.js&quot;</span>,</span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/js/[hash:10][ext][query]&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;sass-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;stylus-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">              <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">cacheCompression</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">plugins</span>: [</span><br><span class="line">                <span class="comment">// &quot;@babel/plugin-transform-runtime&quot;,  // presets中包含了</span></span><br><span class="line">                !isProduction &amp;&amp; <span class="string">&quot;react-refresh/babel&quot;</span>,</span><br><span class="line">              ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.jsx&quot;</span>],</span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">      <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    isProduction &amp;&amp;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].css&quot;</span>,</span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].chunk.css&quot;</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    !isProduction &amp;&amp; <span class="keyword">new</span> <span class="title class_">ReactRefreshWebpackPlugin</span>(),</span><br><span class="line">    <span class="comment">// 将public下面的资源复制到dist目录去（除了index.html）</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public&quot;</span>),</span><br><span class="line">          <span class="attr">to</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">          <span class="attr">toType</span>: <span class="string">&quot;dir&quot;</span>,</span><br><span class="line">          <span class="attr">noErrorOnMissing</span>: <span class="literal">true</span>, <span class="comment">// 不生成错误</span></span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="comment">// 忽略文件</span></span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="comment">// 跳过terser压缩js</span></span><br><span class="line">            <span class="attr">minimized</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: isProduction,</span><br><span class="line">    <span class="comment">// 压缩的操作</span></span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="comment">// 压缩css</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      <span class="comment">// 压缩js</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserWebpackPlugin</span>(),</span><br><span class="line">      <span class="comment">// 压缩图片</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">minimizer</span>: &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                      <span class="attr">params</span>: &#123;</span><br><span class="line">                        <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                      &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 代码分割配置</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="comment">// layouts通常是admin项目的主体布局组件，所有路由组件都要使用的</span></span><br><span class="line">        <span class="comment">// 可以单独打包，从而复用</span></span><br><span class="line">        <span class="comment">// 如果项目中没有，请删除</span></span><br><span class="line">        <span class="attr">layouts</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;layouts&quot;</span>,</span><br><span class="line">          <span class="attr">test</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src/layouts&quot;</span>),</span><br><span class="line">          <span class="attr">priority</span>: <span class="number">40</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果项目中使用antd，此时将所有node_modules打包在一起，那么打包输出文件会比较大。</span></span><br><span class="line">        <span class="comment">// 所以我们将node_modules中比较大的模块单独打包，从而并行加载速度更好</span></span><br><span class="line">        <span class="comment">// 如果项目中没有，请删除</span></span><br><span class="line">        <span class="attr">antd</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;chunk-antd&quot;</span>,</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]antd(.*)/</span>,</span><br><span class="line">          <span class="attr">priority</span>: <span class="number">30</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 将react相关的库单独打包，减少node_modules的chunk体积。</span></span><br><span class="line">        <span class="attr">react</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]react(.*)?[\\/]/</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&quot;initial&quot;</span>,</span><br><span class="line">          <span class="attr">priority</span>: <span class="number">20</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">libs</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;chunk-libs&quot;</span>,</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">priority</span>: <span class="number">10</span>, <span class="comment">// 权重最低，优先考虑前面内容</span></span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&quot;initial&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="function">(<span class="params">entrypoint</span>) =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: isProduction ? <span class="string">&quot;production&quot;</span> : <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: isProduction ? <span class="string">&quot;source-map&quot;</span> : <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">  <span class="attr">performance</span>: <span class="literal">false</span>, <span class="comment">// 关闭性能分析，提示速度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端数据埋点上报</title>
    <url>/2023/01/29/%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9%E4%B8%8A%E6%8A%A5/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>上个月在公司接收组长派发的一个任务，做一个web3项目的数据监控上报，从没接触过这方面的东西，开始我的内心是惊慌的，但随着去了解相关知识后，好像也不是那么难。</p>
<h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="浏览器API：navigator-userAgent"><a href="#浏览器API：navigator-userAgent" class="headerlink" title="浏览器API：navigator.userAgent"></a>浏览器API：navigator.userAgent</h3><h3 id="uv（用户浏览量）"><a href="#uv（用户浏览量）" class="headerlink" title="uv（用户浏览量）"></a>uv（用户浏览量）</h3><h3 id="pv（页面浏览量）"><a href="#pv（页面浏览量）" class="headerlink" title="pv（页面浏览量）"></a>pv（页面浏览量）</h3><h3 id="sendBeacon方法"><a href="#sendBeacon方法" class="headerlink" title="sendBeacon方法"></a>sendBeacon方法</h3><h3 id="visibilitychange"><a href="#visibilitychange" class="headerlink" title="visibilitychange"></a>visibilitychange</h3><h2 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h2><span id="more"></span>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isDesktop &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers/utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Base64</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;js-base64&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuidv4 &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReporterData</span> &#123;</span><br><span class="line">  <span class="attr">deviceCategory</span>: <span class="built_in">string</span> <span class="comment">// 设备类别</span></span><br><span class="line">  <span class="attr">visitTime</span>: <span class="built_in">number</span> <span class="comment">// 访问时间（秒）</span></span><br><span class="line">  <span class="attr">accessSourceInside</span>: <span class="built_in">string</span> <span class="comment">// 内部访问源</span></span><br><span class="line">  <span class="attr">accessSource</span>: <span class="built_in">string</span> <span class="comment">// 访问源</span></span><br><span class="line">  <span class="attr">accessEnvironment</span>: <span class="built_in">string</span> <span class="comment">// 访问环境</span></span><br><span class="line">  <span class="attr">browser</span>: <span class="built_in">string</span> <span class="comment">// 浏览器</span></span><br><span class="line">  <span class="attr">system</span>: <span class="built_in">string</span> <span class="comment">// 操作系统</span></span><br><span class="line">  <span class="attr">resolution</span>: <span class="built_in">string</span> <span class="comment">// 设备尺寸</span></span><br><span class="line">  <span class="attr">language</span>: <span class="built_in">string</span> <span class="comment">// 语言</span></span><br><span class="line">  <span class="attr">country</span>: <span class="built_in">string</span> <span class="comment">// 国家地区</span></span><br><span class="line">  <span class="attr">city</span>: <span class="built_in">string</span> <span class="comment">// 国家地区</span></span><br><span class="line">  <span class="attr">pageBrowsingTime</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">number</span>]: &#123;</span><br><span class="line">      <span class="attr">pageName</span>: <span class="built_in">string</span></span><br><span class="line">      <span class="attr">stopTime</span>: <span class="built_in">number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&gt;</span><br><span class="line">  <span class="attr">uuid</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WINDOW_URL</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CURL</span> = <span class="string">&#x27;http://ip-api.com/json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CURLS</span> = <span class="string">&#x27;https://ipinfo.io/json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VISIBILITY_CHANGE</span> = <span class="string">&#x27;visibilitychange&#x27;</span></span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REQUEST_URL</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PAGE_DATA</span> = <span class="string">&#x27;PageData&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IP_INFO</span> = <span class="string">&#x27;IPInfo&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; userAgent &#125; = navigator</span><br><span class="line"><span class="comment">//获取钱包来源</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDeviceCategory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">CategoryArr</span> = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Mobile&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span> === <span class="literal">false</span> &amp;&amp; userAgent.<span class="title function_">match</span>(<span class="regexp">/Mobile/</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Tablet&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: [<span class="number">480</span>, <span class="number">600</span>, <span class="number">720</span>].<span class="title function_">includes</span>(<span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">width</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Desktop&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: isDesktop,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">CategoryArr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">it</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Else&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取操作系统</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSystem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">OSArr</span> = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Windows&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/compatible/i</span>) || userAgent.<span class="title function_">match</span>(<span class="regexp">/Windows/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;MacOS&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/Macintosh/i</span>) || userAgent.<span class="title function_">match</span>(<span class="regexp">/MacIntel/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Ios&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/iphone/i</span>) || userAgent.<span class="title function_">match</span>(<span class="regexp">/Ipad/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/android/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Ubuntu&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/Ubuntu/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Linux&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/Linux/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">OSArr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">it</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Other&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取浏览器类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getBrowsers</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">any</span> = <span class="variable language_">window</span>.<span class="property">navigator</span></span><br><span class="line">  <span class="keyword">const</span> bwsArr = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;sgssapp&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: <span class="regexp">/sogousearch/i</span>.<span class="title function_">test</span>(userAgent),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;wechat&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: <span class="regexp">/MicroMessenger/i</span>.<span class="title function_">test</span>(userAgent),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;weibo&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/Weibo/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;uc&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!userAgent.<span class="title function_">match</span>(<span class="regexp">/UCBrowser/i</span>) || userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27; UBrowser&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Brave&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!(</span><br><span class="line">        !(<span class="string">&#x27;mozInnerScreenX&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &amp;&amp;</span><br><span class="line">        <span class="string">&#x27;chrome&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> &amp;&amp;</span><br><span class="line">        <span class="string">&#x27;webkitStorageInfo&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> &amp;&amp;</span><br><span class="line">        <span class="string">&#x27;brave&#x27;</span> <span class="keyword">in</span> n &amp;&amp;</span><br><span class="line">        <span class="string">&#x27;isBrave&#x27;</span> <span class="keyword">in</span> n.<span class="property">brave</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;sogou&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;MetaSr&#x27;</span>) &gt; -<span class="number">1</span> || userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Sogou&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;xiaomi&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;MiuiBrowser&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;baidu&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Baidu&#x27;</span>) &gt; -<span class="number">1</span> || userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;BIDUBrowser&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;360&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;360EE&#x27;</span>) &gt; -<span class="number">1</span> || userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;360SE&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;2345&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;2345Explorer&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;edge&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Edge&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;ie11&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;rv:11.0&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;ie&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;compatible&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;MSIE&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;firefox&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Firefox&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;safari&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Safari&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>) === -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;qqbrowser&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;MQQBrowser&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27; QQ&#x27;</span>) === -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;qq&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;QQ&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;chrome&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>) &gt; -<span class="number">1</span> || userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;CriOS&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;opera&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Opera&#x27;</span>) &gt; -<span class="number">1</span> || userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;OPR&#x27;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> bwsArr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">it</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Other&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取访问来源</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getAccessSource</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="variable constant_">WINDOW_URL</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> str = <span class="variable constant_">WINDOW_URL</span>.<span class="title function_">substring</span>(index + <span class="number">1</span>, <span class="variable constant_">WINDOW_URL</span>.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SourceArr</span> = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Twitter&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!str.<span class="title function_">match</span>(<span class="regexp">/Twitter/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Telegram&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!str.<span class="title function_">match</span>(<span class="regexp">/Telegram/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Discord&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!str.<span class="title function_">match</span>(<span class="regexp">/Discord/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Mirror&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!str.<span class="title function_">match</span>(<span class="regexp">/Mirror/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Blockbeats&#x27;</span>,</span><br><span class="line">      <span class="attr">it</span>: !!str.<span class="title function_">match</span>(<span class="regexp">/Blockbeats/i</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">SourceArr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">it</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">referrer</span> || <span class="variable language_">document</span>.<span class="property">referrer</span> === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;Search&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Others&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取站内跳转</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getAccessSourceInside</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">WINDOW_URL</span>.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span> || <span class="string">&#x27;=&#x27;</span> || <span class="string">&#x27;&amp;&#x27;</span>)) <span class="keyword">return</span> <span class="string">&#x27;Unknown&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Jump with in the website&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取手机端钱包软件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getMobilePocket</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isDesktop) &#123;</span><br><span class="line">    <span class="keyword">const</span> startIndex = userAgent.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> application = userAgent.<span class="title function_">substring</span>(startIndex + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">OSArr</span> = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;TokenPocket&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!application.<span class="title function_">match</span>(<span class="regexp">/TokenPocket/i</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ImToken&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!application.<span class="title function_">match</span>(<span class="regexp">/ImToken/i</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;CoinHub&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!application.<span class="title function_">match</span>(<span class="regexp">/DBank/i</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Brave&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!application.<span class="title function_">match</span>(<span class="regexp">/Mobile\/15E148/i</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;MetaMask&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!application.<span class="title function_">match</span>(<span class="regexp">/Safari\/605.1/i</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">OSArr</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">it</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> application</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Direct&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由页面停留时间计算</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reqData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pageData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">PAGE_DATA</span>) || <span class="string">&#x27;&#x27;</span>) || []</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">    load?: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">path</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">stopTime</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;&gt; = []</span><br><span class="line">  <span class="keyword">const</span> stopAllTime = pageData?.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev: <span class="built_in">number</span>, cur: &#123; path: <span class="built_in">string</span>; stopTime: <span class="built_in">number</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur.<span class="property">path</span> === <span class="string">&#x27;/history&#x27;</span> &amp;&amp; cur.<span class="property">stopTime</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(cur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.<span class="property">stopTime</span> + prev</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> historyPage = arr?.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev: <span class="built_in">number</span>, cur: &#123; path: <span class="built_in">string</span>; stopTime: <span class="built_in">number</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cur.<span class="property">stopTime</span> + prev</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify([</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#123; pageName: <span class="string">&#x27;FunctionPage&#x27;</span>, stopTime: stopAllTime - historyPage &#125;,</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      pageName: <span class="string">&#x27;HistoryPage&#x27;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">      stopTime: historyPage,</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;,</span></span></span><br><span class="line"><span class="subst"><span class="string">  ])&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过第三方接口，获取访问IP、国家地区、城市</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIpCountry</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> record = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">IP_INFO</span>)</span><br><span class="line">  <span class="keyword">if</span> (!record) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">CURL</span>, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> info = &#123;</span><br><span class="line">          <span class="attr">country</span>: jsonResponse.<span class="property">countryCode</span>,</span><br><span class="line">          <span class="attr">city</span>: jsonResponse.<span class="property">city</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;IPInfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(info))</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="variable constant_">CURLS</span>, &#123;</span><br><span class="line">          <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;curl/7.77.0&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> info = &#123;</span><br><span class="line">              <span class="attr">country</span>: jsonResponse.<span class="property">country</span>,</span><br><span class="line">              <span class="attr">city</span>: jsonResponse.<span class="property">city</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;IPInfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(info))</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数</span></span><br><span class="line"><span class="keyword">const</span> getUserAgent = (): <span class="function"><span class="params">ReporterData</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> record = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">IP_INFO</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">IPInfo</span> = record ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(record) : <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">deviceCategory</span>: <span class="title function_">getDeviceCategory</span>(),</span><br><span class="line">    <span class="attr">visitTime</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">window</span>.<span class="property">performance</span>.<span class="property">timeOrigin</span> / <span class="number">1000</span>),</span><br><span class="line">    <span class="attr">accessSourceInside</span>: <span class="title function_">getAccessSourceInside</span>(),</span><br><span class="line">    <span class="attr">accessSource</span>: <span class="title function_">getAccessSource</span>(),</span><br><span class="line">    <span class="attr">accessEnvironment</span>: <span class="title function_">getMobilePocket</span>(),</span><br><span class="line">    <span class="attr">browser</span>: <span class="title function_">getBrowsers</span>(),</span><br><span class="line">    <span class="attr">system</span>: <span class="title function_">getSystem</span>(),</span><br><span class="line">    <span class="attr">resolution</span>: <span class="string">`<span class="subst">$&#123;<span class="variable language_">window</span>.screen.width&#125;</span>×<span class="subst">$&#123;<span class="variable language_">window</span>.screen.height&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">language</span>: navigator.<span class="property">language</span>,</span><br><span class="line">    <span class="attr">country</span>: <span class="title class_">IPInfo</span>?.<span class="property">country</span> || <span class="string">&#x27;Unknown&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="title class_">IPInfo</span>?.<span class="property">city</span> || <span class="string">&#x27;Unknown&#x27;</span>,</span><br><span class="line">    <span class="attr">pageBrowsingTime</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">reqData</span>()),</span><br><span class="line">    <span class="attr">uuid</span>: <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;uuid&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      ? <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;uuid&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>`</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取后端返回的IP、国家地区、城市</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIp</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">getMethod</span>(<span class="string">`<span class="subst">$&#123;REQUEST_URL&#125;</span>/getIP`</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!res.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="title function_">getIpCountry</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> info = &#123;</span><br><span class="line">        <span class="attr">country</span>: res.<span class="property">data</span>.<span class="property">country</span>,</span><br><span class="line">        <span class="attr">city</span>: res.<span class="property">data</span>.<span class="property">city</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;IPInfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(info))</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Report</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>()</span><br><span class="line">  <span class="comment">//页面访问的开始时间</span></span><br><span class="line">  <span class="keyword">const</span> stopTimes = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//cookies标识唯一身份</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCookies</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">includes</span>(<span class="string">&#x27;uuid&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`uuid=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(uuidv4().replace(/-/g, <span class="string">&#x27;&#x27;</span>))&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//路由切换记录访问时间（模拟页面卸载挂载）</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">pageListener</span> = (<span class="params">Times: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Time</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - <span class="title class_">Times</span></span><br><span class="line">    <span class="keyword">const</span> record = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">PAGE_DATA</span>)</span><br><span class="line">    <span class="keyword">const</span> data = (record &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">parse</span>(record)) || []</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(</span><br><span class="line">      <span class="variable constant_">PAGE_DATA</span>,</span><br><span class="line">      <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([</span><br><span class="line">        ...data,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">load</span>: <span class="title function_">moment</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br><span class="line">          <span class="attr">path</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>,</span><br><span class="line">          <span class="attr">stopTime</span>: <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Time</span> / <span class="number">1000</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ]),</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//上报数据函数，sendBeacon是post接口（可以报错在页面卸载前完成数据发送上报）</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reportData</span> = (<span class="params">url: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">handleCookies</span>()</span><br><span class="line">    <span class="title function_">pageListener</span>(stopTimes)</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;token&#x27;</span>, <span class="title class_">Base64</span>.<span class="title function_">encode</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">getUserAgent</span>())))</span><br><span class="line">    navigator.<span class="title function_">sendBeacon</span>(url, formData)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//监听事件</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">listenerEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">reportData</span>(<span class="string">`<span class="subst">$&#123;REQUEST_URL&#125;</span>/getData`</span>)</span><br><span class="line">      <span class="comment">//上报成功就清除本地缓存</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="variable constant_">PAGE_DATA</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//新用户初次访问请求Ip</span></span><br><span class="line">    <span class="title function_">getIp</span>()</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//VISIBILITY_CHANGE适配h5端，后台挂起程序也记录</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="variable constant_">VISIBILITY_CHANGE</span>, listenerEvent)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">pageListener</span>(stopTimes)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="variable constant_">VISIBILITY_CHANGE</span>, listenerEvent)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [location.<span class="property">pathname</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">只需要将导出的组件，放在顶级组件下即可</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2</title>
    <url>/2023/01/29/koa2/</url>
    <content><![CDATA[<p>后续更新。。。</p>
]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>reactRedux</title>
    <url>/2023/01/29/reactRedux/</url>
    <content><![CDATA[<p>react-redux是对redux的一种扩充，能提高redux在react的性能，并且能够使代码更加的优雅。</p>
<p>react-redux依赖于react以及redux，所以使用react-redux之前，是基于你react以及redux已经安装完成。</p>
<span id="more"></span>

<h3 id="安装以及使用"><a href="#安装以及使用" class="headerlink" title="安装以及使用"></a>安装以及使用</h3><ol>
<li>下包 npm install react-redux -S</li>
<li>创建store文件夹</li>
<li>创建index.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<ol>
<li>创建reducer.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultData = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state=defaultData,action</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<ol>
<li>在main.js使用react的context特性注入store</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入react-redux的Provider</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注入store</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol>
<li>在组件中使用connect</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>声明两个注入props的属性和方法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的参数state是个默认参数，这里的参数state指的是store的state，而不是组件自身的state</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">mapStateToProps</span> = state=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">          <span class="comment">//写属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">mapDispatchToProps</span> = dispatch=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="comment">//写方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用connect修饰组件并导出组件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//connect接收两个参数，是上面定义的两个方法，connect返回一个方法，方法接收组件本身作为参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>router</title>
    <url>/2023/01/29/router/</url>
    <content><![CDATA[<h2 id="1、路由创建"><a href="#1、路由创建" class="headerlink" title="1、路由创建"></a>1、路由创建</h2><p>在 src 下创建 router&gt;index.tsx。以首页与登录页切换为例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;App6&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&quot;Detail&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;Login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyRouter</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">App</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">List</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/detail&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Detail</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyRouter</span>;</span><br></pre></td></tr></table></figure>

<p>关键词解析：</p>
<p>1、BrowserRouter重命名为Router</p>
<p>2、所有的Route组件必须放在Routes组件中</p>
<p>3、Route标签上的element属性必须填写标签结构的组件，如：，而不是 Home</p>
<p>4、加了index属性的路由不需要写path，因为&#x2F;路径就指向该组件</p>
<span id="more"></span>

<h2 id="2、入口文件引入路由"><a href="#2、入口文件引入路由" class="headerlink" title="2、入口文件引入路由"></a>2、入口文件引入路由</h2><ol>
<li>src&gt;index.tsx ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyRouter</span> <span class="keyword">from</span> <span class="string">&#x27;router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyRouter</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="3、组件显示"><a href="#3、组件显示" class="headerlink" title="3、组件显示"></a>3、组件显示</h2><p>关键词解析：</p>
<p>1、 组件用来显示子路由， Outlet&#x3D;&gt;路由出口（与vue中的routerView作用相同）</p>
<p>2、Link最终会被html解析为a标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&quot;/<span class="attr">list</span>&quot;&#125;&gt;</span>列表页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&quot;/<span class="attr">detail</span>&quot;&#125;&gt;</span>详情页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&quot;/<span class="attr">about</span>&quot;&#125;&gt;</span>关于我们<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h2 id="4、参数传递"><a href="#4、参数传递" class="headerlink" title="4、参数传递"></a>4、参数传递</h2><h4 id="子路由形式携带"><a href="#子路由形式携带" class="headerlink" title="子路由形式携带"></a>子路由形式携带</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录页的路由配置</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/login/:id&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Link跳转路由</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/login/123&quot;</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>此时可以使用react-router-dom提供的Hook来获取：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从路由参数中解构出来</span></span><br><span class="line"><span class="keyword">const</span> &#123;id&#125; = <span class="title function_">useParams</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id)    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h4 id="问号-形式参数"><a href="#问号-形式参数" class="headerlink" title="问号(?)形式参数"></a>问号(?)形式参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录页的路由配置</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/login&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Link跳转路由</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/login?id=123&quot;</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>获取形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [params] = <span class="title function_">useSearchParams</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">getAll</span>(<span class="string">&#x27;id&#x27;</span>))    <span class="comment">// [&#x27;123&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>以上的id其实属于携带方式不明确，也不一定会携带，因此路由可以设置为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/login/*&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5、事件跳转"><a href="#5、事件跳转" class="headerlink" title="5、事件跳转"></a>5、事件跳转</h2><p>事件中执行跳转页面，可以使用useNavigate这个hook进行跳转。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">goLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span onClick=&#123;goLogin&#125;&gt;登录页<span class="number">2</span>&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>简单参数的传递可以直接带在url后，而复杂参数需要以复杂数据类型的形式携带：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"><span class="title function_">navigate</span>(<span class="string">&#x27;/login&#x27;</span>, &#123;<span class="attr">state</span>: &#123;<span class="attr">id</span>: <span class="number">456</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>navigate方法第二个参数必须是对象，而且这个对象只接受replace和state两个属性，state可以用来携带参数。</p>
<p>携带复杂参数，可以使用useLocation来获取参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> location = <span class="title function_">useLocation</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">state</span>.<span class="property">id</span>);  <span class="comment">// 456</span></span><br></pre></td></tr></table></figure>

<h2 id="5、404匹配"><a href="#5、404匹配" class="headerlink" title="5、404匹配"></a>5、404匹配</h2><p>当路由为404时，可以对路由文件 router&#x2F;index.tsx 进行如下匹配：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NoMatch</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;No found...404&#125;<span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">  )</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">const MyRouter = () =&gt; (</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">App</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        ...</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NoMatch</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">export default MyRouter;</span></span><br></pre></td></tr></table></figure>

<p>如此，输入错误路径，就会自动重定向到404页面了。</p>
<h2 id="6、路由守卫"><a href="#6、路由守卫" class="headerlink" title="6、路由守卫"></a>6、路由守卫</h2><p>react路由守卫不同于vue有封装好的钩子，需要手动配置。其原理如下：如果已登录状态下则跳转到首页否则重定向到&#x2F;login</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">AuthData</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="variable constant_">JSX</span>.<span class="property">Element</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getLoginData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;IsLogin&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Auth</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">AuthData</span>&gt; = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">getLoginData</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">replace</span> /&gt;</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;children&#125;<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Auth</span></span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<p>将封装好的路由守卫组件（<Auth/>）包裹住需要展示内容的主页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Routes</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">path</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">element</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &lt;<span class="attr">Auth</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Auth</span>&gt;</span>&#125;/&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Signer</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Routes</span>&gt;</span><br></pre></td></tr></table></figure>



<h2 id="7、useRouterHooks的使用"><a href="#7、useRouterHooks的使用" class="headerlink" title="7、useRouterHooks的使用"></a>7、useRouterHooks的使用</h2><p>最近在进行的项目中进行路由的配置，发现了新的，更简单明了的玩法，废话不多说，直接上代码了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteObject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OpenOrder</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/OpenOrder/OpenOrder&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FilledOrder</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/FilledOrder/FilledOrder&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyOrder</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/MyOrder/MyOrder&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyPositions</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/MyPositions/MyPositions&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CreateOrder</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/CreateOrder/CreateOrder&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Details</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Details/Details&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mint</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Mint/Mint&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒加载格式定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lazyFactory</span> = (<span class="params">LazyComponent: React.LazyExoticComponent&lt;React.FC&lt;&#123;&#125;&gt;&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;null&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LazyComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用定义的懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyOpenOrder</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">OpenOrder</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyFilledOrder</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">FilledOrder</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyMyOrder</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">MyOrder</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyMyPositions</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">MyPositions</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyCreateOrder</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">CreateOrder</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyDetails</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">Details</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyMint</span> = <span class="title function_">lazyFactory</span>(<span class="title class_">Mint</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由路径的基本配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[] = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyOpenOrder</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/filledOrder&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyFilledOrder</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/myOrder&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyMyOrder</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/myPositions&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyMyPositions</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/createOrder&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyCreateOrder</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/detail&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyDetails</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/mint&#x27;</span>, <span class="attr">element</span>: <span class="title class_">LazyMint</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br><span class="line"><span class="comment">//App文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoadingProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Loading/Loading&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToastContainer</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Toast/ToastContainer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="comment">// import Report from &#x27;./Report&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MessageContainer</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Message/MessageContainer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./ThemeProvider&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routerConfig&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LoadingProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">Report</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    //使用useRoutes的Hooks，直接包裹routerConfig配置好的routers</span></span><br><span class="line"><span class="language-xml">        &#123;useRoutes(routes)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ToastContainer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MessageContainer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LoadingProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>useRef</title>
    <url>/2023/01/29/useRef/</url>
    <content><![CDATA[<p>useRef其实就是函数组件的实例属性，在<strong>函数组件的生命周期内（或者说实例没有被销毁）</strong>始终存在且保持不变。</p>
<p><strong>useRef修改时候，并不会引起组件的刷新重渲染</strong></p>
<p><strong>Ref也可用作DOM节点的引用</strong></p>
<p><strong>Demo1</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;count.current = count.current +1&#125; &#125;&gt;count加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前的count &#123;count.current&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，我们修改count的时候，p标签始终显示为0</p>
<span id="more"></span>
<p>Demo2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> prev = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    prev.<span class="property">current</span> = count</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setCount(count+1)&#125;&gt;count加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前的count &#123;count&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>之前的count &#123;prev.current&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序执行可发现，即使我们prev.current &#x3D; count去修改ref值，但组件并没有重新渲染。</p>
<p><strong>详细执行过程</strong></p>
<ol>
<li>组件实例化，组件挂载。此时组件显示count &#x3D; 0 , prev &#x3D; 0</li>
<li>点击button，修改count，触发组件重新渲染</li>
<li>组件重新渲染，此时组件显示count &#x3D; 1, prev &#x3D; 0</li>
<li>组件重新渲染完成，执行effect，ref 被赋值成 1</li>
<li>此时组件并没有重新渲染，程序按照我们预期的执行。</li>
</ol>
<p>访问Demo</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> $Buttom = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;$Buttom&#125;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>console.log($Buttom.current)&#125;&gt;print<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果需要访问子组件中的dom呢?使用React.forwardRef</strong></p>
<p>React.forwardRef 是React中一个高阶组件，高阶组件内部会帮组件注入接收到ref， 且作为函数组件的第二个参数使用。（与React.useImperativeHandlek一起使用）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="title class_">React</span>.<span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">		<span class="attr">handleData</span>: <span class="string">&#x27;我是子组件的数据&#x27;</span></span><br><span class="line">	&#125;))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Child</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> childrenRef= useRef&lt;any&gt;()</span><br><span class="line">	<span class="keyword">let</span> childData = childrenRef.<span class="property">current</span>.<span class="property">handleData</span><span class="comment">// 得到子组件的数据</span></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;childrenRef&#125;</span> /&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用React.createRef有什么区别</strong></p>
<ul>
<li>效果上没有区别</li>
<li>性能上，createRef 在函数每次重新渲染的时候都会重新创建一个ref对象，而useRef不会。</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>useMemo</title>
    <url>/2023/01/29/useMemo/</url>
    <content><![CDATA[<p>useMemo用于保存<strong>复杂</strong>计算的结果。</p>
<p>useMemo与useCallback使用场景特别相似，都是用于性能优化，不同的是useMemo返回的是一个值，而useCallback返回的是一个函数。</p>
<p>假设我们有MyComponent以及Counter两个组件，以及一个复杂计算函数Fibonacci</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [step, setStep] = <span class="title function_">useState</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setStep(step+3)&#125;&gt;step加3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setData(data+1)&#125;&gt;data加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">step</span>=<span class="string">&#123;step&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123;step,data&#125;</span>)&#123;</span><br><span class="line">  <span class="comment">// 使用useMemo保存计算结果</span></span><br><span class="line">  <span class="comment">// const result = useMemo(() =&gt; Fibonacci(step), [step])</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不使用useMemo保存计算结果</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Fibonacci</span>(step)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;result&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fibonacci</span>(<span class="params">step</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(step==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(step==<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Fibonacci</span>(step-<span class="number">1</span>) + <span class="title class_">Fibonacci</span>(step-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行情况分两种情况：</p>
<ul>
<li><p>不使用useMemo保存计算结果</p>
</li>
<li><ul>
<li>在step值加到40以上的时候，明显感受到result变量计算缓慢</li>
<li>只修改data状态，Couter组件重新渲染，已经发生卡顿，原因在于Couter重新计算了result变量，但其实在不改变step的情况下，result不应该重新计算。</li>
</ul>
</li>
<li><p>使用useMemo保存计算结果</p>
</li>
<li><ul>
<li>在step值加到40以上的时候，明显感受到result变量计算缓慢</li>
<li>只修改data状态，组件渲染依旧流畅，原因是result依赖项没有发生改变，result没有重新计算。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>useCallback</title>
    <url>/2023/01/29/useCallback/</url>
    <content><![CDATA[<p> 众所周知（有实际动手实验），React的函数组件再每次渲染的时候，都会执行一遍一整个函数数组，来获取返回的渲染后的VDom，如果我们在函数内部声明了一个函数，那么该函数在每次重渲染的时候都会重新声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以观察到，每次刷新渲染的时候getData函数都会重新声明。</p>
<span id="more"></span>
<h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [toggle, setToggle] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">CallBack</span> = <span class="title function_">useCallback</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">  &#125;, [toggle])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setCount(count+1)&#125;&gt;点我count+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setToggle(!toggle)&#125;&gt;点我重新生成callBack<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;CallBack&#125;</span>&gt;</span>点我调用Func<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当count改变的时候，CallBack始终打印的是0</li>
<li>当第一次点击重新生成CallBack时候，打印的结果就是最新的count值</li>
</ul>
<p><strong>讲到这，不得不提一下React一个神级高阶组件API，React.memo</strong></p>
<p>在使用React过程中，发现React有个让我十分恶心的设计。</p>
<p>就是父组件一旦刷新，那么子组件全部都重新渲染。</p>
<p>假设我有一个组件FatherA，以及两个子组件ChildrenA与ChildrenB</p>
<p>很容易发现，假设FatherA 只是修改了name，没有修改age，依赖name的ChildrenA刷新了能接受，依赖了age没有依赖name的ChildrenB也一起刷新了，这就不能忍了😡</p>
<p>我们可以使用React.memo稍加改造ChildrenA与ChildrenB。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildrenA</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件A挂载了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件A卸载了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我的名字是&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;,<span class="function">(<span class="params">prev, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(prev.<span class="property">name</span> === next.<span class="property">name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildrenB</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123;age&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件B挂载了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件B卸载了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我的年龄是&#123;age&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;,<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(prev.<span class="property">age</span> === next.<span class="property">age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以上是memo这个API的标准写法，其实例子中memo的第二个参数可以省略（只需要<strong>浅层对比</strong>）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildrenA</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件A挂载了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件A卸载了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我的名字是&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildrenB</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123;age&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件B挂载了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件B卸载了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我的年龄是&#123;age&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以实现同样的效果。</p>
<p>哈哈哈哈哈，难过的东西都没有了🎉</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>useContext</title>
    <url>/2023/01/29/useContext/</url>
    <content><![CDATA[<p>提供给函数组件访问Context的能力。PS：全局跨组件通信，在顶级组件中声明传递，包裹需通信的子组件。</p>
<p>Demo</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">APP</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [ data, setData ] = <span class="title function_">useState</span>(<span class="string">&#x27;jelly&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">data</span>, <span class="attr">setData</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Children</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Children</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, setData &#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    我接收到的context是&#123;data&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;data&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>setData(e.target.value)&#125;&gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>useContext接收Context对象，返回Context的内容。</li>
<li>可以直接引入其他文件创建的Context对象，而不用担心Context对象不同，因为模块变量具有<strong>单例</strong>特性。</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>useState</title>
    <url>/2023/01/29/useState/</url>
    <content><![CDATA[<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>用于给函数组件添加状态，状态一旦发生改变，会触发组件的重渲染（销毁-&gt;获取最新的props-&gt;渲染）。</p>
<p><strong>注意，这里的props是重新获取的。</strong></p>
<p>useState返回数组，数组第一项为<code>state</code>， 第二项为<code>useState</code></p>
<p>useState告诉React，什么数据需要React帮助我们去记录，只有这些被记录的数据发生改变的时候， 才帮助我们需重新渲染组件，组件的重渲染会引发<strong>所有</strong>子组件的重渲染。</p>
<p><strong>状态以及变量</strong></p>
<ul>
<li><p>只有影响程序的最终输出结果的，才属于状态。</p>
</li>
<li><p>普通变量不会影响程序最终输出结果，称为普通变量。</p>
</li>
<li><p>状态应该最小化。</p>
</li>
</ul>
<p><strong>大量数据</strong></p>
<span id="more"></span>
<p>我们常常有这么一个业务场景。</p>
<ul>
<li>请求一个完整的数据对象，以表单形式呈现数据对象的全部字段，对数据对象进行修改并且提交。</li>
</ul>
<p>我们用<code>useState是这样的</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSX</span><br><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">  API.getData().then(res=&gt;&#123;</span><br><span class="line">      setdata(res)</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line">const [data, setData] = useState(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// data</span><br><span class="line">//&#123;</span><br><span class="line">//    name:&#x27;jelly&#x27;,</span><br><span class="line">//    age:18,</span><br><span class="line">//    skill:[</span><br><span class="line">//      &#123;</span><br><span class="line">//        name:&#x27;HTML&#x27;,</span><br><span class="line">//        level:1</span><br><span class="line">//      &#125;,</span><br><span class="line">//      &#123;</span><br><span class="line">//        name:&#x27;CSS&#x27;,</span><br><span class="line">//        level:2</span><br><span class="line">//      &#125;</span><br><span class="line">//    ]</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure>



<p>实际上，这并不符合<code>useState</code>设计原则，数据结构过于复杂了，且如果直接使用<code>setSatet</code>更新，需要每次对数据进行深拷贝，但实际上，业务场景的数据结构会更加复杂。</p>
<p>对此有几种解决方案：</p>
<ol>
<li><p>对数据进行拆解，拆分称多个state</p>
</li>
<li><p>使用<code>useReducer</code></p>
</li>
</ol>
<p>先来看拆分<code>state</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSX</span><br><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">  API.getData().then(res=&gt;&#123;</span><br><span class="line">      setname(res.name)</span><br><span class="line">      setage(res.age)</span><br><span class="line">      setskill(res.skill)</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line">const [name, setName] = useState(&#x27;&#x27;);</span><br><span class="line">const [age, setAge] = useState(-1);</span><br><span class="line">const [skill, setSkill] = useState([]);</span><br></pre></td></tr></table></figure>



<p>这么做虽然让我们更新state方便了许多，但也导致我们代码十分冗余，且提交的时候又需要手动收集一份数据，简直就是一坨💩。</p>
<p>那么如果使用<code>useReducer呢</code>，一样不是最佳解决方案</p>
<ul>
<li><p>依旧无法绕开深拷贝这件事。</p>
</li>
<li><p>有点大材小用，很多时候我们仅仅是为了深度更新某个值，且这些逻辑并不会复用于其他组件。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSX</span><br><span class="line">function ReducerTest() &#123;</span><br><span class="line">  const action = (state,action) =&gt; &#123;</span><br><span class="line">    const _state = JSON.parse(JSON.stringify(state))</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">      case &#x27;name&#x27;:</span><br><span class="line">        _state.name = &#x27;tom&#x27;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        _state.age = 0</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return _state</span><br><span class="line">  &#125;</span><br><span class="line">  const [data,Dispatch] = useReducer(action,&#123;</span><br><span class="line">    name: &#x27;jelly&#x27;,</span><br><span class="line">    age: 19</span><br><span class="line">  &#125;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;&#123;data.name&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;data.age&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;Dispatch(&#123;type:&#x27;name&#x27;&#125;)&#125;&gt;点我修改名字&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;Dispatch(&#123;type:&#x27;age&#x27;&#125;)&#125;&gt;点我修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>immer.js</strong></p>
<p>这是新认识的库但未在上线项目中实践过，但是看说明貌似能够给我们带来极大的好处：</p>
<p><a href="https://juejin.im/post/5e0968ed51882549766f3b9b">2020要用immer来代替immutable优化你的React项目</a></p>
<ul>
<li><p>防止组件在调用<code>setState</code>设置与原来相同值的情况下进行更新</p>
</li>
<li><p>更易用的<code>setState</code></p>
</li>
</ul>
<p>光是一点易用的setState，其实已经光芒四射了，减去了相对于复杂的处理</p>
<p>一个简易的DEMO</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">JSX</span></span><br><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">&#x27;immer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [&#123;<span class="attr">value</span>: <span class="number">0</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;];</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title function_">produce</span>(array, <span class="function"><span class="params">draft</span> =&gt;</span> &#123;</span><br><span class="line">  draft[<span class="number">0</span>].<span class="property">value</span> = <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr === array);</span><br></pre></td></tr></table></figure>



<p>我们可以使用&#96;useImmer来代替useState（个人现阶段较为喜欢的一种方式，第三方成熟稳定的自定义Hooks）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">JSX</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable constant_">API</span>.<span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">setData</span>(res)</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [data, setData] = <span class="title function_">useImmer</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setData</span>(<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">  state.<span class="property">name</span> = <span class="string">&#x27;jelly&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>非常容易的进行state深度更新，并且旧的数据会重用，不会刷新所有子组件（需要配合<code>React.memo</code>）。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>useEffect</title>
    <url>/2023/01/29/useEffect/</url>
    <content><![CDATA[<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>表面当前组件<strong>渲染完成包括DOM挂载</strong>，需要执行的<strong>副作用操作</strong>。</p>
<p><strong>不要尝试用生命周期的方式去理解useEffect，这会使得事情变得十分复杂</strong></p>
<p>接收两个参数，一个是回调函数，一个是依赖数据。</p>
<ul>
<li>回调函数effect，表明需要执行的函数操作</li>
<li>依赖数据，数组，表明所依赖的数据变化，只有当数组中的数据发生了改变，才会执行effect函数</li>
</ul>
<p>React 将按照 effect 声明的顺序依次调用组件中的每一个 effect</p>
<span id="more"></span>
<p><strong>时机</strong></p>
<ol>
<li>组件首次挂载完成</li>
<li>执行 <code>effect</code></li>
<li>组件状态改变 ，即将卸载</li>
<li>执行<code>effect</code>返回值函数</li>
<li>组件重新挂载完成</li>
<li>执行 <code>effect</code></li>
<li>组件卸载</li>
<li>执行 <code>effect</code> 返回值函数</li>
<li>实例销毁</li>
</ol>
<p><strong>流程</strong></p>
<p>effect-&gt;effect返回值函数-&gt;effect-&gt;effect返回值函数</p>
<p><strong>副作用</strong></p>
<p>指的是函数影响了其函数(<strong>effect自身</strong>)作用域之外的数据，比如修改了数据库，修改了浏览器的title等等。</p>
<p><strong>effect</strong></p>
<p>effect函数作为Hook组件内部用于处理一系列副作用操作，同时effect可以返回一个函数，React会帮助我们记录它就好像记录你的许多state一样，直到你的组件卸载或销毁了，React会去调用这个返回的函数。</p>
<p><strong>Capture Value</strong></p>
<p>函数组件之间存在状态隔离，我们称这个现象为函数的 <strong>Capture Value</strong> ，或者我们称React这种行为叫<strong>按帧渲染</strong>。</p>
<p>假设我们有这么一个<code>effect</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ num, setNum ] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;, [num])</span><br></pre></td></tr></table></figure>



<p>其实这个effect会被React内部保存成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">()=&gt;&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这样一看貌似没什么问题，但是如果遇到一些异步的函数比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;,[num])</span><br></pre></td></tr></table></figure>



<p>我们希望在num发生改变后，组件重新渲染，effect三秒后打印num。</p>
<p>但是在计时器等待的期间，num被修改了多次。</p>
<p>三秒后，计时器打印的是三秒前的num，而期间多次改变的数据依旧会依次打印出来。</p>
<p>这是因为， React内部，<code>effect</code> 函数已经被保存成了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">()=&gt;&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>不要试图去欺骗React</strong></p>
<p>很多时候我们会在<code>effect</code> 函数内部去依赖外部的数据，React官方指出我们需要在<code>useEffect</code>第二个数组参数内表明我们在<code>effect</code>函数内部所依赖的数据，这是因为<code>effect</code>会作为帧的方式进行保存，帧之间的作用域是隔离的，React需要对函数内部的变量转化成常量。</p>
<p>比如我们有这样的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>



<p>我们希望effect在组件渲染完毕后只执行一次，在组件销毁时候同时也销毁定时器，但是我们内部依旧是依赖了<code>count</code>这个状态。</p>
<p>显然我们这么做有点投机取巧，且这样代码并不会如期运行，count始终会被设置成同一个常量。</p>
<p>那如果我们将count添加进依赖里面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">&#125;, [count]);</span><br></pre></td></tr></table></figure>



<ul>
<li>重复的创建定时器，重复销毁定时器，造成性能浪费。</li>
</ul>
<p>这貌似得不偿失，我们可以利用State的特性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>)=&gt;</span>count+<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>



<p>移除了外部依赖，访问的永远是内部的count，这样的effect就不存在问题了。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactHook全家桶</title>
    <url>/2023/01/29/ReactHook%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<p>坐标：深圳    职位：前端开发</p>
<p>只要有时间就持续更新叭，记录前端成长路线…</p>
<p>经过大概三个月的ReactHooks学习与实践，发现其实Hooks在项目中的开发过程并不是那么流畅，项目质量不佳，很多认为是细小的事实在Hooks上不断打脸，留步总结其实是主要问题在于</p>
<ul>
<li>Vue思想带到了React上，试图模拟 watch, filter，emit 等一系列React不存在的概念。</li>
<li>想通过Hooks完整还原类组件实例的效果，但其实函数组件的思想与类组件思想是不同的。</li>
<li>想通过Hooks还原类实例生命周期的概念。</li>
<li>小白起步边学边开发，忽略过多细节导致回头补救太多，代码质量差。</li>
<li>单个Hooks组件设计过于单一束缚，兼容性差。</li>
<li>单个Hooks组件过于复杂化，导致复用性差。</li>
<li>没有很好的发挥自定义Hooks带来的逻辑抽离的便利性。</li>
<li>没有深入理解纯函数开发概念。</li>
<li>并没有很深入的去理解ReactAPP的设计哲学，未磨刀先砍柴。</li>
</ul>
<p>这次深入Hooks细节，从头学习一次ReactHooks。</p>
<p>要学的东西没有很多，花费我们大量学习时间的是在用一件事上反反复复的学习回归。</p>
<p>在此之前，仔细阅读并消化：<a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/thinking-in-react.html">React哲学</a></p>
<span id="more"></span>


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Hooks组件不是类组件的语法糖，其React内部实现逻辑是不同的。</strong></p>
<p>关于函数组件的<strong>生命周期</strong>， 没有类组件那么复杂，只是简单的挂载，卸载。</p>
<p>每次组件刷新都是一次 <strong>卸载 -&gt; 挂载</strong> 的过程</p>
<p>挂载 -&gt; 卸载 -&gt; 挂载 -&gt; 卸载</p>
<p>在函数组件内，<strong>实例</strong>与<strong>vdom</strong>其实是两个不同的概念</p>
<p>可以认为的是，每个组件实例始终一致（只要组件不被<strong>销毁</strong>），每次刷新会产生不同的<code>vdom</code>，但是实例始终保持不变。</p>
<p><strong>销毁</strong></p>
<p>组件彻底在你的ReactAPP消失，这称为实例的销毁，组件的<code>state</code>所占用的内存空间会被回收。</p>
<p>那么组件在什么时候会被销毁呢？组件被条件渲染给pass掉了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> show ? <span class="language-xml"><span class="tag">&lt;<span class="name">Children</span>/&gt;</span></span> : <span class="literal">null</span></span><br></pre></td></tr></table></figure>



<p><strong>卸载</strong></p>
<p>组件并没有消失，只是组件的<code>state</code> 发生改变，组件被重新渲染了，重新渲染的过程就是一次 <strong>卸载 -&gt; 挂载</strong> 的过程。</p>
<p>那么组件在怎么时候卸载呢？组件状态更新重新挂载之前，或者组件实例销毁之前。</p>
<p><strong>实例这个概念是React通过Hooks赋予函数组件的，在这之前函数组件只是无状态视图组件，而我们把React保存函数state，ref的内存空间称为函数组件实例</strong></p>
<p><strong>组件到底是依赖props才更新还是自身的state?</strong></p>
<ul>
<li>只依赖自身的state，你可以认为组件的props其实是父组件的state。</li>
</ul>
<p>其实很容易误区的是，并不是一且props改变都会引发重新渲染。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChildrenComponent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  count ++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ChildrenComponent</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;/</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p>可以观察到，<code>ChildrenComponent</code> 的props一值在改变，控制台不断打印最新的<code>count</code> 值， 但是组件却不会刷新。</p>
<ul>
<li>其实React并不会帮助我们去监听<code>props</code>的变化，只有<code>setState</code>的调用，才会导致React去帮助我们刷新。</li>
<li>子组件props改变的刷新是由于父组件刷新引起，这其实是两个概念，很容易形成误区。</li>
<li>React不存在<strong>监听</strong>的概念，这是Vuejs的概念。</li>
</ul>
<p>（点击标签链接即可跳转详情页）</p>
<h2 id="主要的Hooks"><a href="#主要的Hooks" class="headerlink" title="主要的Hooks"></a>主要的Hooks</h2><ol>
<li><a href="https://jelly0127.github.io/2023/01/29/useEffect/">useEffect</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/useState/">useState</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/useContext/">useContext</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/useCallback/">useCallback</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/useMemo/">useMemo</a></li>
<li><a href="https://jelly0127.github.io/2023/01/29/useRef/">useRef</a></li>
<li><a href="https://jelly0127.github.io/2023/01/30/%E8%87%AA%E5%AE%9A%E4%B9%89Hook/">自定义Hook</a></li>
</ol>
<h2 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h2><p><a href="https://jelly0127.github.io/2023/01/29/router/">react-router(v6)</a></p>
<h2 id="React状态机"><a href="#React状态机" class="headerlink" title="React状态机"></a>React状态机</h2><p><a href="https://jelly0127.github.io/2023/01/29/reactRedux/">React-rudex</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp</title>
    <url>/2023/01/29/uniapp/</url>
    <content><![CDATA[<p>uniapp的开发目的是一套代码多端使用，但是个人兼容性差，实用性不是很强，生态对其它框架来说较弱。但毕竟是国内开发的产品还是希望它可以发展更好更完善。</p>
<p>特点：</p>
<p>与vue框架的使用基本一致，但又有微信小程序的一些影子。个人觉得是两个东西的结合加工品。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>微信云开发</title>
    <url>/2023/01/29/%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一，认识小程序云开发"><a href="#一，认识小程序云开发" class="headerlink" title="一，认识小程序云开发"></a>一，认识小程序云开发</h1><h2 id="1-1，云开发简介"><a href="#1-1，云开发简介" class="headerlink" title="1-1，云开发简介"></a>1-1，云开发简介</h2><ul>
<li>小程序·云开发是微信团队联合腾讯云推出的专业的小程序开发服务。 </li>
<li>开发者可以使用云开发快速开发小程序、小游戏、公众号网页等，并且原生打通微信开放能力。 </li>
<li>开发者无需搭建服务器，可免鉴权直接使用平台提供的API进行业务开发<br>  小程序 </li>
<li>云开发又简称tcb，是微信官方给我们提供的基于腾讯云的云服务器。目前云开发包含：云数据库，云函数，云存储，云调用。后面章节会具体给大家讲解这几个。</li>
</ul>
<span id="more"></span>
<p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html</a><br><img src="https://img-blog.csdnimg.cn/20210119094307797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="1-2，云开发和传统服务器对比"><a href="#1-2，云开发和传统服务器对比" class="headerlink" title="1-2，云开发和传统服务器对比"></a>1-2，云开发和传统服务器对比</h2><p>云开发相对于传统服务器的优势如下表<br><img src="https://img-blog.csdnimg.cn/20210118140545909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>通过上面的对比，我们可以看出，如果你想快速创建一个小程序的后台，用云开发是不错的选择。</p>
<h2 id="1-3，Serverless开发模式"><a href="#1-3，Serverless开发模式" class="headerlink" title="1-3，Serverless开发模式"></a>1-3，Serverless开发模式</h2><p>要想深入了解小程序云开发，就需要知道什么是Serverless开发模式，因为我们的小程序云开发就是采用的这个模式<br>官方视频有讲到：<a href="https://developers.weixin.qq.com/community/business/doc/000e8697e481208a2e3b31d6a5680d">https://developers.weixin.qq.com/community/business/doc/000e8697e481208a2e3b31d6a5680d</a><br>所以我们接下来要深入了解下Serverless开发模式</p>
<h3 id="1-3-1，前端开发模式的演进"><a href="#1-3-1，前端开发模式的演进" class="headerlink" title="1-3-1，前端开发模式的演进"></a>1-3-1，前端开发模式的演进</h3><p><img src="https://img-blog.csdnimg.cn/246cc0ea2b13496c8227142068aab3fc.png" alt="img"></p>
<p>上图说完了这几个阶段，可以看到，每一次前端开发模式的变化，都因某个变革性的技术而起。先是 AJAX，而后是 Node.js。那么下一个变革性的技术是什么？不言而喻，个人觉得下一代前端开发模式就是 Serverless</p>
<p>其实 Serverless 早已和前端产生了联系，只是我们可能没有感知。<br>1、CDN: 相信大家都使用过 CDN，我们开发完成之后，直接将静态文件部署到 CDN 上，通过 CDN 进行内容分发、网络加速，在这个过程中，前端不需要关心 CDN 有多少个节点、如何做负载均衡，也不需要知道 CDN 的 QPS 是多少。所以从这个角度来说，CDN 是一种 serverless 的实现。<br>2、再比如对象存储，和 CDN 一样，我们只需要将文件上传到对象存储，就可以直接使用了，不需要关心它如何存取文件、如何进行权限控制，所以对象存储对前端来说是 Serverless。<br>3、甚至一些第三方的 API 服务，也是 Serverless，因为我们使用的时候，不需要去关心服务器。</p>
<h3 id="1-3-2，什么是Serverless"><a href="#1-3-2，什么是Serverless" class="headerlink" title="1-3-2，什么是Serverless"></a>1-3-2，什么是Serverless</h3><p><img src="https://img-blog.csdnimg.cn/1ce8bb2923014ce9bd91cda1337c0244.png" alt="img"><br>从技术角度来说，Serverless 就是 FaaS 和 BaaS 的结合。<br>简单来讲，FaaS（Function as a Service） 就是一些运行函数的平台，比如云开发里的云函数，阿里云的函数计算、AWS 的 Lambda 等。</p>
<p>BaaS（Backend as a Service）则是一些后端云服务，比如云开发数据库、对象存储、消息队列等。利用 BaaS，可以极大简化我们的应用开发难度。</p>
<p>Serverless 则可以理解为运行在 FaaS 中，使用了 BaaS 的函数。</p>
<h3 id="1-3-3，Serverless-的主要特点"><a href="#1-3-3，Serverless-的主要特点" class="headerlink" title="1-3-3，Serverless 的主要特点"></a>1-3-3，Serverless 的主要特点</h3><p>1、事件驱动—-函数在 FaaS 平台中，需要通过一系列的事件来驱动函数执行。<br>2、无状态—-因为每次函数执行，可能使用的都是不同的容器<br>3、无运维—-使用serverless我们不需要关心服务器，也不需要关心运维，这也是serverles思想的核心；<br>4、低成本—-使用 Serverless 成本很低，因为我们只需要为每次函数的运行付费。函数不运行，则不花钱，也不会浪费服务器资源过度</p>
<h3 id="1-3-4，serverless-开发流程"><a href="#1-3-4，serverless-开发流程" class="headerlink" title="1-3-4，serverless 开发流程"></a>1-3-4，serverless 开发流程</h3><p><img src="https://img-blog.csdnimg.cn/52f3ba4c862b4c42bc82e63799f8f143.png" alt="img"><br>通过上图就可以看出<br>1，传统开发流程。<br>在传统开发流程中，我们需要前端写页面，后端工程师写接口。后端写完接口之后，把接口部署了，再进行前后端联调。联调完毕后再测试、上线。上线之后，还需要运维工程师对系统进行维护。整个过程涉及多个不同角色，链路较长，沟通协调也是一个问题。</p>
<p>2、而基于 Serverless，后端变得非常简单了，以往的后端应用被拆分为一个个函数，只需要写完函数并部署到 Serverless 服务即可，后续也不用关心任何服务器的运维操作。后端开发的门槛大幅度降低了。因此，只需要一个前端就可以完成所有的开发工作。<br>当然，前端基于 Serverless 去写后端，最好也需要具备一定的后端知识。涉及复杂的后端系统或者 Serverless 不适用的场景，还是需要后端开发</p>
<h3 id="1-3-5，serverless带来的价值"><a href="#1-3-5，serverless带来的价值" class="headerlink" title="1-3-5，serverless带来的价值"></a>1-3-5，serverless带来的价值</h3><p>1．降低运营复杂度</p>
<p>Serverless架构使软件应用和服务器实现了解耦，服务器不再是用户开发和运营应用的焦点。在应用上线前，用户无须再提前规划服务器的数量和规格。在运维过程中，用户无须再持续监控和维护具体服务器的状态，只需要关心应用的整体状态。应用运营的整体复杂度下降，用户的关注点可以更多地放在软件应用的体验和改进以及其他能带来更高业务价值的地方。<br>2．降低运营成本<br>服务器不再是用户关注的一个受管资源，运营的复杂度下降，应用运营所需要投入的时间和人力将大大降低。在最好的情况下，可以做到少数几个应用管理员即可管理一个处理海量请求的应用系统。</p>
<p>3、缩短产品的上市时间<br>在Serverless架构下，应用的功能被解构成若干个细颗粒度的无状态函数，功能与功能之间的边界变得更加清晰，功能模块之间的耦合度大大减小。这使得软件应用的开发效率更高，应用开发的迭代周期更短。</p>
<h3 id="1-3-6，基于-Serverless-的小程序开发"><a href="#1-3-6，基于-Serverless-的小程序开发" class="headerlink" title="1-3-6，基于 Serverless 的小程序开发"></a>1-3-6，基于 Serverless 的小程序开发</h3><p>1、目前国内使用 Serverless 较多的场景可能就是小程开发了。具体的实现就是小程序云开发，支付宝小程序和微信小程序都提供了云开发功能。<br>2、在传统的小程序开发中，我们需要前端进行小程序端的开发；后端进行服务端的开发。小程序的后端开发和其他的后端应用开发，本质是是一样的，需要关心应用的负载均衡、备份冗灾、监控报警等一些列部署运维操作。如果开发团队人很少，可能还需要前端去实现服务端。<br>但基于云开发，就只需要让开发者关注于业务的实现，由一个前端就能够完成整个应用的前后端开发。因为云开发将后端封装为了 BaaS 服务，并提供了对应的 SDK 给开发者，开发者可以像调用函数一样使用各种后端服务。应用的运维也转移到了提供云开发的服务商。<br>下面分别是使用支付宝云开发的一些例子，函数就是定义在 FaaS 服务中的函数。</p>
<p>负载均衡（Load Balance）其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务<br>备份冗灾：就是为了防止出现自然或者社会灭害带来的对存储设备的损害而造成对数据丢失,而采取的备份.</p>
<h3 id="1-3-7，通用-Serverless-架构"><a href="#1-3-7，通用-Serverless-架构" class="headerlink" title="1-3-7，通用 Serverless 架构"></a>1-3-7，通用 Serverless 架构</h3><p><img src="https://img-blog.csdnimg.cn/2073a7990d3b4f45b61418859111c46b.png" alt="img"><br>其中最底层就是实现复杂业务的后端微服务（Backend）。然后 FaaS 层通过一系列函数实现业务逻辑，并为前端直接提供服务。对于前端开发者来说，前端可以通过编写函数的方式来实现服务端的逻辑。</p>
<p>同时不管是在后端、FaaS 还是前端，我们都可以去调用云计算平台提供的 BaaS 服务，大大降低开发难度、减少开发成本。小程序云开发，就是直接在前端调用 BaaS 服务的例子。</p>
<p>一句话总结serverless - less is more<br>使用 Serverless，我们不需要再过多关注服务端的运维，不需要关心我们不熟悉的领域，我们只需要专注于业务的开发、专注于产品的实现。我们需要关心的事情变少了，但我们能做的事情更多了。</p>
<h1 id="二，云开发环境的创建与初始化"><a href="#二，云开发环境的创建与初始化" class="headerlink" title="二，云开发环境的创建与初始化"></a>二，云开发环境的创建与初始化</h1><p>注意事项</p>
<ul>
<li>1,必须注册小程序后才可以开通云开发</li>
<li>2,一个小程序可以创建两个云开发环境</li>
</ul>
<h2 id="2-1-创建一个初始项目"><a href="#2-1-创建一个初始项目" class="headerlink" title="2-1,创建一个初始项目"></a>2-1,创建一个初始项目</h2><p>我们要开通云开发服务，必须先要进入小程序开发者工具才可以。最新版的开发者工具在创建项目时又多了一个模板选择，如果你用的是最新版的开发者工具，模板选择里就选择不使用模板即可。</p>
<h3 id="最新版的开发工具不使用模板"><a href="#最新版的开发工具不使用模板" class="headerlink" title="最新版的开发工具不使用模板"></a>最新版的开发工具不使用模板</h3><p>如果你用的是最新版的开发者工具，创建项目时会多一个模板选择，这里一定要记得选择不使用模板。</p>
<p>关于appid</p>
<p>如果你不使用自己的appid创建项目，就会出现下面的问题，所以一定要先去注册一个小程序，然后用自己的appid。</p>
<p>由于云开发官方更新的太快，有些同学可能会遇到下面这样的问题<br>没有 不使用云服务 选型。</p>
<h2 id="2-2，没有“不使用云服务”选型解决方案-选看"><a href="#2-2，没有“不使用云服务”选型解决方案-选看" class="headerlink" title="2-2，没有“不使用云服务”选型解决方案(选看)"></a>2-2，没有“不使用云服务”选型解决方案(选看)</h2><p>如果你出现上面的问题，再看这节，如果没出现这样的问题，直接跳过就行。</p>
<p>把这个模板下载到桌面，并解压。</p>
<p>链接: <a href="https://pan.baidu.com/s/1UJLAwlvM46_MvpC96FwKPg">https://pan.baidu.com/s/1UJLAwlvM46_MvpC96FwKPg</a> 提取码: 1234 </p>
<p>–来自百度网盘超级会员v2的分享<br>然后点击导入，把项目导入即可。<br>appid换成自己的。</p>
<h2 id="2-3-开通云开发"><a href="#2-3-开通云开发" class="headerlink" title="2-3,开通云开发"></a>2-3,开通云开发</h2><ul>
<li><p>1,点击下图箭头所示,如果你第一步创建项目时,没有使用自己的appid,这里不会有下图箭头所示的云朵.<br><img src="https://pic.imgdb.cn/item/63d68bd6face21e9ef509844.png"></p>
</li>
<li><p>2,给云开发环境取名</p>
<p>等待创建<br><img src="https://img-blog.csdnimg.cn/img_convert/4e0a7c2e116e9bf6d5154140351e7a48.png" alt="img"><br>创建成功<br><img src="https://pic.imgdb.cn/item/63d68be7face21e9ef50c1bc.png"></p>
</li>
</ul>
<h2 id="2-4-初始化云开发环境-重要"><a href="#2-4-初始化云开发环境-重要" class="headerlink" title="2-4,初始化云开发环境(***重要)"></a>2-4,初始化云开发环境(***重要)</h2><p>在app.js里写入环境id,注意这里要用你自己的云开发环境id</p>
<ul>
<li>初始化云开发环境前，先去云开发控制台，拿到云开发环境id</li>
</ul>
<p>  这里的环境id建议直接复制，不要手写，很容易写错。 </p>
<ul>
<li>拿到环境id以后，就去app.js里做云开发环境初始化，</li>
</ul>
<p>用时候云开发创建好以后,初始化可能需要一点时间,所以如果这里初始化有报错,记得关闭开发者工具,等几分钟再重新打开即可.</p>
<h1 id="三，云开发-云数据库"><a href="#三，云开发-云数据库" class="headerlink" title="三，云开发~云数据库"></a>三，云开发~云数据库</h1><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/init.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/init.html</a></p>
<h2 id="3-1，在数据库里新建集合-数据表"><a href="#3-1，在数据库里新建集合-数据表" class="headerlink" title="3-1，在数据库里新建集合(数据表)"></a>3-1，在数据库里新建集合(数据表)</h2><p>我们这里以新建一个商品列表为例<br><img src="https://img-blog.csdnimg.cn/20210119143131206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="3-2，数据库权限管理"><a href="#3-2，数据库权限管理" class="headerlink" title="3-2，数据库权限管理"></a>3-2，数据库权限管理</h2><p>要想让用户查询到我们创建的商品数据，需要把权限改为所有用户可读<br><img src="https://img-blog.csdnimg.cn/20210119144339469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="3-3，数据库的增删改查"><a href="#3-3，数据库的增删改查" class="headerlink" title="3-3，数据库的增删改查"></a>3-3，数据库的增删改查</h2><h3 id="3-3-1，查询-get"><a href="#3-3-1，查询-get" class="headerlink" title="3-3-1，查询 get()"></a>3-3-1，查询 get()</h3><ul>
<li>传统写法<br><img src="https://img-blog.csdnimg.cn/2021011914394249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>ES6简洁写法<br><img src="https://img-blog.csdnimg.cn/20210119145203891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>推荐第二种写法<br><img src="https://img-blog.csdnimg.cn/20210119150828859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h3 id="3-3-2，条件查询-where"><a href="#3-3-2，条件查询-where" class="headerlink" title="3-3-2，条件查询 where()"></a>3-3-2，条件查询 where()</h3><p><img src="https://img-blog.csdnimg.cn/2021011915165530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3-3-3，查询单条数据doc"><a href="#3-3-3，查询单条数据doc" class="headerlink" title="3-3-3，查询单条数据doc()"></a>3-3-3，查询单条数据doc()</h3><p>doc是用来查询单条数据的。比如商品详情页。<br>doc里面用到的参数就是我们数据里的_id字段<br><img src="https://img-blog.csdnimg.cn/20210120105842707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3-3-4，添加数据-add"><a href="#3-3-4，添加数据-add" class="headerlink" title="3-3-4，添加数据 add()"></a>3-3-4，添加数据 add()</h3><p>通过add可以实现数据的添加，<br><img src="https://img-blog.csdnimg.cn/2021012011072216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3-3-5，更新数据update"><a href="#3-3-5，更新数据update" class="headerlink" title="3-3-5，更新数据update()"></a>3-3-5，更新数据update()</h3><p>修改数据库里已存在的数据，结合doc进行修改单条数据<br><img src="https://img-blog.csdnimg.cn/20210120111452950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3-3-6，删除数据remove"><a href="#3-3-6，删除数据remove" class="headerlink" title="3-3-6，删除数据remove()"></a>3-3-6，删除数据remove()</h3><p>删除数据，结合doc删除单条数据<br><img src="https://img-blog.csdnimg.cn/20210120111942981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="4-4，增删改查综合案例"><a href="#4-4，增删改查综合案例" class="headerlink" title="4-4，增删改查综合案例"></a>4-4，增删改查综合案例</h2><ul>
<li>1，能查看商品列表</li>
<li>2，更动态添加商品</li>
<li>3，能进入商品详情页</li>
<li>4，能删除某个商品</li>
<li>5，能修改某个商品的价格</li>
</ul>
<h3 id="4-4-1-列表跳详情-data"><a href="#4-4-1-列表跳详情-data" class="headerlink" title="4-4-1 列表跳详情 data-"></a>4-4-1 列表跳详情 data-</h3><ul>
<li>1，在wxml里定义data- 要绑定的数据<br><img src="https://img-blog.csdnimg.cn/20210120115030960.png" alt="img"></li>
<li>2， 在js页面里的点击方法里拿到绑定的数据<br><img src="https://img-blog.csdnimg.cn/20210120115046577.png" alt="img"></li>
<li>比如打印结果如下<br><img src="https://img-blog.csdnimg.cn/20210120115105901.png" alt="img"></li>
</ul>
<h3 id="4-4-2，列表跳详情并携带商品id"><a href="#4-4-2，列表跳详情并携带商品id" class="headerlink" title="4-4-2，列表跳详情并携带商品id"></a>4-4-2，列表跳详情并携带商品id</h3><ul>
<li>1，列表跳页到详情页<br><img src="https://img-blog.csdnimg.cn/20210120115627866.png" alt="img"></li>
<li>2，拿到列表跳页时携带的id数据<br><img src="https://img-blog.csdnimg.cn/20210120115911259.png" alt="img"></li>
</ul>
<h3 id="4-4-3，查询商品列表"><a href="#4-4-3，查询商品列表" class="headerlink" title="4-4-3，查询商品列表"></a>4-4-3，查询商品列表</h3><p><img src="https://img-blog.csdnimg.cn/20210121105411410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-4-4，添加商品并刷新商品列表"><a href="#4-4-4，添加商品并刷新商品列表" class="headerlink" title="4-4-4，添加商品并刷新商品列表"></a>4-4-4，添加商品并刷新商品列表</h3><p><img src="https://img-blog.csdnimg.cn/20210121105450835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-4-5，更新商品数据"><a href="#4-4-5，更新商品数据" class="headerlink" title="4-4-5，更新商品数据"></a>4-4-5，更新商品数据</h3><p>用户输入新价格，调用update方法进行更新数据<br><img src="https://img-blog.csdnimg.cn/20210121111158518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们更新成功的时候，会有如下所示的日志打印。<br><img src="https://img-blog.csdnimg.cn/20210122103005208.png" alt="img"><br>只有stats里的updated是1的时候，才代表成功的更新了一条数据。<br>如果这条商品不是你创建的，当你对这条商品做更新操作时，打印的updated就是0。<br><img src="https://img-blog.csdnimg.cn/20210122103355106.png" alt="img"><br>这个时候代表没有更新成功。这是因为操作时的权限问题，要解决这个问题，就要借助云函数了，这里我们先放在这里，在后面云函数章节会做具体讲解。</p>
<h3 id="4-4-6，弹窗提示确认是否删除"><a href="#4-4-6，弹窗提示确认是否删除" class="headerlink" title="4-4-6，弹窗提示确认是否删除"></a>4-4-6，弹窗提示确认是否删除</h3><p>用户删除数据是一个危险操作，所以操作之前最好给用户一个友好提示。<br>官方弹窗文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html">https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210122165835203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-4-7，删除商品"><a href="#4-4-7，删除商品" class="headerlink" title="4-4-7，删除商品"></a>4-4-7，删除商品</h3><p><img src="https://img-blog.csdnimg.cn/202101221714103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-4-8，更新和删除时的权限问题"><a href="#4-4-8，更新和删除时的权限问题" class="headerlink" title="4-4-8，更新和删除时的权限问题"></a>4-4-8，更新和删除时的权限问题</h3><p>如果这条商品不是你创建的，当你对这条商品做删除或者更新操作时，虽然也会返回成功，但是可以看到我们更新或者删除的条数是0。<br><img src="https://img-blog.csdnimg.cn/20210122103703603.png" alt="img"><br><img src="https://img-blog.csdnimg.cn/202101221715036.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>其实这个时候也意味着没有更新或者删除成功，这里是因为操作权限的问题，因为这条数据不是你创建的。所以你只能对这条数据做查询操作，而不能做修改和删除操作。要想解决这个问题，就要借助云函数了。后面云函数讲解的部分，我会做具体讲解的。</p>
<p><strong>我们还是先接着学习数据库操作的高级操作</strong></p>
<h2 id="4-5，常用快捷键"><a href="#4-5，常用快捷键" class="headerlink" title="4-5，常用快捷键"></a>4-5，常用快捷键</h2><p>我们在开发时为了提高代码编写效率，通常会使用一些快捷键。我们小程序开发工具里常用的快捷键。<br>设置—》快捷键设置</p>
<p>然后点击如下快捷键即可查看所有的快捷键</p>
<p>如果感觉默认的快捷键不喜欢，可以自己重新设置快捷键。由于自带的快捷比较多，我这里不一一列举了，我把一些常用的快捷键拿出来给大家大致讲一讲，我这里以window电脑为例，如果你mac电脑，可以自己去看下开发者工具默认的快捷键。多看几遍把常用的记住就行了。</p>
<table>
<thead>
<tr>
<th>快捷键组合</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+a</td>
<td>全选</td>
</tr>
<tr>
<td>Ctrl+c</td>
<td>复制选中内容</td>
</tr>
<tr>
<td>Ctrl+v</td>
<td>粘贴复制的内容</td>
</tr>
<tr>
<td>Ctrl+z</td>
<td>撤销当前编辑</td>
</tr>
<tr>
<td>Ctrl+s</td>
<td>保存并编译项目</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>重新编译项目</td>
</tr>
<tr>
<td>Ctrl+x</td>
<td>截切选中的内容</td>
</tr>
<tr>
<td>Ctrl+&#x2F;</td>
<td>添加注释</td>
</tr>
<tr>
<td>Ctrl+Shift+k</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl+Shift+f</td>
<td>全局搜索</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>当前页面内搜索</td>
</tr>
<tr>
<td>Ctrl+Shift+h</td>
<td>全局搜索并替换文本</td>
</tr>
<tr>
<td>Ctrl+h</td>
<td>当前页面内搜索并替换文本</td>
</tr>
<tr>
<td>Shift+Alt+F</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Shift+Alt+⬆</td>
<td>向上复制当前行</td>
</tr>
<tr>
<td>Shift+Alt+⬇</td>
<td>向下复制当前行</td>
</tr>
<tr>
<td>Alt+⬆</td>
<td>把当前行向上移动一行</td>
</tr>
<tr>
<td>Alt+⬇</td>
<td>把当前行向下移动一行</td>
</tr>
</tbody></table>
<p>有的电脑上快捷键可能会有细微差距，以开发者工具默认自带的快捷键为准。</p>
<h2 id="4-6，数据库排序orderBy"><a href="#4-6，数据库排序orderBy" class="headerlink" title="4-6，数据库排序orderBy"></a>4-6，数据库排序orderBy</h2><p>orderBy方法在做排序的时候，接受两个参数</p>
<ul>
<li>1，根据那个字段排序</li>
<li>2，排序规则（升序或者降序）。升序用asc，降序用desc</li>
</ul>
<p>如我们根据商品价格从低到高升序排列<br><img src="https://img-blog.csdnimg.cn/20210125110343465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>如我们根据商品价格从高到低降序排列<br><img src="https://img-blog.csdnimg.cn/20210125110402219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="4-7，返回指定条数的数据limit"><a href="#4-7，返回指定条数的数据limit" class="headerlink" title="4-7，返回指定条数的数据limit"></a>4-7，返回指定条数的数据limit</h2><p>limit用来指定查询结果集数量上限，比如我们有100条数据，只想返回前20条，我们可以通过limit(20)来指定只返回20条数据。</p>
<p>例如，只返回3条数据的写法如下<br><img src="https://img-blog.csdnimg.cn/20210125111539268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<ul>
<li>注意：limit 在小程序端默认及最大上限为 20，在云函数端默认及最大上限为 1000</li>
</ul>
<h2 id="4-8，分页方法skip"><a href="#4-8，分页方法skip" class="headerlink" title="4-8，分页方法skip"></a>4-8，分页方法skip</h2><p>skip指定查询返回结果时从指定序列后的结果开始返回，常用于分页。比如我们有100条数据，想从第10条开始返回数据，可以通过skip(10)来实现</p>
<ul>
<li>skip结合我们上面学的limit方法可以实现分页效果<br><img src="https://img-blog.csdnimg.cn/20210125112437110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<p>比如我们有100条数据，每次返回20条数据。那么就可以分5页返回。</p>
<ul>
<li>第1页 limit(20).skip(0)</li>
<li>第2页 limit(20).skip(20)</li>
<li>第3页 limit(20).skip(40)</li>
<li>第4页 limit(20).skip(60)</li>
<li>第5页 limit(20).skip(80)</li>
</ul>
<h2 id="4-9，Command数据库操作符"><a href="#4-9，Command数据库操作符" class="headerlink" title="4-9，Command数据库操作符"></a>4-9，Command数据库操作符</h2><p>我门上面学完了数据库的增删改查，但是这些都是最基础最简单的操作，如果我们想实现复杂的数据查询操作，该怎么办呢<br>比如</p>
<ul>
<li>查询价格大于100的商品？</li>
<li>查询年龄小于18岁的学生？</li>
<li>如何同时修改多条数据？</li>
<li>如何同时删除多条数据？</li>
</ul>
<p>我们如果想实现上面这些复杂的操作，就需要用到数据库里的 Command数据库操作符，就是下面这位<br><img src="https://img-blog.csdnimg.cn/2021012009455233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Command.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Command.html</a></p>
<h3 id="4-9-1，gt查询大于指定值的数据"><a href="#4-9-1，gt查询大于指定值的数据" class="headerlink" title="4-9-1，gt查询大于指定值的数据"></a>4-9-1，gt查询大于指定值的数据</h3><p>比如查询价格大于5的所有商品<br><img src="https://img-blog.csdnimg.cn/20210127165116544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-9-2，gte查询大于等于指定值的数据"><a href="#4-9-2，gte查询大于等于指定值的数据" class="headerlink" title="4-9-2，gte查询大于等于指定值的数据"></a>4-9-2，gte查询大于等于指定值的数据</h3><p>比如查询大于等于5元的商品<br><img src="https://img-blog.csdnimg.cn/20210127165315512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-9-3，lt查询小于指定数值的数据"><a href="#4-9-3，lt查询小于指定数值的数据" class="headerlink" title="4-9-3，lt查询小于指定数值的数据"></a>4-9-3，lt查询小于指定数值的数据</h3><p>比如查询价格小于5的所有商品<br><img src="https://img-blog.csdnimg.cn/20210127165629116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-9-4，lte查询小于等于指定数值的数据"><a href="#4-9-4，lte查询小于等于指定数值的数据" class="headerlink" title="4-9-4，lte查询小于等于指定数值的数据"></a>4-9-4，lte查询小于等于指定数值的数据</h3><p>比如查询价格小于等于5元的所有商品<br><img src="https://img-blog.csdnimg.cn/20210127165656903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-9-5，and同时满足多个条件的查询"><a href="#4-9-5，and同时满足多个条件的查询" class="headerlink" title="4-9-5，and同时满足多个条件的查询"></a>4-9-5，and同时满足多个条件的查询</h3><p>比如查询价格大于5小于10元的所有商品<br><img src="https://img-blog.csdnimg.cn/20210127171011932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h1 id="四，云开发-云函数"><a href="#四，云开发-云函数" class="headerlink" title="四，云开发~云函数"></a>四，云开发~云函数</h1><h2 id="4-1，认识云函数"><a href="#4-1，认识云函数" class="headerlink" title="4-1，认识云函数"></a>4-1，认识云函数</h2><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions.html</a></p>
<p>我们先来看下官方给出的云函数简介<br><img src="https://img-blog.csdnimg.cn/20210128101348674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>其实通俗来讲，云函数也是运行在服务器上的，只不过和我们传统开发语言相比。微信官方为我们提供的傻瓜式的一键部署。也就是说你只需要把心思花在业务逻辑代码的编写上即可。无需关心写好如何部署，无需关心安全问题，无需关心鉴权问题。</p>
<h3 id="4-1-1，云函数获取openid"><a href="#4-1-1，云函数获取openid" class="headerlink" title="4-1-1，云函数获取openid"></a>4-1-1，云函数获取openid</h3><p>用云函数的话，只需要3步</p>
<ul>
<li>1，编写云函数</li>
<li>2，一键部署云函数</li>
<li>3，调用云函数</li>
</ul>
<p>来看下云函数代码，只需要10行代码，即可轻松搞定<br><img src="https://img-blog.csdnimg.cn/20210128103312772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="4-2，云函数的优势"><a href="#4-2，云函数的优势" class="headerlink" title="4-2，云函数的优势"></a>4-2，云函数的优势</h2><p>我们用云函数和上一章的云数据库进行下对比</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>云函数</th>
<th>云数据库</th>
</tr>
</thead>
<tbody><tr>
<td>返回数据上限</td>
<td>100条</td>
<td>20条</td>
</tr>
<tr>
<td>更新数据</td>
<td>都可以更新</td>
<td>只有自己创建的才可以更新</td>
</tr>
<tr>
<td>删除数据</td>
<td>都可以删除</td>
<td>只有自己创建的才可以删除</td>
</tr>
<tr>
<td>运行环境</td>
<td>运行在云端Node.js环境</td>
<td>运行在小程序本地</td>
</tr>
<tr>
<td>实现功能丰富度</td>
<td>非常丰富</td>
<td>只能实现数据库增删改查</td>
</tr>
</tbody></table>
<ul>
<li>来看下官方文档是如何描述云函数的<br>云函数属于管理端，在云函数中运行的代码拥有不受限的数据库读写权限和云文件读写权限。需特别注意，云函数运行环境即是管理端，与云函数中的传入的 openId 对应的微信用户是否是小程序的管理员 &#x2F; 开发者无关。</li>
</ul>
<h2 id="4-3，云函数调用演示"><a href="#4-3，云函数调用演示" class="headerlink" title="4-3，云函数调用演示"></a>4-3，云函数调用演示</h2><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/functions/Cloud.callFunction.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/functions/Cloud.callFunction.html</a></p>
<h3 id="4-3-0-初始化云函数的环境"><a href="#4-3-0-初始化云函数的环境" class="headerlink" title="4-3-0,初始化云函数的环境"></a>4-3-0,初始化云函数的环境</h3><ul>
<li>1，创建一个文件夹cloud和pages平行<br><img src="https://img-blog.csdnimg.cn/20210128112140139.png" alt="img"></li>
<li>2，在project.config.json里面配置云函数所在目录为cloud<br>在project.config.json里面添加如下配置<img src="https://img-blog.csdnimg.cn/20210128112324919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后点击保存，我们的cloud文件夹前面就有一个云朵<br><img src="https://img-blog.csdnimg.cn/20210128112426173.png" alt="img"><br>就代表我们云函数初始化成功啦。</li>
<li>新一个云函数<br><img src="https://img-blog.csdnimg.cn/20210128113128483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>如果只创建一个云函数的时候，会出现下面的问题。<br><img src="https://img-blog.csdnimg.cn/20210128113247938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>解决方案：只需要在cloud文件夹下新建一个空白文件即可。</li>
</ul>
<h3 id="4-3-1，云函数获取openid"><a href="#4-3-1，云函数获取openid" class="headerlink" title="4-3-1，云函数获取openid"></a>4-3-1，云函数获取openid</h3><p>调用云函数有两种写法</p>
<ul>
<li>1，传统的success和fail<br><img src="https://img-blog.csdnimg.cn/20210128114458871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>2，用promise写法then和catch<br><img src="https://img-blog.csdnimg.cn/20210128114704240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h3 id="4-3-2，数据的导入和导出"><a href="#4-3-2，数据的导入和导出" class="headerlink" title="4-3-2，数据的导入和导出"></a>4-3-2，数据的导入和导出</h3><ul>
<li><p>数据导出，做数据备份<br><img src="https://img-blog.csdnimg.cn/20210128121013973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>比如导入为json数据如下<br><img src="https://img-blog.csdnimg.cn/20210128121110249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
</li>
<li><p>数据导入，为了快速的大量的创建一些数据。</p>
<p>把这108条数据的json文件，导入到数据库如下<br><img src="https://img-blog.csdnimg.cn/202101281236396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
</li>
</ul>
<h3 id="4-3-3，云函数获取数据"><a href="#4-3-3，云函数获取数据" class="headerlink" title="4-3-3，云函数获取数据"></a>4-3-3，云函数获取数据</h3><p>注意：云函数只要有变动，就要重新部署，否则云函数不生效。</p>
<p>遇到了一个问题，如下<br><img src="https://img-blog.csdnimg.cn/20210128115406470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>出现原因：如果你有两个云开发环境，偶尔会出现上图所示的问题。<br>解决问题：有两种</p>
<ul>
<li>1，在云函数里指定你要使用那个云开发环境<br><img src="https://img-blog.csdnimg.cn/20210128115654705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>2，使用DYNAMIC_CURRENT_ENV常量 （提倡使用这个）<br><img src="https://img-blog.csdnimg.cn/20210128115926399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们这里会和小程序里直接调用数据库的查询进行下对比<br><img src="https://img-blog.csdnimg.cn/20210128120452944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210128124103359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-3-4，云函数修改数据"><a href="#4-3-4，云函数修改数据" class="headerlink" title="4-3-4，云函数修改数据"></a>4-3-4，云函数修改数据</h3><p>本地小程序直接调用数据库修改会有问题</p>
<ul>
<li>只能修改自己创建的数据，别人创建的数据，就没有办法修改了。<br>  <img src="https://img-blog.csdnimg.cn/20210129164121371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"> </li>
<li>如何解决呢？ 用云函数来修改就可以解决这个问题啦。 </li>
<li>1，先创建云函数update0129<br>  <img src="https://img-blog.csdnimg.cn/20210129164236714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"> </li>
<li>2,调用云函数就行修改<br>  <img src="https://img-blog.csdnimg.cn/20210129164221501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h3 id="4-3-5，云函数删除数据"><a href="#4-3-5，云函数删除数据" class="headerlink" title="4-3-5，云函数删除数据"></a>4-3-5，云函数删除数据</h3><ul>
<li>1,创建一个删除商品的云函数remove0129<br><img src="https://img-blog.csdnimg.cn/20210129165537372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>2,调用这个云函数进行删除操作<br><img src="https://img-blog.csdnimg.cn/20210129165609854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h3 id="4-3-6，提交数据到云函数"><a href="#4-3-6，提交数据到云函数" class="headerlink" title="4-3-6，提交数据到云函数"></a>4-3-6，提交数据到云函数</h3><ul>
<li>1，创建云函数，并部署<br><img src="https://img-blog.csdnimg.cn/20210129170423649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>2，调用云函数<br><img src="https://img-blog.csdnimg.cn/20210129170445839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h2 id="4-4-使用云函数常见问题"><a href="#4-4-使用云函数常见问题" class="headerlink" title="4-4,使用云函数常见问题"></a>4-4,使用云函数常见问题</h2><h3 id="4-4-1，云函数里面没有初始化环境变量"><a href="#4-4-1，云函数里面没有初始化环境变量" class="headerlink" title="4-4-1，云函数里面没有初始化环境变量"></a>4-4-1，云函数里面没有初始化环境变量</h3><p><img src="https://img-blog.csdnimg.cn/20210129165211243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>解决方案如下：<br>使用DYNAMIC_CURRENT_ENV<br><img src="https://img-blog.csdnimg.cn/20210129165244946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>代码片段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cloud.init(&#123;</span><br><span class="line">  env: cloud.DYNAMIC_CURRENT_ENV </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="五，云开发-云存储"><a href="#五，云开发-云存储" class="headerlink" title="五，云开发~云存储"></a>五，云开发~云存储</h1><p>首先来看下官方对云存储的介绍：<br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/storage.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/storage.html</a><br><img src="https://img-blog.csdnimg.cn/20210201161044364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>说白了，云存储就是可以用来存储视频，音频，图片，文件的一个云存储空间。如果你的小程序需要用到视频播放，音频播放，图片展示，文件上传与下载功能，就可以用到我们的云存储了。</p>
<ul>
<li>使用云存储来存储文件时，文件名的命名有一些规则，建议看一下。<br><img src="https://img-blog.csdnimg.cn/20210201162210831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h2 id="5-1，云开发控制台管理文件"><a href="#5-1，云开发控制台管理文件" class="headerlink" title="5-1，云开发控制台管理文件"></a>5-1，云开发控制台管理文件</h2><p>控制台也可以很方便的管理文件。<br><img src="https://img-blog.csdnimg.cn/20210202111303938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="5-2，上传图片到云存储"><a href="#5-2，上传图片到云存储" class="headerlink" title="5-2，上传图片到云存储"></a>5-2，上传图片到云存储</h2><p>我们上传图片之前需要先选择图片，所以这里用到一个图片选择的功能<br><img src="https://img-blog.csdnimg.cn/20210201162803725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>对应的官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html</a><br><img src="https://img-blog.csdnimg.cn/20210201162833775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后调用文件上传的api接口即可<br><img src="https://img-blog.csdnimg.cn/20210201163026521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html</a></p>
<h2 id="5-3，给商品列表加商品图片"><a href="#5-3，给商品列表加商品图片" class="headerlink" title="5-3，给商品列表加商品图片"></a>5-3，给商品列表加商品图片</h2><p>我们既然已经学完图片上传功能了，那么我们就可以改造下我们之前的商品列表了，给我们的商品列表添加商品图片。<br><img src="https://img-blog.csdnimg.cn/20210202172602566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="5-4，上传视频到云存储"><a href="#5-4，上传视频到云存储" class="headerlink" title="5-4，上传视频到云存储"></a>5-4，上传视频到云存储</h2><p>上传视频之前同样需要先选择视频，选择视频的代码如下<br><img src="https://img-blog.csdnimg.cn/20210201163512755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>对应的官方文档如下：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html</a><br><img src="https://img-blog.csdnimg.cn/20210201163541479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>选择好视频以后，同样是调用文件上传api，因为视频也是一个文件。<br><img src="https://img-blog.csdnimg.cn/2021020116363179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="5-5，上传word，excel文件到云存储"><a href="#5-5，上传word，excel文件到云存储" class="headerlink" title="5-5，上传word，excel文件到云存储"></a>5-5，上传word，excel文件到云存储</h2><h3 id="5-5-1，上传之前先选择文件"><a href="#5-5-1，上传之前先选择文件" class="headerlink" title="5-5-1，上传之前先选择文件"></a>5-5-1，上传之前先选择文件</h3><p>选择文件的时候记得把type设置为file<br><img src="https://img-blog.csdnimg.cn/20210201163838790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>对应的官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html</a></p>
<ul>
<li>这里有一点需要注意<br>在电脑模拟器上是选择电脑上的文件，在手机上运行小程序进行选择文件时是选择你聊天记录里的文件。</li>
</ul>
<h3 id="5-5-2，上传文件"><a href="#5-5-2，上传文件" class="headerlink" title="5-5-2，上传文件"></a>5-5-2，上传文件</h3><p>在上面选择好文件以后，我们还是要调用uploadFile进行文件上传<br><img src="https://img-blog.csdnimg.cn/20210201164637337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="5-6，下载文件"><a href="#5-6，下载文件" class="headerlink" title="5-6，下载文件"></a>5-6，下载文件</h2><p>使用wx.cloud.downloadFile下载文件<br><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/downloadFile.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/downloadFile.html</a><br><img src="https://img-blog.csdnimg.cn/20210205163358308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="5-7，下载并打开word，excel，pdf"><a href="#5-7，下载并打开word，excel，pdf" class="headerlink" title="5-7，下载并打开word，excel，pdf"></a>5-7，下载并打开word，excel，pdf</h2><p>使用wx.openDocument打开文件<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html">https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html</a><br><img src="https://img-blog.csdnimg.cn/20210205163603197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h1 id="六，列表的下拉刷新"><a href="#六，列表的下拉刷新" class="headerlink" title="六，列表的下拉刷新"></a>六，列表的下拉刷新</h1><h2 id="6-1，开启页面下拉刷新"><a href="#6-1，开启页面下拉刷新" class="headerlink" title="6-1，开启页面下拉刷新"></a>6-1，开启页面下拉刷新</h2><p>我们需要在app.json获取页面对应的json里设置enablePullDownRefresh属性为true来开启下拉刷新。</p>
<p><img src="https://img-blog.csdnimg.cn/20210205170856209.png" alt="img"><br><img src="https://img-blog.csdnimg.cn/20210205171621417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>由于我们的刷新动画默认是白色圆点，所以还要在json里设置页面背景色才可以看到动画。<br><img src="https://img-blog.csdnimg.cn/20210205174537120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="6-2，在Page的onPullDownRefresh里监听刷新"><a href="#6-2，在Page的onPullDownRefresh里监听刷新" class="headerlink" title="6-2，在Page的onPullDownRefresh里监听刷新"></a>6-2，在Page的onPullDownRefresh里监听刷新</h2><p><img src="https://img-blog.csdnimg.cn/20210205171045580.png" alt="img"><br>在page里的onPullDownRefresh方法里监听下拉刷新<br><img src="https://img-blog.csdnimg.cn/20210205171941928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="6-3，用户下拉刷新时请求最新数据"><a href="#6-3，用户下拉刷新时请求最新数据" class="headerlink" title="6-3，用户下拉刷新时请求最新数据"></a>6-3，用户下拉刷新时请求最新数据</h2><p><img src="https://img-blog.csdnimg.cn/2021020517250836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="6-4，数据请求成功后停止刷新"><a href="#6-4，数据请求成功后停止刷新" class="headerlink" title="6-4，数据请求成功后停止刷新"></a>6-4，数据请求成功后停止刷新</h2><p>我们在下拉刷新时，刷新动画一般很久才结束，正常情况下应该是数据请求成功后就结束刷新动画。所以我们通过wx.stopPullDownRefresh()方法来结束刷新动画。<br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html">https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html</a><br><img src="https://img-blog.csdnimg.cn/20210205174805866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>代码示例如下<br><img src="https://img-blog.csdnimg.cn/20210205175925121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h1 id="七，列表的分页加载"><a href="#七，列表的分页加载" class="headerlink" title="七，列表的分页加载"></a>七，列表的分页加载</h1><h2 id="7-1，小程序数据库每次最多20条"><a href="#7-1，小程序数据库每次最多20条" class="headerlink" title="7-1，小程序数据库每次最多20条"></a>7-1，小程序数据库每次最多20条</h2><p>小程序数据库api和云函数调用数据的限制<br>小程序端直接调用云数据库时，每次最多可以获取20条，云函数里调用云数据库时每次最多获取100条。所以我们数据多的时候要做分页加载。</p>
<h2 id="7-2，分页加载的核心方法"><a href="#7-2，分页加载的核心方法" class="headerlink" title="7-2，分页加载的核心方法"></a>7-2，分页加载的核心方法</h2><p>我们做分页加载时，主要用到了skip和limit方法，对应的官方文档如下</p>
<ul>
<li>skip：每页加载多少条<br><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html</a></li>
<li>limit: 加载第几页的数据<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html</a></li>
</ul>
<p>其实这个skip和limit我在数据库的那一节有做初步讲解，这一节我们就借助具体分页加载的案例来做综合讲解</p>
<h2 id="7-3，导入108条数据"><a href="#7-3，导入108条数据" class="headerlink" title="7-3，导入108条数据"></a>7-3，导入108条数据</h2><h3 id="7-3-1，下载数据源"><a href="#7-3-1，下载数据源" class="headerlink" title="7-3-1，下载数据源"></a>7-3-1，下载数据源</h3><p>去数据库里创建108条数据即可。</p>
<h3 id="7-3-2，导入到数据表"><a href="#7-3-2，导入到数据表" class="headerlink" title="7-3-2，导入到数据表"></a>7-3-2，导入到数据表</h3><p>我这里导入到num数据表，导入成功如下：<br><img src="https://img-blog.csdnimg.cn/2021022010395576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="7-3-3，别忘记修改表权限"><a href="#7-3-3，别忘记修改表权限" class="headerlink" title="7-3-3，别忘记修改表权限"></a>7-3-3，别忘记修改表权限</h3><p>把数据表(集合)的权限改为所有用户可读，仅创建者可读写。<br><img src="https://img-blog.csdnimg.cn/20210220104538397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="7-4，上拉加载更多监听"><a href="#7-4，上拉加载更多监听" class="headerlink" title="7-4，上拉加载更多监听"></a>7-4，上拉加载更多监听</h2><p>我们的列表滑动到最后一个数据时，会执行下面的方法<br><img src="https://img-blog.csdnimg.cn/20210222160533139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>所以我们的分页加载要在onReachBottom里做。</p>
<h2 id="7-5，数据库分页加载代码实现"><a href="#7-5，数据库分页加载代码实现" class="headerlink" title="7-5，数据库分页加载代码实现"></a>7-5，数据库分页加载代码实现</h2><p>直接调用数据库每次最多只能加载20条数据<br><img src="https://img-blog.csdnimg.cn/20210222161602873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>wxml里只做简单的列表数据显示就行了<br><img src="https://img-blog.csdnimg.cn/20210222161633284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>wxss做个简单的样式<br><img src="https://img-blog.csdnimg.cn/2021022216165113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>对应的效果如下<br><img src="https://img-blog.csdnimg.cn/2021022216171223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="7-5-1，没有更多数据时的友好提示"><a href="#7-5-1，没有更多数据时的友好提示" class="headerlink" title="7-5-1，没有更多数据时的友好提示"></a>7-5-1，没有更多数据时的友好提示</h3><p><img src="https://img-blog.csdnimg.cn/20210224163137345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20210224162947430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="7-5-2，加载中和加载完成的友好提示"><a href="#7-5-2，加载中和加载完成的友好提示" class="headerlink" title="7-5-2，加载中和加载完成的友好提示"></a>7-5-2，加载中和加载完成的友好提示</h3><ul>
<li>加载中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.showLoading(&#123;</span><br><span class="line">   title: &#x27;加载中...&#x27;,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li>隐藏加载中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.hideLoading()</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20210224163236298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="7-6-通过云函数实现分页加载"><a href="#7-6-通过云函数实现分页加载" class="headerlink" title="7-6,通过云函数实现分页加载"></a>7-6,通过云函数实现分页加载</h2><p>通过云函数调用数据库，每次最多可以加载100条数据.</p>
<ul>
<li>如果每页20条以内，不建议用云函数</li>
<li>如果分页的时候，每页大于20条，就用云函数。<br><img src="https://img-blog.csdnimg.cn/20210224164952168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h1 id="八，搜索功能"><a href="#八，搜索功能" class="headerlink" title="八，搜索功能"></a>八，搜索功能</h1><p>今天来给大家讲讲小程序的搜索功能。我这里后台数据库用的是小程序云开发的云数据库。所以我们搜索的时候就要借助云开发来实现。</p>
<p>注意：我们存数据的数据表(集合)要把权限改成如下所示。<br><img src="https://img-blog.csdnimg.cn/4e3ba9d1854f4b569cb2ebacf71ca29b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="8-1，需求"><a href="#8-1，需求" class="headerlink" title="8-1，需求"></a>8-1，需求</h2><p>比如我这里有如下的一些数据<br>可以自己一个个添加数据</p>
<p>{</p>
<p>“_id”:”xxxxxxxxxxs1212131321”,</p>
<p>“title”:’石头’,</p>
<p>“desc”:’ghd1d’</p>
<p>}，</p>
<p>{</p>
<p>“_id”:”xxxxxxxxxxs121aAASs1321”,</p>
<p>“title”:’黑石头’,</p>
<p>“desc”:’ghd1d’</p>
<p>}………</p>
<p>我们想实现如下搜索需求</p>
<ul>
<li>1，搜索标题(title)包含‘小石头’的数据</li>
<li>2，搜索标题(title)或者描述(desc)包含‘小石头’的数据</li>
<li>3，搜索标题(title)描述(desc)都包含‘小石头’的数据</li>
</ul>
<p>我们知道数据库查询的时候有个where语句，但是where语句是查询某个字段全部包含你输入的内容时才可以，所以单纯用where语句来做搜索的话，结果太单一。所以我们今天就来学习下模糊搜索功能的实现。我们以上面三个需求为例，来一个个讲解。</p>
<h2 id="8-2，实现原理"><a href="#8-2，实现原理" class="headerlink" title="8-2，实现原理"></a>8-2，实现原理</h2><p>我们做模糊搜索的时候，其实就是查询某个字段里是否包含我们的搜索词。而模糊搜索需要借助RegExp，来看看RegExp是什么。<br><img src="https://img-blog.csdnimg.cn/20210207214411585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html</a></p>
<ul>
<li>再来看看官方示例<br><img src="https://img-blog.csdnimg.cn/2021020721445170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可能看官方示例会有点糊涂，那么我们接下来就结合具体代码来给大家做下讲解。</li>
</ul>
<h2 id="8-3，模糊搜索的代码实现"><a href="#8-3，模糊搜索的代码实现" class="headerlink" title="8-3，模糊搜索的代码实现"></a>8-3，模糊搜索的代码实现</h2><h3 id="8-3-1，模糊搜索单个字段"><a href="#8-3-1，模糊搜索单个字段" class="headerlink" title="8-3-1，模糊搜索单个字段"></a>8-3-1，模糊搜索单个字段</h3><ul>
<li>需求：搜索标题(title)包含‘小石头’的数据</li>
</ul>
<p>代码如下<br><img src="https://img-blog.csdnimg.cn/20210207215202954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>可以看到我们成功的查询到了标题里包含‘小石头的数据’</p>
<h3 id="8-3-2，模糊搜索多个字段（满足一个即可）"><a href="#8-3-2，模糊搜索多个字段（满足一个即可）" class="headerlink" title="8-3-2，模糊搜索多个字段（满足一个即可）"></a>8-3-2，模糊搜索多个字段（满足一个即可）</h3><ul>
<li>需求：搜索标题(title)或者描述(desc)包含‘小石头’的数据</li>
</ul>
<p>由于我们要查询多个字段，所以我们这里用到了command高级操作符里的or<br><img src="https://img-blog.csdnimg.cn/20210207215716587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>代码如下：<br><img src="https://img-blog.csdnimg.cn/20210207220123112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="8-3-3，模糊搜索多个字段（要同时满足）"><a href="#8-3-3，模糊搜索多个字段（要同时满足）" class="headerlink" title="8-3-3，模糊搜索多个字段（要同时满足）"></a>8-3-3，模糊搜索多个字段（要同时满足）</h3><ul>
<li>需求：搜索标题(title)描述(desc)都包含‘小石头’的数据</li>
</ul>
<p>由于我们要查询多个字段，所以我们这里用到了command高级操作符里的and<br><img src="https://img-blog.csdnimg.cn/20210207221006673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>代码如下：<br><img src="https://img-blog.csdnimg.cn/20210207220906802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="8-4，源码"><a href="#8-4，源码" class="headerlink" title="8-4，源码"></a>8-4，源码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//简单起见就把搜索词写死，正常应该用户输入的</span><br><span class="line">let searchKey = &#x27;小石头&#x27;</span><br><span class="line">let db = wx.cloud.database()</span><br><span class="line">let _ = db.command</span><br><span class="line"></span><br><span class="line">db.collection(&#x27;news&#x27;)</span><br><span class="line">  .where(_.or([</span><br><span class="line">    &#123;//标题</span><br><span class="line">      title: db.RegExp(&#123; //使用正则查询，实现对搜索的模糊查询</span><br><span class="line">        regexp: searchKey,</span><br><span class="line">        options: &#x27;i&#x27;, //大小写不区分</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;//描述</span><br><span class="line">      desc: db.RegExp(&#123;</span><br><span class="line">        regexp: searchKey,</span><br><span class="line">        options: &#x27;i&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;</span><br><span class="line">  ])).get()</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(&#x27;查询成功&#x27;, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(res =&gt; &#123;</span><br><span class="line">    console.log(&#x27;查询失败&#x27;, res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h1 id="九，云开发实现登陆注册功能"><a href="#九，云开发实现登陆注册功能" class="headerlink" title="九，云开发实现登陆注册功能"></a>九，云开发实现登陆注册功能</h1><h2 id="9-1，注册页"><a href="#9-1，注册页" class="headerlink" title="9-1，	注册页"></a>9-1，	注册页</h2><p>注册页主要用到了input组件获取用户输入，button组件实现注册功能，注册主要是把账号名和密码添加到云开发数据库</p>
<h2 id="9-2，登陆页"><a href="#9-2，登陆页" class="headerlink" title="9-2，	登陆页"></a>9-2，	登陆页</h2><p>登陆主要是获取用户输入的账号和密码，然后从数据库里读取相应的数据，做账号和密码的比对，如果账号和密码都一样，就可以直接登陆成功</p>
<h2 id="9-3，登陆成功跳转到首页"><a href="#9-3，登陆成功跳转到首页" class="headerlink" title="9-3，	登陆成功跳转到首页"></a>9-3，	登陆成功跳转到首页</h2><p>登陆成功以后，会调整到首页</p>
<h2 id="9-4，保存登陆状态"><a href="#9-4，保存登陆状态" class="headerlink" title="9-4，	保存登陆状态"></a>9-4，	保存登陆状态</h2><p>我们通常做登陆时，用户登陆成功后我们需要帮用户保存登陆状态，要不然用户下次再进入应用时还要重新登陆。所以我们要做下用户登陆状态的保存</p>
<h1 id="十，云开发实现点赞收藏评论功能"><a href="#十，云开发实现点赞收藏评论功能" class="headerlink" title="十，云开发实现点赞收藏评论功能"></a>十，云开发实现点赞收藏评论功能</h1><h2 id="10-1，常用图标获取网站"><a href="#10-1，常用图标获取网站" class="headerlink" title="10-1，	常用图标获取网站"></a>10-1，	常用图标获取网站</h2><p>这里用了一个阿里巴巴矢量图库：<a href="https://www.iconfont.cn/">https://www.iconfont.cn</a></p>
<h2 id="10-2，云函数里初始化云开发环境"><a href="#10-2，云函数里初始化云开发环境" class="headerlink" title="10-2，	云函数里初始化云开发环境"></a>10-2，	云函数里初始化云开发环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cloud.init(&#123;</span><br><span class="line">env: cloud.DYNAMIC_CURRENT_ENV</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="十一，评论功能的简单实现"><a href="#十一，评论功能的简单实现" class="headerlink" title="十一，评论功能的简单实现"></a>十一，评论功能的简单实现</h1><h1 id="十二，CMS网页版管理后台"><a href="#十二，CMS网页版管理后台" class="headerlink" title="十二，CMS网页版管理后台"></a>十二，CMS网页版管理后台</h1><h2 id="12-1，开通cms的准备工作"><a href="#12-1，开通cms的准备工作" class="headerlink" title="12-1，开通cms的准备工作"></a>12-1，开通cms的准备工作</h2><p>如下图所示，直接点击开通内容管理(CMS)即可<br><img src="https://img-blog.csdnimg.cn/20210210113912477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>开通cms需要你云开发里使用按量付费，如果你是第一次开通云开发，记得做如下选择。<br><img src="https://img-blog.csdnimg.cn/20210310190751658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>如果你已经开通过云开发，记得把付费模式改为按量付费。如果你一开始云开发不是按量付费的模式。</p>
<p>点击完开通以后，会有如下弹窗，直接点击确定即可。不要被付费吓着，官方每月会送我们一定的免费额度的。学习得话基本上够用了。<br><img src="https://img-blog.csdnimg.cn/20210210114114135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>上面点完确定后，我们只是开启了按量付费功能，因为cms得使用必须要开通按量付费才可以得。所以还要再点一次开通。如下图<br><img src="https://img-blog.csdnimg.cn/20210210114330998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>点完开通后，会有如下弹窗，直接点击下一步即可。<br><img src="https://img-blog.csdnimg.cn/20210210114443541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后我们需要设置登录内容管理后台得账号和密码，然后点击确定即可<br><img src="https://img-blog.csdnimg.cn/20210210114541730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后我们就等待内容管理功能得开通了，需要等几分钟。<br><img src="https://img-blog.csdnimg.cn/20210210114640668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>开通成功以后，我们就可以通过下面这个地址进入管理后台了。<br><img src="https://img-blog.csdnimg.cn/20210210133616295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>后面我们统一称内容管理为cms</p>
<h2 id="12-2，注意事项"><a href="#12-2，注意事项" class="headerlink" title="12-2，注意事项"></a>12-2，注意事项</h2><ul>
<li>一个云开发环境对应一个内容管理(cms)</li>
<li>cms开通会存在开通失败的情况，如果开通失败了，就用新的云开发环境去开通，如果新的云开发环境还是不行的话，那就只能重新去注册一个新的小程序了。一个小程序是可以开通两个云开发环境的。</li>
</ul>
<h2 id="12-3，登录Cms可视化管理后台"><a href="#12-3，登录Cms可视化管理后台" class="headerlink" title="12-3，登录Cms可视化管理后台"></a>12-3，登录Cms可视化管理后台</h2><p>上面开通好以后，就可以通过后台地址登录管理后台了。如下<br><img src="https://img-blog.csdnimg.cn/20210210133522942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="12-4，在cms里创建后台项目"><a href="#12-4，在cms里创建后台项目" class="headerlink" title="12-4，在cms里创建后台项目"></a>12-4，在cms里创建后台项目</h2><p>第一次登录，我们还需要创建一个项目<br><img src="https://img-blog.csdnimg.cn/20210210133725671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>自己输入项目名和项目id即可<br><img src="https://img-blog.csdnimg.cn/20210210133904722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后点击进入刚刚创建的项目<br><img src="https://img-blog.csdnimg.cn/9f7b0fb259104355954fa44c817029c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>到这里我们的cmd可视化网页管理后台就创建好了</p>
<h2 id="12-5，内容模型"><a href="#12-5，内容模型" class="headerlink" title="12-5，内容模型"></a>12-5，内容模型</h2><p><img src="https://img-blog.csdnimg.cn/8382630149d541af89e4512c57914ce9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="12-6，数据类型"><a href="#12-6，数据类型" class="headerlink" title="12-6，数据类型"></a>12-6，数据类型</h2><p>我们往内容模型里添加数据类型的时候可以选择如下一些类型<br><img src="https://img-blog.csdnimg.cn/711bfdbb8474433ab0be987afe683f5c.png" alt="img"></p>
<h2 id="12-7，数据表-集合-管理"><a href="#12-7，数据表-集合-管理" class="headerlink" title="12-7，数据表(集合)管理"></a>12-7，数据表(集合)管理</h2><p>我们可以对上面创建好的内容模型(集合)进行可视化的管理，这也是cms的优点，可以让我们对数据库进行可视化的管理。<br><img src="https://img-blog.csdnimg.cn/2493b0597b2843929b0b89ece373f445.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="12-8，综合案例"><a href="#12-8，综合案例" class="headerlink" title="12-8，综合案例"></a>12-8，综合案例</h2><p>结合cms和云开发数据库，实现一个简单的新闻小程序，有如下功能点</p>
<ul>
<li>1，新闻列表</li>
<li>2，新闻详情</li>
<li>3，图文混排</li>
<li>4，富文本编辑</li>
<li>5，rich-text的学习</li>
</ul>
<p>rich-text官方文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html">https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html</a></p>
<h1 id="云开发实战案例···》"><a href="#云开发实战案例···》" class="headerlink" title="云开发实战案例···》"></a>云开发实战案例···》</h1><h1 id="实战一，云开发实现订阅消息推送"><a href="#实战一，云开发实现订阅消息推送" class="headerlink" title="实战一，云开发实现订阅消息推送"></a>实战一，云开发实现订阅消息推送</h1><p>之前的通过formid发送模板消息推送，将在2020年1月10日下线，所以我们不得不使用订阅消息了。</p>
<p>我们先来看下订阅消息的官方简介。<br><img src="https://img-blog.csdnimg.cn/img_convert/b7db371aea0e724e54f6d94c279171ba.png" alt="img"><br>接下来我们就来借助云开发，来快速实现小程序消息推送的功能。</p>
<h2 id="1-获取模板-ID"><a href="#1-获取模板-ID" class="headerlink" title="1,获取模板 ID"></a>1,获取模板 ID</h2><p>这一步和我们之前的模板消息推送是一样的，也是先添加模板，然后拿到模板id<br><img src="https://img-blog.csdnimg.cn/img_convert/3a3cb57812e875bc3b70c3425a5a900a.png" alt="img"><br>首先是开通订阅消息功能，很简单，如下图<br><img src="https://img-blog.csdnimg.cn/img_convert/b271655c0edb6ca4751da3d2c891bde0.png" alt="img"><br>由于长期性订阅消息，目前仅向政务民生、医疗、交通、金融、教育等线下公共服务开放，后期将逐步支持到其他线下公共服务业务。仅就线下公共服务这一点，长期性订阅消息就和大部分开发者无缘了。<br>所以我们这里只能以使用一次性订阅消息为例。<br><img src="https://img-blog.csdnimg.cn/img_convert/421d178fcfee1bfccd5ae0839d76a7c6.png" alt="img"><br>如上图，我们从公共模板库里选择一个一次性订阅的模板。然后编辑模板如下图<br><img src="https://img-blog.csdnimg.cn/img_convert/a0f65d36b5d27fd329c14d2df34cde00.png" alt="img"><br>下图就是我们添加好的模板，下图的模板id就是我们需要的。<br><img src="https://img-blog.csdnimg.cn/img_convert/8bd49bd2ddc542f0c4484aa7db73b6f7.png" alt="img"></p>
<h2 id="2-请求用户授权"><a href="#2-请求用户授权" class="headerlink" title="2,请求用户授权"></a>2,请求用户授权</h2><p>我们做订阅消息授权时，只能是用户点击或者支付完成后才可以调起来授权弹窗，官方是这么要求的：<br><img src="https://img-blog.csdnimg.cn/img_convert/20dca555457350c4c5d959e5d96e6c53.png" alt="img"><br>我们这里用到了wx.requestSubscribeMessage这个方法，来获取用户的授权。</p>
<ul>
<li>1，编写index.wxml代码<br><img src="https://img-blog.csdnimg.cn/img_convert/05dade190a567e04dd9c37315a685697.png" alt="img"></li>
<li>2，编写index.js代码,实现点击获取授权<br><img src="https://img-blog.csdnimg.cn/img_convert/41ce63de1a026e53ab47208cc39f2134.png" alt="img"><br>这一步tmplIds里的一串字符，就是我们自己添加的模板id</li>
<li>3，点击按钮运行效果如下<br>开发者工具模拟器上点击授权弹窗是这样的：<br><img src="https://img-blog.csdnimg.cn/img_convert/7a8f3304b2ff6971069831bb2524cca1.png" alt="img"><br>手机上的授权弹窗是这样的：<br><img src="https://img-blog.csdnimg.cn/img_convert/67407a9080f668313efb41eac09cdc33.png" alt="img"><br>可以看到，这里显示的就是我们添加的 ‘上课提醒’的模板。<br>细心的同学可以看到， 真机上多了一个 ‘总是保持以上选择，不再询问’<br>其实，你自己仔细多品一些。也能明天，我们正常订阅消息授权时，用户允许的话，你只能推送一次消息。也就是用户允许一次，我们就可以推送一条消息给用户，并且这个允许不存在过期。所以我们可以让用户尽量多的点击允许，这样我们就可以尽量多的给用户发送消息了。</li>
</ul>
<p>这里用户允许后，我们就可以给用户推送消息了，接下来我们来借助云开发的云函数来实现消息推送功能。</p>
<h2 id="3-获取用户的opneid"><a href="#3-获取用户的opneid" class="headerlink" title="3,获取用户的opneid"></a>3,获取用户的opneid</h2><p>先来看官方爸爸是怎么说的。<br><img src="https://img-blog.csdnimg.cn/img_convert/482348d3ed75f4073d52a2a19725d022.png" alt="img"><br>可以看出官方提供了两种方式，我们这里使用云调用。说白了就是在云函数里调用推送功能。</p>
<ul>
<li>推送所需参数<br><img src="https://img-blog.csdnimg.cn/img_convert/b618346a4b113511dc583b2a223fc0de.png" alt="img"><br>可以看到我这里用来openapi功能，并且需要用到用户的opneid，关于openid的获取，我之前有写过文章，也录过视频的。文章的话，大家去翻下我历史的文章，视频的话，点击这个即可：<a href="https://edu.csdn.net/course/play/26572/336253">《借助云函数获取用户openid》</a><br>这里的openid的获取我就不再详细讲解了，把对应云函数的代码给大家贴出来。<br><img src="https://img-blog.csdnimg.cn/img_convert/ea953e4aedb5e5290741cfe9341bc308.png" alt="img"><br>在使用云开发时，有几点需要注意的</li>
<li>1，需要在project.config.json里创建云函数目录如下图<br><img src="https://img-blog.csdnimg.cn/img_convert/c57726436bc359a7f0b451fed2134541.png" alt="img"></li>
<li>2，需要在app.js里初始化云开发环境<br><img src="https://img-blog.csdnimg.cn/img_convert/ffbc71638437f0ac2071d03040533069.png" alt="img"><br>至于云开发的环境id从哪里拿，我视频里也讲过很多遍了，直接去看我视频或者翻看我历史文章即可。</li>
</ul>
<h2 id="4-用云函数实现消息推送"><a href="#4-用云函数实现消息推送" class="headerlink" title="4,用云函数实现消息推送"></a>4,用云函数实现消息推送</h2><p>我们只需要创建一个云函数如下，然后填入用户的openid，要跳转的小程序页面链接，模板内容，模板id即可。通常这些数据都应该传进来，简单起见，我就把这里的模板内容写成固定的。<br><img src="https://img-blog.csdnimg.cn/img_convert/6ea360fbc3e9a0ac1c2e8c984383168b.png" alt="img"></p>
<p><strong>注意</strong>：我在编写上面的代码时，推送内容的key必须和小程序模板里的key保持一致，否则就会报如下错误。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7744febaaa1b6995afb5142965868cca.png" alt="img"></p>
<ul>
<li>然后看下调用这个云函数的地方<br><img src="https://img-blog.csdnimg.cn/img_convert/e2f325a86fb00c41f0f2ffe8c9c7f837.png" alt="img"><br>如果用户没有授权，我们推送会报如下错误<br><img src="https://img-blog.csdnimg.cn/img_convert/83e90947b16a013ffcab009e135f4397.png" alt="img"><br>如果用户授权过，我们就可以成功推送了，推送后的打印日志如下<br><img src="https://img-blog.csdnimg.cn/img_convert/fd154f7403927c3ef6ccb24b5ab82c76.png" alt="img"><br>还记得我们真机上的授权吗，如果用户只是点击了允许，没有选择一直允许，那我我们在推送成功一次后，如果再次推送，就需要用户重新授权。否则，还是会报这个错误的<br><img src="https://img-blog.csdnimg.cn/img_convert/7e05bc2ef9423835273e59a435c6ca34.png" alt="img"><br>所以我们用户点击一次允许，我们就可以推送一次消息，比如，我点击了4次允许那么我就可以成功的推送4次<br><img src="https://img-blog.csdnimg.cn/img_convert/48161ca1040adf3b859009c6c65a304a.png" alt="img"></li>
</ul>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/a3110cee08ea827cdd438fb164050d41.png" alt="img"></p>
<ul>
<li>index.wxml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&quot;shouquan&quot; type=&#x27;primary&#x27;&gt;获取订阅消息授权&lt;/button&gt;</span><br><span class="line">&lt;button bindtap=&quot;getOpenid&quot;&gt;获取用户的openid并推送消息&lt;/button&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>index.js</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  //获取授权的点击事件</span><br><span class="line">  shouquan() &#123;</span><br><span class="line">    wx.requestSubscribeMessage(&#123;</span><br><span class="line">      tmplIds: [&#x27;CFeSWarQLMPyPjwmiy6AV4eB-IZcipu48V8bFLkBzTU&#x27;], //这里填入我们生成的模板id</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        console.log(&#x27;授权成功&#x27;, res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res) &#123;</span><br><span class="line">        console.log(&#x27;授权失败&#x27;, res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  //获取用户的openid</span><br><span class="line">  getOpenid() &#123;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: &quot;getopenid&quot;</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      let openid = res.result.openid</span><br><span class="line">      console.log(&quot;获取openid成功&quot;, openid)</span><br><span class="line">      this.send(openid)</span><br><span class="line">    &#125;).catch(res =&gt; &#123;</span><br><span class="line">      console.log(&quot;获取openid失败&quot;, res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  //发送模板消息到指定用户,推送之前要先获取用户的openid</span><br><span class="line">  send(openid) &#123;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: &quot;sendMsg&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        openid: openid</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      console.log(&quot;推送消息成功&quot;, res)</span><br><span class="line">    &#125;).catch(res =&gt; &#123;</span><br><span class="line">      console.log(&quot;推送消息失败&quot;, res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li>推送对应的云函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">cloud.init()</span><br><span class="line">exports.main = async(event, context) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const result = await cloud.openapi.subscribeMessage.send(&#123;</span><br><span class="line">      touser: event.openid, //要推送给那个用户</span><br><span class="line">      page: &#x27;pages/index/index&#x27;, //要跳转到那个小程序页面</span><br><span class="line">      data: &#123;//推送的内容</span><br><span class="line">        thing1: &#123;</span><br><span class="line">          value: &#x27;小程序入门课程&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        thing6: &#123;</span><br><span class="line">          value: &#x27;杭州浙江大学&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        thing7: &#123;</span><br><span class="line">          value: &#x27;第一章第一节&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      templateId: &#x27;CFeSWarQLMPyPjwmiy6AV4eB-IZcipu48V8bFLkBzTU&#x27; //模板id</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(result)</span><br><span class="line">    return result</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    return err</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>注意</strong>：授权一次，只能发送一条消息。</p>
<h2 id="5-发送订阅消息给多个用户"><a href="#5-发送订阅消息给多个用户" class="headerlink" title="5,发送订阅消息给多个用户"></a>5,发送订阅消息给多个用户</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//发送订阅消息给多个用户</span><br><span class="line">  sendAll() &#123;</span><br><span class="line">    if (name == null || name == &#x27;&#x27;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        icon: &quot;none&quot;,</span><br><span class="line">        title: &#x27;请输入课程名&#x27;,</span><br><span class="line">      &#125;)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    let users = [</span><br><span class="line">      &quot;oc4sa0Vp_s65LEItm4JSWT5WFQds&quot;,</span><br><span class="line">      &quot;oc4sa0dZ-pSCu95djiLCt7jo97bY&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    users.forEach(item =&gt; &#123;</span><br><span class="line">      console.log(&quot;for循环&quot;, item)</span><br><span class="line">      this.sendFun(item, name)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  //封装的方式方法</span><br><span class="line">  sendFun(openid, name) &#123;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: &quot;fasong&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        openid: openid,</span><br><span class="line">        name: name</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      console.log(&quot;发送单条成功&quot;, res)</span><br><span class="line">    &#125;).catch(res =&gt; &#123;</span><br><span class="line">      console.log(&quot;发送单条失败&quot;, res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h1 id="实战二，短信验证码"><a href="#实战二，短信验证码" class="headerlink" title="实战二，短信验证码"></a>实战二，短信验证码</h1><p>官方文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/cloudbase/cloudbase.sendSms.html">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/cloudbase/cloudbase.sendSms.html</a></p>
<p>进入官方文档一看，云开发给咱们开发者的福利还真不小。<br>不仅仅可以很方便的使用短信功能，还送了免费短信。</p>
<h2 id="1，使用云开发短信的条件"><a href="#1，使用云开发短信的条件" class="headerlink" title="1，使用云开发短信的条件"></a>1，使用云开发短信的条件</h2><p>这个前置条件很重要，条件不满足，你就没法使用云开发短信功能。</p>
<p>使用条件</p>
<ul>
<li>1，必须是企业小程序，目前个人小程序无法使用短信发送</li>
<li>2，必须开通静态网站功能（后面应该会逐步放开）</li>
<li>3，必须开通云开发（这个没得说，不开通云开发你还用啥云开发功能)</li>
</ul>
<h2 id="2，开通静态网站功能"><a href="#2，开通静态网站功能" class="headerlink" title="2，开通静态网站功能"></a>2，开通静态网站功能</h2><p>如果你不开通静态网站，直接调用短信发送，会报如下错误。<br><img src="https://img-blog.csdnimg.cn/20210109121558880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>其实官方文档里也有给出这个错误。<br><img src="https://img-blog.csdnimg.cn/20210109121621602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>那么我们就来开通静态网站功能。开通静态网站功能之前，必须开通云开发，配置好云开发的环境。</p>
<p>这里开通云开发我们借助小程序开发者工具来实现快速开通。</p>
<h3 id="2-1，注册小程序"><a href="#2-1，注册小程序" class="headerlink" title="2-1，注册小程序"></a>2-1，注册小程序</h3><h3 id="2-2，创建一个小程序项目"><a href="#2-2，创建一个小程序项目" class="headerlink" title="2-2，创建一个小程序项目"></a>2-2，创建一个小程序项目</h3><h3 id="2-3，开通云开发"><a href="#2-3，开通云开发" class="headerlink" title="2-3，开通云开发"></a>2-3，开通云开发</h3><h3 id="2-4，开通静态网站功能"><a href="#2-4，开通静态网站功能" class="headerlink" title="2-4，开通静态网站功能"></a>2-4，开通静态网站功能</h3><p><img src="https://img-blog.csdnimg.cn/20201211120905504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们上面云开发开通好以后，就可以在这里快速开通静态网站了。<br><img src="https://img-blog.csdnimg.cn/20201211120927392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>点击以后，直接点击开通即可<br><img src="https://img-blog.csdnimg.cn/20201211120948749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这时候开通有个条件<br><img src="https://img-blog.csdnimg.cn/20201211121007349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们必须按照要求改变自己小程序的付费方式，把我们的付费方式改成按量付费即可。<br><img src="https://img-blog.csdnimg.cn/20201211121058390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这里不用担心，这里的按量付费，每月都有免费额度。这些额度我们开发学习基本上够用了<br><img src="https://img-blog.csdnimg.cn/20201211121137132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br><img src="https://img-blog.csdnimg.cn/20201211121144821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这个时候我们的静态网站功能就开通成功了。<br><img src="https://img-blog.csdnimg.cn/20201211121157987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>开通成功以后如下图。<br><img src="https://img-blog.csdnimg.cn/20201211121233312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br><img src="https://img-blog.csdnimg.cn/20210109123050201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="3，编写发送短信的云函数"><a href="#3，编写发送短信的云函数" class="headerlink" title="3，编写发送短信的云函数"></a>3，编写发送短信的云函数</h2><p>其实上面静态网站功能开通以后，我们不用上传网站资源，就可以直接来使用短信功能了。<br>下面我们就来使用云开发的云函数功能来做短信发送功能。<br>代码编写也很简单<br><img src="https://img-blog.csdnimg.cn/20210109123624813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>其实发送短信的代码很简单，就上面这几行。下面就来教大家如何编写这个云函数。</p>
<h3 id="3-1，初始化云开发环境id"><a href="#3-1，初始化云开发环境id" class="headerlink" title="3-1，初始化云开发环境id"></a>3-1，初始化云开发环境id</h3><p>新建一个和pages平级的目录cloud，用于存放云函数<br><img src="https://img-blog.csdnimg.cn/2021010912401458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后在project.config.json里添加cloudfunctionRoot选项。<br><img src="https://img-blog.csdnimg.cn/20210109123846528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后对cloud选择当前环境<br><img src="https://img-blog.csdnimg.cn/20210109130001146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>在app.js里配置环境变量<br><img src="https://img-blog.csdnimg.cn/20210109130043444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这个env环境id需要你去云开发控制台获取<br><img src="https://img-blog.csdnimg.cn/20210109130130467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3-2，创建云函数"><a href="#3-2，创建云函数" class="headerlink" title="3-2，创建云函数"></a>3-2，创建云函数</h3><p>右键cloud目录，新建Node.js云函数<br><img src="https://img-blog.csdnimg.cn/20210109130223400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后新建一个云函数，名字你可以自定随便定。我这里用sendSms<br><img src="https://img-blog.csdnimg.cn/20210109130321182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3-3，编写云函数"><a href="#3-3，编写云函数" class="headerlink" title="3-3，编写云函数"></a>3-3，编写云函数</h3><p><img src="https://img-blog.csdnimg.cn/20210109130405597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>记得把env和接收短信的手机号换成自己的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: cloud.DYNAMIC_CURRENT_ENV</span><br><span class="line">&#125;)</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const result = await cloud.openapi.cloudbase.sendSms(&#123;</span><br><span class="line">      env: &#x27;xiaoshitou-zfl2q&#x27;,</span><br><span class="line">      content: &#x27;编程小石头发布了新的能力&#x27;,</span><br><span class="line">      phoneNumberList: [</span><br><span class="line">        &quot;+86123123124121&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    return result</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    return err</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4，部署云函数"><a href="#3-4，部署云函数" class="headerlink" title="3-4，部署云函数"></a>3-4，部署云函数</h3><p>上面云函数编写好了，一定要记得部署下云函数。右键sendSms然后点击下面箭头所示的即可。<br><img src="https://img-blog.csdnimg.cn/20210109130811107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>上传部署成功后，会有下面这样的提示<br><img src="https://img-blog.csdnimg.cn/20210109130925613.png" alt="img"></p>
<h2 id="4，调用云函数发送短信"><a href="#4，调用云函数发送短信" class="headerlink" title="4，调用云函数发送短信"></a>4，调用云函数发送短信</h2><p>我们上面云函数编写并部署成功以后，就可以来调用这个云函数，发送短信了。</p>
<h3 id="4-1，编写wxml文件"><a href="#4-1，编写wxml文件" class="headerlink" title="4-1，编写wxml文件"></a>4-1，编写wxml文件</h3><p>在wxml文件里写一个button按钮，编写一个bindtap点击事件<br><img src="https://img-blog.csdnimg.cn/20210109131049800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="4-2，编写js文件"><a href="#4-2，编写js文件" class="headerlink" title="4-2，编写js文件"></a>4-2，编写js文件</h3><p>在js文件里实现上面button的点击事件，然后调用云函数<br><img src="https://img-blog.csdnimg.cn/2021010913122362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>调用云函数时，一定要记得这里的name必须和你的云函数名一模一样。</p>
<h3 id="4-3，点击发送短信"><a href="#4-3，点击发送短信" class="headerlink" title="4-3，点击发送短信"></a>4-3，点击发送短信</h3><p>点击发送短信<br><img src="https://img-blog.csdnimg.cn/2021010913133224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>点击发送 短信以后，可以看到日志里打印openapi.cloudbase.sendSms:ok<br>这就代表发送成功了。</p>
<h2 id="5，发送验证码短信"><a href="#5，发送验证码短信" class="headerlink" title="5，发送验证码短信"></a>5，发送验证码短信</h2><p>我们只需要获取用户输入的手机号，然后点击获取验证码，最后输入短信里接收到的验证码，进行验证即可。</p>
<h3 id="5-1，编写wxml"><a href="#5-1，编写wxml" class="headerlink" title="5-1，编写wxml"></a>5-1，编写wxml</h3><p>页面比较简单，就两个输入框和两个按钮<br><img src="https://img-blog.csdnimg.cn/20210109135120664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="5-2，编写js"><a href="#5-2，编写js" class="headerlink" title="5-2，编写js"></a>5-2，编写js</h3><p>js里主要是获取用户输入的手机号，然后发送验证码，发送验证码调用云函数实现短信验证码发送功能。用户输入验证码以后进行校验即可。<br><img src="https://img-blog.csdnimg.cn/20210109135258919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="5-3，发送短信验证码"><a href="#5-3，发送短信验证码" class="headerlink" title="5-3，发送短信验证码"></a>5-3，发送短信验证码</h3><p>用户输入手机号以后，点击发送，可以看到我们手机上收到了短信。</p>
<p>然后用户输入获取到的验证码，点击验证。</p>
<p>可以看到验证成功，验证成功以后后面的操作就可以自己定了，比如验证成功以后跳转到登录成功页。</p>
<p>到这里我们就实现了验证码发送功能了。</p>
<h3 id="5-4-生成随机验证码的方法"><a href="#5-4-生成随机验证码的方法" class="headerlink" title="5-4,生成随机验证码的方法"></a>5-4,生成随机验证码的方法</h3><h4 id="字母和数字混合"><a href="#字母和数字混合" class="headerlink" title="字母和数字混合"></a>字母和数字混合</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取随机验证码，n代表几位</span><br><span class="line">generateMixed(n) &#123;</span><br><span class="line">  let chars = [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;];</span><br><span class="line">  let res = &quot;&quot;;</span><br><span class="line">  for (var i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    var id = Math.ceil(Math.random() * 35);</span><br><span class="line">    res += chars[id];</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="数字混合"><a href="#数字混合" class="headerlink" title="数字混合"></a>数字混合</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取随机验证码，n代表几位</span><br><span class="line">generateMixed(n) &#123;</span><br><span class="line">  let chars = [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;];</span><br><span class="line">  let res = &quot;&quot;;</span><br><span class="line">  for (var i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    var id = Math.ceil(Math.random() * 9);</span><br><span class="line">    res += chars[id];</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="实战三，群发短信"><a href="#实战三，群发短信" class="headerlink" title="实战三，群发短信"></a>实战三，群发短信</h1><p>我们上面给单个手机发送验证码的功能实现了，接下来就教大家如何群发短信。</p>
<p>官方文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/cloudbase/cloudbase.sendSms.html">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/cloudbase/cloudbase.sendSms.html</a></p>
<h4 id="使用云开发短信的条件"><a href="#使用云开发短信的条件" class="headerlink" title="使用云开发短信的条件"></a>使用云开发短信的条件</h4><p>这个前置条件很重要，条件不满足，你就没法使用云开发短信功能。</p>
<ul>
<li>1，必须是企业小程序，目前个人小程序无法使用短信发送</li>
<li>2，必须开通静态网站功能（后面应该会逐步放开）</li>
<li>3，必须开通云开发（这个没得说，不开通云开发你还用啥云开发功能啊）</li>
</ul>
<p>上面条件都满足以后，我们就可以来愉快的撸代码了。</p>
<h2 id="1，编写wxml页面"><a href="#1，编写wxml页面" class="headerlink" title="1，编写wxml页面"></a>1，编写wxml页面</h2><p>简单起见，我这里只定义一个输入手机号的输入框和一个button按钮<br><img src="https://img-blog.csdnimg.cn/20210110214701978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>对应的代码如下<br><img src="https://img-blog.csdnimg.cn/20210110214556726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="2，获取用户输入的手机号"><a href="#2，获取用户输入的手机号" class="headerlink" title="2，获取用户输入的手机号"></a>2，获取用户输入的手机号</h2><p>我这里以*来分割手机号，如下图所示。<br><img src="https://img-blog.csdnimg.cn/20210110215200429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>然后我们定义一个bindinput事件来获取用户输入的内容。<br><img src="https://img-blog.csdnimg.cn/20210110215350402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可以看到，我们成功的获取到了用户输入的手机号了。<br><img src="https://img-blog.csdnimg.cn/20210110215721299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>但是官方文档里已经说明，我们群发短信的时候需要用到的是一组手机号，也就是说需要用数组来存放数据。但是我们这里是一个字符串。那么我们就要分割字符串成数组了。</p>
<h2 id="3，分割字符串成数组"><a href="#3，分割字符串成数组" class="headerlink" title="3，分割字符串成数组"></a>3，分割字符串成数组</h2><p>我们分割字符串用到的是字符串的split()方法<br><img src="https://img-blog.csdnimg.cn/20210110215844128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>当然触发的时机，应该是在用户点击群发按钮的时候。那么我们就为群发按钮定义bindtap点击事件send<br><img src="https://img-blog.csdnimg.cn/20210110220111787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可以看到我们成功的把字符串分割成了数组。<br><img src="https://img-blog.csdnimg.cn/20210110220243381.png" alt="img"><br>但是我们数组里的手机号前面有个回车键，所以安全起见，我们在分割字符串之前，需要先把这回车键给剔除掉。</p>
<h2 id="4，去除字符串里的回车键"><a href="#4，去除字符串里的回车键" class="headerlink" title="4，去除字符串里的回车键"></a>4，去除字符串里的回车键</h2><p>去除字符串里的回车键语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串.replace(/[\r\n]/g, &quot;&quot;)</span><br></pre></td></tr></table></figure>



<p>可以看到我们只需要调用字符串.replace方法即可，后面括号里跟的是回车键对应的正则表达式。这里不需要记住，后面用的时候来我笔记这里复制就行了。<br><img src="https://img-blog.csdnimg.cn/20210110220615764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可以看到我们剔除回车键以后，再分割的字符串里就没有回车键了。</p>
<h2 id="5，遍历数组给手机号前面-86"><a href="#5，遍历数组给手机号前面-86" class="headerlink" title="5，遍历数组给手机号前面+86"></a>5，遍历数组给手机号前面+86</h2><p>如果你有仔细阅读官方文档，可以看到我们群发的手机号前面必须以+86开头。并且每次群发的手机号不能超过1000条。<br><img src="https://img-blog.csdnimg.cn/2021011022085622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>那么我们接下来就要遍历数组，给每个手机号前面都添加‘+86’了。<br>当然了这里有很多种方法来实现这一目的，我这里用一个for循环和一个map方法来分别实现下。<br><img src="https://img-blog.csdnimg.cn/20210110222029946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可以看出用map方法更简介一点。但是对于新手来说第二种方法可能不是很好理解。所以这里你用那种方法都可以，不做强制要求。</p>
<h3 id="5-1，通过for循环来实现"><a href="#5-1，通过for循环来实现" class="headerlink" title="5-1，通过for循环来实现"></a>5-1，通过for循环来实现</h3><p><img src="https://img-blog.csdnimg.cn/20210110222243469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="5-2，通过map方法来实现"><a href="#5-2，通过map方法来实现" class="headerlink" title="5-2，通过map方法来实现"></a>5-2，通过map方法来实现</h3><p><img src="https://img-blog.csdnimg.cn/20210110221534846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="6，编写群发短信的内容"><a href="#6，编写群发短信的内容" class="headerlink" title="6，编写群发短信的内容"></a>6，编写群发短信的内容</h2><p>那么我们接下来要做的就是实现群发功能了。我们这里要想成功的实现群发，需要两个元素</p>
<ul>
<li>要群发的短信内容</li>
<li>要群发的手机号</li>
</ul>
<p>关于手机号和群发内容都有要求<br><img src="https://img-blog.csdnimg.cn/20210110222505278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们群发手机号这里已经符合要求了，接下来就是群发的内容了。群发内容最长不能超过60个字节，一个汉字通常2~3个字节。也就是说我们短信内容不能超过20个字，所以群发的短信一定要精细。用最少的字来吸引用户。</p>
<p>这里其实就是一个input来获取用户输入的内容就行了。我不再多讲，直接把代码贴出来。<br><img src="https://img-blog.csdnimg.cn/20210110223424454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>在js里获取用户输入的短信内容<br><img src="https://img-blog.csdnimg.cn/2021011022370271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>现在完事具备，只欠一个云函数了</p>
<h2 id="7，编写群发短信的云函数"><a href="#7，编写群发短信的云函数" class="headerlink" title="7，编写群发短信的云函数"></a>7，编写群发短信的云函数</h2><p>短信内容和群发的手机号都已经成功拿到了，我们接下来就要来编写群发的云函数了。<br><img src="https://img-blog.csdnimg.cn/20210110224043670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>云函数其实我们短信验证码那一节基本上一样，区别就是</p>
<ul>
<li>短信验证传入的是：验证码+单个手机号</li>
<li>群发传入的是：短信内容+多个手机号</li>
</ul>
<p>云函数编辑好，记得重新部署下。</p>
<h2 id="8，调用云函数实现群发"><a href="#8，调用云函数实现群发" class="headerlink" title="8，调用云函数实现群发"></a>8，调用云函数实现群发</h2><p>上面云函数编辑好了，也部署好了，接下来就是要调用云函数实现短信群发了。<br><img src="https://img-blog.csdnimg.cn/20210110224541938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>调用其实很简单。</p>
<h2 id="9，群发演示失败"><a href="#9，群发演示失败" class="headerlink" title="9，群发演示失败"></a>9，群发演示失败</h2><p>接下来我们就要验证自己的劳动成果了。如下，我发这样的内容给两个手机号。为什么是两个呢，我这里是学习，要节省短信条数。官方只送我们1000条。所以要省着点用。</p>
<p>其实群发两个手机号，和群发1000个没区别，只要群发两个成果，那么群发1000个也一样的。<br><img src="https://img-blog.csdnimg.cn/20210110224906123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>辛辛苦苦编写好了，测试了下，居然报错<br><img src="https://img-blog.csdnimg.cn/20210110230354339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>什么鬼，代码明明没有错误啊，程序员有时候就是莫名的自信。<br>官方给的发送成果返回字段如下<br><img src="https://img-blog.csdnimg.cn/20210110230510989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>发送返回结果如下<br><img src="https://img-blog.csdnimg.cn/20210110230547798.png" alt="img"><br>百思不得其解啊。不会真是代码写错了吧。。。。<br>翻译了一下报错信息。<br><img src="https://img-blog.csdnimg.cn/2021011023071456.png" alt="img"><br>发送时间限制，也没看到官方文档有说时间限制啊。后来又去官方文档翻来覆去，终于在一个角落里看到了这句话。</p>
<h2 id="10，群发演示成功"><a href="#10，群发演示成功" class="headerlink" title="10，群发演示成功"></a>10，群发演示成功</h2><p>终于等到了第二天8点47，下面我们把昨天的群发短信再演示一遍，看这次能不能成功。<br>先来看我们的日志<br><img src="https://img-blog.csdnimg.cn/20210111084934161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序（零基础版）</title>
    <url>/2023/01/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>说起微信小程序，渊源就长了，毕竟毕设做得就是微信小程序（基于微信小程序的体育馆自助预约与管理平台的设计与开发），前端微信小程序，后端微信云开发，后台CMS。也算是投入了一定的心思与时间叭。</p>
<p>微信小程序的开发与web端开发基本一致叭，但是微信小程序有更多封装好的API可以直接使用，需要投入时间学习开发文档。我觉得用微信小程序做一个普通的产品出来还是相对简单的。</p>
<span id="more"></span>


<h1 id="一、认识小程序"><a href="#一、认识小程序" class="headerlink" title="一、认识小程序"></a>一、认识小程序</h1><p>微信⼩程序，简称⼩程序，英⽂名 Mini Program Mini Program ，是⼀种不需要下载安装即可使⽤的应⽤，它实现 了应⽤“触⼿可及”的梦想，⽤⼾扫⼀扫或搜⼀下即可打开应⽤</p>
<h2 id="1-1、微信小程序的优势"><a href="#1-1、微信小程序的优势" class="headerlink" title="1-1、微信小程序的优势"></a>1-1、微信小程序的优势</h2><ul>
<li>1.微信有海量⽤⼾，⽽且粘性很⾼，在微信⾥开发产品更容易触达⽤⼾；</li>
<li>2.推⼴app或公众号的成本太⾼。</li>
<li>3.开发适配成本低。</li>
<li>4.容易⼩规模试错，然后快速迭代。</li>
<li>5.跨平台。</li>
</ul>
<p>通过小程序和app的使用步骤，更容易看出来<br><img src="https://pic.imgdb.cn/item/63d68611face21e9ef40613b.png"><br>可以看出小程序和app使用相比：免安装，免注册，免卸载。正如张小龙所说“随用随走”</p>
<h2 id="1-2、小程序发展前景"><a href="#1-2、小程序发展前景" class="headerlink" title="1-2、小程序发展前景"></a>1-2、小程序发展前景</h2><p>通过腾讯2020年财报可以看出，2019年上线小程序已经超过100万个，小程序日活也已经突破4亿<br><img src="https://pic.imgdb.cn/item/63d68621face21e9ef408567.png"><br>2019年小程序带动就业536万个，所以我们不管是学习小程序开发，还是学习小程序运营，都有很广的就业前景。<br><img src="https://pic.imgdb.cn/item/63d6862fface21e9ef40a74b.png"><br><img src="https://img-blog.csdnimg.cn/20200724120820817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="1-3、小程序发展历史"><a href="#1-3、小程序发展历史" class="headerlink" title="1-3、小程序发展历史"></a>1-3、小程序发展历史</h2><ul>
<li>2016年1月11日，微信之父张小龙时隔多年的公开亮相，解读了微信的四大价值观。张小龙指出，越来越多产品通过公众号来做，因为这里开发、获取用户和传播成本更低。拆分出来的服务号并没有提供更好的服务，所以微信内部正在研究新的形态，叫「微信小程序」。</li>
<li>2016年9月21日，微信小程序正式开启内测。在微信生态下，触手可及、用完即走的微信小程序引起广泛关注。腾讯云正式上线微信小程序解决方案，提供微信小程序在云端服务器的技术方案。</li>
<li>2017年1月9日0点，万众瞩目的微信第一批微信小程序正式低调上线，用户可以体验到各种各样微信小程序提供的服务。</li>
<li>2017年12月28日，微信更新的 6.6.1 版本开放了小游戏，微信启动页面还重点推荐了小游戏「跳一跳」，你可以通过「微信小程序」找到已经玩过的小游戏。</li>
<li>2018年1月18日，微信提供了电子化的侵权投诉渠道，用户或者企业可以在微信公众平台以及微信客户端入口进行投诉。</li>
<li>2018年1月25日，微信团队在“微信公众平台”发布公告称，“从移动应用分享至微信的小程序页面，用户访问时支持打开来源应用。同时，为提升用户使用体验，开发者可以设置小程序菜单的颜色风格，并根据业务需求，对小程序菜单外的标题栏区域进行自定义。</li>
<li>2018年3月，微信正式宣布微信小程序广告组件启动内测，内容还包括第三方可以快速创建并认证小程序、新增小程序插件管理接口和更新基础能力，开发者可以通过微信小程序来赚取广告收入。除了公众号文中、朋友圈广告以及公众号底部的广告位都支持微信小程序落地页投放广告，微信小程序广告位也可以直达小程序。</li>
<li>2018年7月13日，微信小程序任务栏功能升级，新增“我的微信小程序”板块；而微信小程序原有的“星标”功能升级，可以将喜欢的小程序直接添加到“我的微信小程序”。</li>
<li>2018年8月10日，微信宣布，微信小程序后台数据分析及插件功能升级，开发者可查看已添加「我的微信小程序」的用户数。此外，2018年8月1日至12月31日期间，微信小程序（含小游戏）流量主的广告收入分成比例优化上调，单日广告流水10-100万区间的部分，开发者可获得的分成由原来流水的30%上调到50%，优质微信小程序流量主可获得更高收益。</li>
<li>2018年9月28日，微信“功能直达”正式开放，商家与用户的距离可以更“近”一步：用户微信搜一搜功能词，搜索页面将呈现相关服务的微信小程序，点击搜索结果，可直达微信小程序相关服务页面。</li>
<li>2019年8月9日，微信向开发者发布新能力公测与更新公告，微信 PC 版新版本中，支持打开聊天中分享的微信小程序。安装最新PC端测试版微信后，点击聊天中的微信小程序，便会弹出微信小程序浮窗。而在微信小程序右上角的操作选项中，可以进行“最小化”操作，让微信小程序像其他PC软件一样最小化，排列于Windows系统的任务栏中。</li>
</ul>
<h2 id="1-4、为什么学习小程序"><a href="#1-4、为什么学习小程序" class="headerlink" title="1-4、为什么学习小程序"></a>1-4、为什么学习小程序</h2><p>我们上面了解完小程序的优势和历史以后，就知道我们为什么要学习小程序了</p>
<ul>
<li>依赖微信生态</li>
<li>就业面广</li>
<li>上手快</li>
<li>学习完微信小程序以后，再去学习百度小程序，抖音小程序，支付宝小程序就很方便了。因为这些小程序api都很相似。</li>
<li>相对于Java，php，python而言，小程序更适合作为编程的入门语言</li>
<li>相对于传统前端开发，我们在学习小程序的同时就可以学习css，JavaScript的知识</li>
</ul>
<h2 id="1-5、微信小程序对创业者的优势"><a href="#1-5、微信小程序对创业者的优势" class="headerlink" title="1-5、微信小程序对创业者的优势"></a>1-5、微信小程序对创业者的优势</h2><ul>
<li>App开发的推广成本过高</li>
<li>移动互联网格局已定，用户需求被各路巨头把持，我们要想在移动互联网有一番作为，微信是不可避免的靠山</li>
<li>小程序能以最小的成本，最快的速度验证你的商业模式。</li>
</ul>
<h1 id="二、开发者工具"><a href="#二、开发者工具" class="headerlink" title="二、开发者工具"></a>二、开发者工具</h1><p>工欲善其事必先利其器，所以我们在开发小程序之前必须准备好一款适合自己的开发者工具，这里我给大家推荐官方开发者工具。原因有以下几点</p>
<ul>
<li>官方的所有更新，都会第一时间在官方开发者工具同步</li>
<li>有任何问题，可以直接反馈给官方</li>
<li>官方开发者工具更新迭代最及时</li>
<li>我们用官方开发者工具，使用一些官方功能最稳定。<br>下面就来教大家如何下载官方开发工具</li>
</ul>
<h2 id="2-1-官方开发者工具下载地址"><a href="#2-1-官方开发者工具下载地址" class="headerlink" title="2-1 官方开发者工具下载地址"></a>2-1 官方开发者工具下载地址</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a><br>建议大家下载最新的稳定版本<br><img src="https://pic.imgdb.cn/item/63d68647face21e9ef40dfda.png"></p>
<p>然后点击自己电脑对应系统的版本下载即可。至于安装很方便，只需要双击安装包，不停的点下一步即可，安装完成以后的官方开发者工具长这样。<br><img src="https://pic.imgdb.cn/item/63d68662face21e9ef411cb8.png"></p>
<h2 id="2-2，认识微信开发者工具"><a href="#2-2，认识微信开发者工具" class="headerlink" title="2-2，认识微信开发者工具"></a>2-2，认识微信开发者工具</h2><p>我们安装好开发者工具以后，只需要双击打开即可。<br><img src="https://pic.imgdb.cn/item/63d68674face21e9ef414629.png"><br>通常我们第一次打开，会出现上图所示的，只需要用微信扫描即可登录开发者工具。扫码登录以后会出现下面这样的界面。<br><img src="https://pic.imgdb.cn/item/63d68682face21e9ef416448.png"></p>
<h1 id="三、创建属于自己的第一个小程序"><a href="#三、创建属于自己的第一个小程序" class="headerlink" title="三、创建属于自己的第一个小程序"></a>三、创建属于自己的第一个小程序</h1><p>上面第二步已经安装好开发者工具了，接下来就来教大家如何创建一个最简单的小程序</p>
<h2 id="3-1、在桌面上创建一个空白文件"><a href="#3-1、在桌面上创建一个空白文件" class="headerlink" title="3-1、在桌面上创建一个空白文件"></a>3-1、在桌面上创建一个空白文件</h2><p>名字可以随便取</p>
<p><img src="https://pic.imgdb.cn/item/63d686a4face21e9ef41ab10.png">·</p>
<h2 id="3-2、点击-号，创建小程序。"><a href="#3-2、点击-号，创建小程序。" class="headerlink" title="3-2、点击 + 号，创建小程序。"></a>3-2、点击 + 号，创建小程序。</h2><p><img src="https://pic.imgdb.cn/item/63d686baface21e9ef41daf2.png"></p>
<h2 id="3-3、小程序项目配置"><a href="#3-3、小程序项目配置" class="headerlink" title="3-3、小程序项目配置"></a>3-3、小程序项目配置</h2><p>这里需要注意下，小程序官方最新的开发者工具有了变化，所以你创建项目时如果不长下面这样。可以跳过这个图片，看下面新版的<br><img src="https://pic.imgdb.cn/item/63d686d4face21e9ef420eec.png"></p>
<p>新版的如下，多了一个模板选择，这里注意：要选择不使用模板。<br><img src="https://pic.imgdb.cn/item/63d686e3face21e9ef422e06.png"></p>
<p>配置好以后，点新建，即可创建属于自己的第一个小程序，然后创建会有一个过程，耐心等待即可。<br><img src="https://pic.imgdb.cn/item/63d686f4face21e9ef425072.png"></p>
<h2 id="3-4、熟悉开发者工具"><a href="#3-4、熟悉开发者工具" class="headerlink" title="3-4、熟悉开发者工具"></a>3-4、熟悉开发者工具</h2><p><img src="https://pic.imgdb.cn/item/63d686ffface21e9ef426734.png"></p>
<h2 id="3-6、小程序结构目录"><a href="#3-6、小程序结构目录" class="headerlink" title="3-6、小程序结构目录"></a>3-6、小程序结构目录</h2><p>下图是程序目录，每一个我都给大家标注出来了，大家前期不用死记硬背，后面开发学习过程中，用的多了， 自然就记住目录下每个文件的作用了。<br><img src="https://pic.imgdb.cn/item/63d68753face21e9ef444f69.png"></p>
<h1 id="四、小程序开发三剑客"><a href="#四、小程序开发三剑客" class="headerlink" title="四、小程序开发三剑客"></a>四、小程序开发三剑客</h1><h2 id="4-1、小程序三剑客-wxml-wxss-js"><a href="#4-1、小程序三剑客-wxml-wxss-js" class="headerlink" title="4-1、小程序三剑客: wxml+wxss+js"></a>4-1、小程序三剑客: wxml+wxss+js</h2><p>1，	wxml主要用来布局组件的（相当于大楼结构）<br>如：楼有几层，每层有多少房间，有什么设备<br>2，	wxss主要决定显示样式（决定大楼的样式）<br>如：颜色，大小，宽高等<br>3，	js主要用来处理逻辑（决定大楼具备哪些功能）<br>如：大楼具有电梯功能，空调制冷，灯光，供水，供电，主要是为了大厦的运行。</p>
<p>下面画个图，来说明三者的关系。<br><img src="https://pic.imgdb.cn/item/63d68766face21e9ef44aca4.png"></p>
<h2 id="4-2、小程序文件和传统web对比"><a href="#4-2、小程序文件和传统web对比" class="headerlink" title="4-2、小程序文件和传统web对比"></a>4-2、小程序文件和传统web对比</h2><table>
<thead>
<tr>
<th>结构</th>
<th>小程序</th>
<th>传统web</th>
</tr>
</thead>
<tbody><tr>
<td>结构布局</td>
<td>Wxml</td>
<td>Html</td>
</tr>
<tr>
<td>样式</td>
<td>Wxss</td>
<td>Css</td>
</tr>
<tr>
<td>逻辑</td>
<td>JavaScript</td>
<td>JavaScript</td>
</tr>
<tr>
<td>配置</td>
<td>Json</td>
<td>无</td>
</tr>
</tbody></table>
<h1 id="五、小程序常见组件的学习"><a href="#五、小程序常见组件的学习" class="headerlink" title="五、小程序常见组件的学习"></a>五、小程序常见组件的学习</h1><h2 id="5-1、认识view组件"><a href="#5-1、认识view组件" class="headerlink" title="5-1、认识view组件"></a>5-1、认识view组件</h2><p>view组件：相当于一个盒子，可以用来装一些别的组件<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">https://developers.weixin.qq.com/miniprogram/dev/component/view.html</a></p>
<h2 id="5-2、认识text组件"><a href="#5-2、认识text组件" class="headerlink" title="5-2、认识text组件"></a>5-2、认识text组件</h2><p>text组件：主要用来显示文字的<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/text.html">https://developers.weixin.qq.com/miniprogram/dev/component/text.html</a></p>
<h2 id="5-3、认识input组件"><a href="#5-3、认识input组件" class="headerlink" title="5-3、认识input组件"></a>5-3、认识input组件</h2><p>input组件主要用来获取用户输入的信息的，一般在用户填写信息，提交数据，登录注册时会用到。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">https://developers.weixin.qq.com/miniprogram/dev/component/input.html</a></p>
<h2 id="5-4、认识button组件"><a href="#5-4、认识button组件" class="headerlink" title="5-4、认识button组件"></a>5-4、认识button组件</h2><p>button 组件：是按钮组件，自带默认的按钮效果，我们后面会经常用到<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html">https://developers.weixin.qq.com/miniprogram/dev/component/button.html</a></p>
<h1 id="六、函数和事件的学习"><a href="#六、函数和事件的学习" class="headerlink" title="六、函数和事件的学习"></a>六、函数和事件的学习</h1><h2 id="6-2、日志打印的学习"><a href="#6-2、日志打印的学习" class="headerlink" title="6-2、日志打印的学习"></a>6-2、日志打印的学习</h2><p>我们在学习点击事件之前，需要先学习日志(log)的打印，因为我们开发过程中会经常用到日志打印。日志打印的语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&quot;我的打印出来的日志内容&quot;)</span><br></pre></td></tr></table></figure>





<h2 id="6-3、函数的学习"><a href="#6-3、函数的学习" class="headerlink" title="6-3、函数的学习"></a>6-3、函数的学习</h2><p>函数的两种使用方式如下图：<br><img src="https://pic.imgdb.cn/item/63d68781face21e9ef452a89.png"></p>
<h2 id="6-4、点击事件的学习"><a href="#6-4、点击事件的学习" class="headerlink" title="6-4、点击事件的学习"></a>6-4、点击事件的学习</h2><p>我们如果想给一个组件定义点击事件，就要用到bindtap，我们给一个组件绑定点击事件的语法如下。<br><img src="https://pic.imgdb.cn/item/63d6878eface21e9ef4561a3.png"><br>我们给一个组件定义点击事件，主要是给组件定义一个 bindtap&#x3D;“事件名”，然后再js页面里定义和事件名一样的函数即可。视频里会作详细讲解</p>
<h2 id="6-5、获取用户输入信息"><a href="#6-5、获取用户输入信息" class="headerlink" title="6-5、获取用户输入信息"></a>6-5、获取用户输入信息</h2><p>我们获取用户输入会用到bindinput事件，其实我们在学习input组件时，官方有给出这个属性的。<a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">https://developers.weixin.qq.com/miniprogram/dev/component/input.html</a><br><img src="https://pic.imgdb.cn/item/63d687a8face21e9ef45c9f8.png"><br>看官方的文档，可以知道bindinput主要是为了获取用户的输入内容。<br>bindinput的定义如下图。<br><img src="https://pic.imgdb.cn/item/63d687bbface21e9ef4629b9.png"><br>在wxml里定义好bindinput事件以后，在js页面再定义一个和事件名一样的函数即可。视频里会作详细讲解。如果你有买老师的课程，或者购买老师的年卡，可以获取对应的学习视频。</p>
<h1 id="七、变量的学习"><a href="#七、变量的学习" class="headerlink" title="七、变量的学习"></a>七、变量的学习</h1><h2 id="7-1，什么是变量"><a href="#7-1，什么是变量" class="headerlink" title="7-1，什么是变量"></a>7-1，什么是变量</h2><p>用大白话讲：变量就是一个装东西的盒子<br>再通俗些讲：变量就是用于存放数据的容器，我们通过变量名获取对应的数据。<br><img src="https://img-blog.csdnimg.cn/20200820121937310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>如上图所示，我们的盒子(变量)可以装名字，布尔类型的true，还可以用来装数字。<br>变量的本质：就是在程序的内存中申请一块用来存放数据的空间。</p>
<h2 id="7-2、变量的组成"><a href="#7-2、变量的组成" class="headerlink" title="7-2、变量的组成"></a>7-2、变量的组成</h2><p>变量由变量名和存储的值组成，语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 7;</span><br><span class="line">var y = 8;</span><br><span class="line">var z = x + y; </span><br><span class="line"></span><br><span class="line">从上例中，您可知道x,y,z是三个不同的变量名：</span><br><span class="line">x 存储值 7</span><br><span class="line">y 存储值 8</span><br><span class="line">z 存储值 15</span><br></pre></td></tr></table></figure>



<h2 id="7-3、变量的命名规范"><a href="#7-3、变量的命名规范" class="headerlink" title="7-3、变量的命名规范"></a>7-3、变量的命名规范</h2><ul>
<li>名称可包含字母、数字、下划线和美元符号</li>
<li>名称必须以字母开头</li>
<li>名称对大小写敏感（y 和 Y 是不同的变量）</li>
<li>不能是关键字，保留字（比如 JavaScript 的关键词）</li>
<li>遵守驼峰命名法，首字母小写，后面的单词的首字母大写。如userName</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200820125958833.png" alt="img"></p>
<h2 id="7-4、全局变量和局部变量"><a href="#7-4、全局变量和局部变量" class="headerlink" title="7-4、全局变量和局部变量"></a>7-4、全局变量和局部变量</h2><p>局部变量：变量在函数内声明，只能在函数内部访问。<br>全局变量：变量在函数外定义，整个代码都可以调用的变量。<br><img src="https://img-blog.csdnimg.cn/20200820131221377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>如上图所示的局部变量和全局变量的定义。</p>
<h1 id="八、数据类型"><a href="#八、数据类型" class="headerlink" title="八、数据类型"></a>八、数据类型</h1><h2 id="8-1、认识数据类型"><a href="#8-1、认识数据类型" class="headerlink" title="8-1、认识数据类型"></a>8-1、认识数据类型</h2><p>上一节变量的学习，我们知道变量是用来装数据的盒子，可是数据有很多，有各种各样的类型。不同类型的数据占用的计算器内存也不一样。就好比胖子睡大床，瘦子睡小床就行。<br>在计算机中不同的数据占用的存储空间是不同的，为了便于区分，充分利用存储空间，于是就定义了不同的数据类型。<br>简单来说，数据类型就是数据的类别型号，比如“张三”是个人名，18是个数字</p>
<h2 id="8-2，常见的数据类型"><a href="#8-2，常见的数据类型" class="headerlink" title="8-2，常见的数据类型"></a>8-2，常见的数据类型</h2><p>我们的数据类型可以分成下面两大类</p>
<ul>
<li>简单数据类型(Number String Boolean Undefined Null)</li>
<li>复杂数据类型(Object)</li>
</ul>
<h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><table>
<thead>
<tr>
<th>简单数据类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>Number</td>
<td>数字型，包含整数和小数，如 18，18.8</td>
<td>0</td>
</tr>
<tr>
<td>String</td>
<td>字符串型，如“小石头”。注意js里字符串都要带引号</td>
<td>“”</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值类型，就true和false两个值，代表正确和错误</td>
<td>false</td>
</tr>
<tr>
<td>Undefined</td>
<td>Undefined 这个值表示变量不含有值,如var a;声明了变量a，但是没有赋值，就是undefined</td>
<td>undefined</td>
</tr>
<tr>
<td>Null</td>
<td>空值，如var a&#x3D;null,声明了变量a为空值</td>
<td>null</td>
</tr>
</tbody></table>
<h2 id="8-3、数字型Number"><a href="#8-3、数字型Number" class="headerlink" title="8-3、数字型Number"></a>8-3、数字型Number</h2><p>js数字类型的数据，既可以是整数，也可以是小数(浮点数)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var age=21	//整数</span><br><span class="line">var PI=3.1415	//小数</span><br></pre></td></tr></table></figure>



<h2 id="8-4、字符串String"><a href="#8-4、字符串String" class="headerlink" title="8-4、字符串String"></a>8-4、字符串String</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name=&quot;jelly&quot;	//字符串</span><br><span class="line">var age1=&quot;18&quot;		//字符串</span><br><span class="line">var age2=18		//数字型</span><br></pre></td></tr></table></figure>



<p>上面代码的age1和age2是有区别的，age1的18被双引号包裹着，所以是字符串，age2就是一个数字18，所以是数字型。这也进一步说明了，只要是被单引号或者双引号包裹着的都是字符串类型。</p>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过字符串的length属性可以获取整个字符串的长度。<br>还是拿羊肉串来类比，比如你一个羊肉串上串了5块羊肉，那么这个羊肉串的长度就是5。<br>使用的语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name=&quot;jelly&quot;</span><br><span class="line">console.log(name.length)	//这里的输出结果是5</span><br></pre></td></tr></table></figure>



<h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串+字符串&#x3D;拼接之后的新字符串。<br>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name=&quot;jelly&quot;</span><br><span class="line">var weixin=123455</span><br><span class="line">var test=name+weixin</span><br><span class="line">console.log(test) //输出结果：&quot;jelly123455&quot;</span><br><span class="line">console.log(12+12)//输出结果：24</span><br><span class="line">console.log(&quot;12&quot;+12)//输出结果：1212</span><br></pre></td></tr></table></figure>



<p>上面的12+12&#x3D;24，“12”+12&#x3D;“1212” 这就告诉我们字符串加任何类型的数据，拼接后的结果都是字符串。</p>
<h2 id="8-5、布尔型Boolean"><a href="#8-5、布尔型Boolean" class="headerlink" title="8-5、布尔型Boolean"></a>8-5、布尔型Boolean</h2><p>布尔类型有两个值：true和false，其中true表示真，false表示假。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var flag=true</span><br></pre></td></tr></table></figure>



<h2 id="8-6、Undefined和Null"><a href="#8-6、Undefined和Null" class="headerlink" title="8-6、Undefined和Null"></a>8-6、Undefined和Null</h2><p>一个声明后没有赋值的变量会有一个默认值 undefined<br>一个声明变量，并且赋值null，就代表这个变量是空值(学习object对象时，我们会继续研究null)<br>null 和 undefined 的值相等，但类型不同，下面的8-7会有代码演示</p>
<h2 id="8-7、typeof-操作符"><a href="#8-7、typeof-操作符" class="headerlink" title="8-7、typeof 操作符"></a>8-7、typeof 操作符</h2><p>typeof 操作符用来检测变量的数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typeof &quot;John&quot;                // 返回 string </span><br><span class="line">typeof 3.14                  // 返回 number</span><br><span class="line">typeof false                 // 返回 boolean</span><br></pre></td></tr></table></figure>



<p>打印null和undefined的数据类型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var aaa=undefined</span><br><span class="line">var bbb=null</span><br><span class="line">console.log(aaa==bbb)//输出结果：true</span><br><span class="line">console.log(typeof aaa)//输出结果：undefined</span><br><span class="line">console.log(typeof bbb)//输出结果：object</span><br></pre></td></tr></table></figure>



<p>注意：这里的 &#x3D;&#x3D; 用来判断值是否相等，后面会讲。<br>上面的代码可以看出：null 和 undefined 的值相等，但类型不同</p>
<h2 id="8-8、数据类型的转换"><a href="#8-8、数据类型的转换" class="headerlink" title="8-8、数据类型的转换"></a>8-8、数据类型的转换</h2><p>就是把一种数据类型的变量转换成另外一种数据类型，比如把字符串的 “18”转换为数字类型的18<br>常用的数据类型转换</p>
<ul>
<li>把其他类型转为字符串型</li>
<li>把其他类型转为数字型</li>
</ul>
<h3 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h3><table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>toString()</td>
<td>转为字符串</td>
<td>var num&#x3D;1  num.toString()</td>
</tr>
<tr>
<td>String()</td>
<td>转为字符串</td>
<td>var num&#x3D;1  String(num)</td>
</tr>
<tr>
<td>用加号拼接字符串</td>
<td>转为字符串</td>
<td>var num&#x3D;1  “”+num</td>
</tr>
</tbody></table>
<h3 id="转换为数字型（重点）"><a href="#转换为数字型（重点）" class="headerlink" title="转换为数字型（重点）"></a>转换为数字型（重点）</h3><table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>Number()</td>
<td>将字符串转换为数字</td>
<td>Number(“3.14”)   &#x2F;&#x2F; 返回 3.14</td>
</tr>
<tr>
<td>parseFloat()</td>
<td>解析一个字符串并返回一个浮点数</td>
<td>parseFloat(“3.12”) <a href="http://xn--3-pd0bu36o.12">&#x2F;&#x2F;返回3.12</a></td>
</tr>
<tr>
<td>parseInt()</td>
<td>解析一个字符串并返回一个整数</td>
<td>parseInt(“3.12”) &#x2F;&#x2F;返回3</td>
</tr>
</tbody></table>
<p>转为数字的几个特殊情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Number(&quot;&quot;))//空字符串转换为 0</span><br><span class="line">console.log(Number(true))//true转换为1</span><br><span class="line">console.log(Number(false))//false转换为0</span><br><span class="line">console.log(Number(&quot;编程小石头&quot;))//其他的字符串会转换为 NaN (不是个数字)</span><br></pre></td></tr></table></figure>



<h1 id="九、综合小案例"><a href="#九、综合小案例" class="headerlink" title="九、综合小案例"></a>九、综合小案例</h1><h2 id="9-1、数据绑定"><a href="#9-1、数据绑定" class="headerlink" title="9-1、数据绑定"></a>9-1、数据绑定</h2><p>在学习这个综合案例之前，我们需要先学习下小程序的动态数据绑定。数据绑定的语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view&gt; &#123;&#123;message&#125;&#125; &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// js里如下</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#x27;我是动态绑定的数据&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="9-2、效果图预览"><a href="#9-2、效果图预览" class="headerlink" title="9-2、效果图预览"></a>9-2、效果图预览</h2><p>上一节和大家讲解了小程序的一些常用组件，这节就带大家写出自己的第一个简单计算器。做一个综合性的练习。由于是入门，这里先教大家简单的加法运算。效果图如下<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjczNzEzLTJmMmM3M2UxNzc3NmM4ZmIucG5n?x-oss-process=image/format,png" alt="img"><br>实现起来特别简单，代码也特别少，就下面三个</p>
<ul>
<li>index.wxml：上图的布局视图页</li>
<li>index.js：实现加法逻辑的页面</li>
<li>app.json：一些全局的配置。基本是都是默认的这里不用管<br>下面就带带大家敲出属于自己的计算器小程序代码。</li>
</ul>
<h2 id="9-3、先看index-wxml"><a href="#9-3、先看index-wxml" class="headerlink" title="9-3、先看index.wxml"></a>9-3、先看index.wxml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--index.wxml  --&gt;</span><br><span class="line">&lt;input placeholder=&quot;请输入数字a&quot; bindinput=&quot;inputa&quot; /&gt;</span><br><span class="line">&lt;text&gt;+&lt;/text&gt;</span><br><span class="line">&lt;input placeholder=&quot;请输入数字b&quot; bindinput=&quot;inputb&quot; /&gt;</span><br><span class="line">&lt;button bindtap=&#x27;sum&#x27;&gt;计算&lt;/button&gt;</span><br><span class="line">&lt;text&gt;结果为：&#123;&#123;result&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;input placeholder=&quot;请输入数字a&quot; bindinput=&quot;inputa&quot; /&gt; </span><br><span class="line">&lt;input placeholder=&quot;请输入数字b&quot; bindinput=&quot;inputb&quot; /&gt;</span><br></pre></td></tr></table></figure>



<p>就是我们输入数字a的输入框，这里input就是我们认识的第一个小程序组件。<br>input的官方简介如下：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">https://developers.weixin.qq.com/miniprogram/dev/component/input.html</a><br>placeholder：设置默认显示文字（当我们输入文字时，默认的就没有了）<br>bindinput&#x3D;”inputa”：定义一个inputa方法来获取input的输入内容。在index.js中会用到</p>
<ul>
<li><ul>
<li>这里的组件是用来显示文本的这里我们只是为了显示一个 + 号</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&#x27;sum&#x27;&gt;计算&lt;/button&gt;</span><br></pre></td></tr></table></figure>



<p>这里是个按钮就是我们的计算按钮<br>bindtap&#x3D;’sum’：定义个叫sum的方法，用来计算结果在index.js中会用到</p>
<ul>
<li>结果为：  这种写法，是小程序用来绑定数据用的，这里用来显示我们的计算结果用的，</li>
</ul>
<h4 id="上面代码和对应的显示如下："><a href="#上面代码和对应的显示如下：" class="headerlink" title="上面代码和对应的显示如下："></a>上面代码和对应的显示如下：</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjczNzEzLWNiMzY1MzI2MGQzNWQ4MzcuanBn?x-oss-process=image/format,png" alt="img"></p>
<h2 id="9-4、再来看index-js，我们加法的逻辑实现"><a href="#9-4、再来看index-js，我们加法的逻辑实现" class="headerlink" title="9-4、再来看index.js，我们加法的逻辑实现"></a>9-4、再来看index.js，我们加法的逻辑实现</h2><p>可以看到我们在index.wxml里定义的bindinput&#x3D;”inputa”，bindtap&#x3D;’sum’在下面有用到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  /**</span><br><span class="line">     * 页面的初始数据</span><br><span class="line">     * 初始化两个输入值</span><br><span class="line">     */</span><br><span class="line">  data: &#123;</span><br><span class="line">    input1: 0,</span><br><span class="line">    input2: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  //获取用户输入的值a</span><br><span class="line">  inputa: function (e) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      input1: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  //获取用户输入的值b</span><br><span class="line">  inputb: function (e) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      input2: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 拿到两个输入值以后求和</span><br><span class="line">  sum: function (e) &#123;</span><br><span class="line">    var a = parseInt(this.data.input1);</span><br><span class="line">    var b = parseInt(this.data.input2);</span><br><span class="line">    // 求和</span><br><span class="line">    var sumResult = a + b</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      // 把结果赋值到sum标签上</span><br><span class="line">      result: sumResult</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="十、运算符"><a href="#十、运算符" class="headerlink" title="十、运算符"></a>十、运算符</h1><p>运算符也被称为操作符，是用于实现赋值，比较和运算等功能的符号。</p>
<h2 id="10-1、算数运算符"><a href="#10-1、算数运算符" class="headerlink" title="10-1、算数运算符"></a>10-1、算数运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
<th>x 运算结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
<td>x&#x3D;5+2</td>
<td>7</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>x&#x3D;5-2</td>
<td>3</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>x&#x3D;5*2</td>
<td>10</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法</td>
<td>x&#x3D;5&#x2F;2</td>
<td>2.5</td>
</tr>
<tr>
<td>%</td>
<td>取模（余数）</td>
<td>x&#x3D;5%2</td>
<td>1</td>
</tr>
</tbody></table>
<h2 id="10-2、表达式和返回值"><a href="#10-2、表达式和返回值" class="headerlink" title="10-2、表达式和返回值"></a>10-2、表达式和返回值</h2><p>表达式：是由数字，运算符，变量等以能求得结果的有意义的操作组成的式子。<br>表达式最终都会有一个结果返回给我们，这个返回结果我们称之为返回值</p>
<ul>
<li>如  let x&#x3D;1+1<br>这里的1+1就是由数字和加号组成的表达式，然会返回结果2赋值给x，那么x的值就是2。通俗的讲就是先把右边的表达式计算完毕然后把值返回给左边的x。</li>
</ul>
<h2 id="10-3、比较运算符"><a href="#10-3、比较运算符" class="headerlink" title="10-3、比较运算符"></a>10-3、比较运算符</h2><p>比较运算符是两个数据进行比较时所使用的运算符，比较运算以后会返回一个布尔值的结果，就是返回对或者错(true或false)</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>案例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>小于号</td>
<td>1&lt;2</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td>1&gt;2</td>
<td>false</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于号(大于或等于)</td>
<td>1&gt;&#x3D;2</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于号(小于或等于)</td>
<td>1&lt;&#x3D;2</td>
<td>true</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>判等号(判断是否相等)</td>
<td>1&#x3D;&#x3D;1</td>
<td>true</td>
</tr>
<tr>
<td>&#x3D;&#x3D;&#x3D;</td>
<td>绝对等于（值和类型均相等）</td>
<td>1&#x3D;&#x3D;&#x3D;’1’</td>
<td>false</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不等于</td>
<td>1!&#x3D;1</td>
<td>false</td>
</tr>
</tbody></table>
<h2 id="10-4、赋值运算符"><a href="#10-4、赋值运算符" class="headerlink" title="10-4、赋值运算符"></a>10-4、赋值运算符</h2><p>赋值运算符向 JavaScript 变量赋值。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>例子</th>
<th>等同于</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>x &#x3D; y</td>
<td>x &#x3D; y</td>
<td></td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>x +&#x3D; y</td>
<td>x &#x3D; x + y</td>
<td></td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>x -&#x3D; y</td>
<td>x &#x3D; x - y</td>
<td></td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>x *&#x3D; y</td>
<td>x &#x3D; x * y</td>
<td></td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>x &#x2F;&#x3D; y</td>
<td>x &#x3D; x &#x2F; y</td>
<td></td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>x %&#x3D; y</td>
<td>x &#x3D; x % y</td>
<td></td>
</tr>
</tbody></table>
<p>&#x3D;的小结</p>
<ul>
<li>&#x3D;：赋值，把右边赋值给左边  如a&#x3D;b</li>
<li>&#x3D;&#x3D;:判断，判断两边的值是否相等 如 a &#x3D;&#x3D;b</li>
<li>&#x3D;&#x3D;&#x3D; :全等，判断两边的值和数据类型是否完全相等 如 a  &#x3D;&#x3D;&#x3D;  b</li>
</ul>
<h2 id="10-5、逻辑运算符"><a href="#10-5、逻辑运算符" class="headerlink" title="10-5、逻辑运算符"></a>10-5、逻辑运算符</h2><p>用于多个条件的判断,其返回值是布尔值。</p>
<ul>
<li>&amp;&amp;	 逻辑与，两个条件都要满足,两侧都是true结果才为true</li>
<li>||	逻辑或,两个条件只需要满足一个即可，有一侧是真结果就真</li>
<li>!	 逻辑非 not，逻辑取反，如true的相反值是false</li>
</ul>
<h2 id="10-6、递增和递减运算符"><a href="#10-6、递增和递减运算符" class="headerlink" title="10-6、递增和递减运算符"></a>10-6、递增和递减运算符</h2><p>递增和递减运算符概述：如果需要反复的给数字变量加或减去1，可以使用递增() 和递减(–)运算符来完成。<br>在js里递增() 和递减(–)既可以放在变量前面，也可以放在变量后面，放在前面时称为前置递增或递减运算符，放在后面时称为后置递增或递减运算符。<br>注意：递增或者递减只能操作变量，不能直接操作数字。</p>
<h3 id="10-6-1、前置递增递减运算符"><a href="#10-6-1、前置递增递减运算符" class="headerlink" title="10-6-1、前置递增递减运算符"></a>10-6-1、前置递增递减运算符</h3><p>注意：前置递增或递减时，是先自加或自减，然后返回值<br>我们之前想要一个变量加1写法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num=1</span><br><span class="line">num=num+1 //这里就是给num加1</span><br></pre></td></tr></table></figure>



<p>我们有没有方便的写法呢，上面的num&#x3D;num+1，可以直接写成 ++num，这样是不是更简洁。</p>
<h3 id="10-6-2、后置递增递减运算符"><a href="#10-6-2、后置递增递减运算符" class="headerlink" title="10-6-2、后置递增递减运算符"></a>10-6-2、后置递增递减运算符</h3><p>注意：后置递增或递减时，先返回值，然后自加或自减</p>
<h3 id="10-6-3、前置和后置的区别"><a href="#10-6-3、前置和后置的区别" class="headerlink" title="10-6-3、前置和后置的区别"></a>10-6-3、前置和后置的区别</h3><ul>
<li>前置和后置如果单独使用，效果是一样的</li>
<li>前置是先自加或自减，然后返回值；后置先返回值，然后自加或自减</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num=10</span><br><span class="line">console.log(++num  +10)//结果是21</span><br><span class="line">console.log(num++  +10)//结果是20</span><br></pre></td></tr></table></figure>



<p>我们通过下面几个小例子来强化理解下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a=10</span><br><span class="line">++a</span><br><span class="line">console.log(b)//这里b的结果是几</span><br><span class="line"></span><br><span class="line">var c=10</span><br><span class="line">c++</span><br><span class="line">var d=c++ +2</span><br><span class="line">console.log(d)//这里d的结果是几</span><br><span class="line"></span><br><span class="line">var e=10</span><br><span class="line">var f=e++ + ++e</span><br><span class="line">console.log(f)//这里f的结果是几</span><br></pre></td></tr></table></figure>



<h3 id="10-6-4、前置和后置递增递减的小结"><a href="#10-6-4、前置和后置递增递减的小结" class="headerlink" title="10-6-4、前置和后置递增递减的小结"></a>10-6-4、前置和后置递增递减的小结</h3><ul>
<li>前置和后置的主要目的是为了简化代码编写</li>
<li>单独使用递增或递减时，前置和后置效果一样</li>
<li>与其他运算连用时，执行结果会不同<br>后置：先返回原值，后自加（先人后己）<br>前置：先自加，后返回值(先己后人)<br>可以总结为：前置自私，后置无私</li>
<li>开发时，大多使用后置递增&#x2F;减。例如 num++或num- -</li>
</ul>
<h1 id="十一、条件语句和循环语句"><a href="#十一、条件语句和循环语句" class="headerlink" title="十一、条件语句和循环语句"></a>十一、条件语句和循环语句</h1><h2 id="11-1、流程控制"><a href="#11-1、流程控制" class="headerlink" title="11-1、流程控制"></a>11-1、流程控制</h2><p>在学习条件语句河循环语句之前，我们要先知道什么是流程控制，<br><strong>流程控制：</strong>流程控制就是来控制我们的代码按照什么顺序来执行的语句。<br>流程控制主要有三种结构</p>
<ul>
<li>顺序结构</li>
<li>分支结构</li>
<li>循环结构<br><img src="https://img-blog.csdnimg.cn/20201106153524611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>顺序结构是程序中最简单，最基础的流程控制，就是代码按照先后顺序依次执行。我们重点是讲解分支结构和循环结构。</li>
</ul>
<h2 id="11-2、分支结构"><a href="#11-2、分支结构" class="headerlink" title="11-2、分支结构"></a>11-2、分支结构</h2><p><strong>常用的分支结构的语句:</strong></p>
<ul>
<li>if语句</li>
<li>switch语句</li>
</ul>
<p><strong>条件语句:</strong> 用于基于不同条件执行不同的动作,通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。<br><img src="https://img-blog.csdnimg.cn/20201106154332325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>举个最简单的例子：你满18岁就可以去网吧，不满18岁就不允许进网吧。这里的判断条件就是你的年纪。<br>我们这里常用的就是if条件语句，所以接下来我们会重点讲解下if条件语句。</p>
<h2 id="11-3、if条件语句"><a href="#11-3、if条件语句" class="headerlink" title="11-3、if条件语句"></a>11-3、if条件语句</h2><p>在 JavaScript 中，我们可使用以下条件语句：</p>
<ul>
<li>if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码</li>
<li>if…else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</li>
<li>if…else if….else 语句- 使用该语句来选择多个代码块之一来执行</li>
</ul>
<h3 id="11-3-1、if-语句"><a href="#11-3-1、if-语句" class="headerlink" title="11-3-1、if 语句"></a>11-3-1、if 语句</h3><p>使用 if 语句来规定假如条件为 true 时被执行的 JavaScript 代码块。</p>
<ul>
<li>语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (条件) &#123;</span><br><span class="line">    如果条件为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>实例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (age&lt; 18) &#123;</span><br><span class="line">   console.log(&quot;未成年&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果年龄小于18岁，就输出未成年</p>
<h3 id="11-3-2、if-else-双分支语句"><a href="#11-3-2、if-else-双分支语句" class="headerlink" title="11-3-2、if else 双分支语句"></a>11-3-2、if else 双分支语句</h3><p>使用 else 语句来规定假如条件为 false 时的代码块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (条件) &#123;</span><br><span class="line">    条件为 true 时执行的代码块</span><br><span class="line">&#125; else &#123; </span><br><span class="line">    条件为 false 时执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>实例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (age &lt; 18) &#123;</span><br><span class="line">     console.log(&quot;未成年&quot;)</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">    console.log(&quot;成年&quot;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>如果年龄小于18岁，就输出未成年，否则就输出成年</p>
<h3 id="11-3-3、if-else-if-多分支语句"><a href="#11-3-3、if-else-if-多分支语句" class="headerlink" title="11-3-3、if else if 多分支语句"></a>11-3-3、if else if 多分支语句</h3><p>使用 else if 来规定当首个条件为 false 时的新条件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line">if (条件 1) &#123;</span><br><span class="line">    条件 1 为 true 时执行的代码块</span><br><span class="line">&#125; else if (条件 2) &#123;</span><br><span class="line">    条件 1 为 false 而条件 2 为 true 时执行的代码块</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">    条件 1 和条件 2 同时为 false 时执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>实例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (age &lt; 18) &#123;</span><br><span class="line">     console.log(&quot;未成年&quot;)</span><br><span class="line"> &#125; else if(age&lt;60) &#123;</span><br><span class="line">    console.log(&quot;成年&quot;)</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">    console.log(&quot;老年&quot;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>如果年龄小于18岁，就输出未成年，年龄大于18岁小于60岁就输出成年，年龄大于60岁就输出老年。</p>
<h2 id="11-4-、wxml条件渲染"><a href="#11-4-、wxml条件渲染" class="headerlink" title="11-4 、wxml条件渲染"></a>11-4 、wxml条件渲染</h2><p>在wxml中，使用 wx:if&#x3D;”” 来判断是否需要渲染该代码块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;&gt; 我是可以显示的&lt;/view&gt;</span><br></pre></td></tr></table></figure>



<p>也可以用 wx:elif 和 wx:else 来添加一个 else 块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;&gt; 1 &lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;length &gt; 2&#125;&#125;&quot;&gt; 2 &lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt; 3 &lt;/view&gt;</span><br></pre></td></tr></table></figure>



<p>可以看出wxml里的条件渲染和我们上面讲的if条件语句类似，只是写法上稍微有些区别。<br>wxml里的条件渲染主要用来做页面展示和隐藏使用的。</p>
<h2 id="11-5、for循环语句"><a href="#11-5、for循环语句" class="headerlink" title="11-5、for循环语句"></a>11-5、for循环语句</h2><p>如果您希望一遍又一遍地运行相同的代码，并且每次的值都不同，那么使用循环是很方便的。<br>比如我们想输出5次</p>
<ul>
<li>一般写法</li>
</ul>
<p>console.log(“jelly”)</p>
<p>console.log(“jelly”)</p>
<p>console.log(“jelly”)</p>
<p>console.log(“jelly”)</p>
<p>console.log(“jelly”)</p>
<ul>
<li>使用for循环</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i=0;i&lt;5;i++)&#123; </span><br><span class="line">  console.log(&quot;jelly&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="for-循环的语法："><a href="#for-循环的语法：" class="headerlink" title="for 循环的语法："></a>for 循环的语法：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (初始化变量; 条件表达式; 操作表达式)&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>初始化变量：开始前第一个执行，通常用于初始化计数器变量，只执行一次。</li>
<li>条件表达式：就是用来决定每一次循环是否可以继续执行， 定义运行循环的终止条件</li>
<li>操作表达式：在大括号里的代码块已被执行之后执行，通常用于对我们的计数器变量进行递增或者递减操作。</li>
</ul>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i=0;i&lt;5;i++)&#123; </span><br><span class="line">  console.log(&quot;jelly&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上面实例中<br>语句1：var i&#x3D;0 是在开始执行前初始化变量i<br>语句2:i&lt;5 是用来判断i是否小于5，如果小于5就继续执行循环<br>语句3：i++ 是在每次循环执行一遍后对i进行加1的操作</p>
<h2 id="11-6、wxml列表渲染"><a href="#11-6、wxml列表渲染" class="headerlink" title="11-6、wxml列表渲染"></a>11-6、wxml列表渲染</h2><p>在wxml里我们使用wx:for来显示列表数据。<br>在组件上使用 wx:for 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。<br>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>



<p>在js里定义的列表数据如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [&#123;</span><br><span class="line">      name: &#x27;jelly&#x27;,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: &#x27;GD&#x27;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="11-7、continue和break的学习"><a href="#11-7、continue和break的学习" class="headerlink" title="11-7、continue和break的学习"></a>11-7、continue和break的学习</h2><p>continue和break都是用来终止循环的，区别在于</p>
<ul>
<li>continue：是终止循环中的某一次，继续执行后面的循环</li>
<li>beak: 直接终止整个循环执行，整个循环不在执行</li>
</ul>
<h1 id="十二、数组的学习"><a href="#十二、数组的学习" class="headerlink" title="十二、数组的学习"></a>十二、数组的学习</h1><h2 id="12-1、数组的概念"><a href="#12-1、数组的概念" class="headerlink" title="12-1、数组的概念"></a>12-1、数组的概念</h2><p>数组就是一组数据的集合，可以把更多的数据存储在单个变量下。<br>数组里面可以存储各种类型的数据。<br>如：  var names&#x3D;[‘jelly’,16,true]</p>
<h2 id="12-2、创建数组的两种方式"><a href="#12-2、创建数组的两种方式" class="headerlink" title="12-2、创建数组的两种方式"></a>12-2、创建数组的两种方式</h2><ul>
<li>1、使用new创建数组(不常用)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var names=new Array(); </span><br><span class="line">names[0]=&quot;jelly&quot;;       </span><br><span class="line">names[1]=&quot;刘德华&quot;;</span><br><span class="line">names[2]=&quot;周杰伦&quot;;</span><br></pre></td></tr></table></figure>



<ul>
<li>2、利用数组字面量创建数组(常用)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var names=[&#x27;jelly&#x27;,&#x27;刘德华&#x27;,&#x27;周杰伦&#x27;]</span><br></pre></td></tr></table></figure>



<p>明显看到第二种创建数组的方式比第一种更简洁，所以以后我们创建数组就用第二种方式</p>
<h2 id="12-3、获取数组元素"><a href="#12-3、获取数组元素" class="headerlink" title="12-3、获取数组元素"></a>12-3、获取数组元素</h2><p>我们获取数组元素是通过数组下标来获取的，下标也叫做索引，数组的下标是从0开始的。<br>数组可以通过下标来访问，设置，修改对应的元素值。我们可以通过<br>数组名[下标] 的方式来获取数据中的元素。<br>如 names[0]就可以获取names数组里的第一个元素‘jelly’</p>
<h2 id="12-5、求数组中的最大值"><a href="#12-5、求数组中的最大值" class="headerlink" title="12-5、求数组中的最大值"></a>12-5、求数组中的最大值</h2><p>var nums&#x3D;[1,2,3,4] 这个数组我们很明显就可以看出来4是数组里的最大值，但是如果我们数组里的元素有很多，这个时候你就未必能很快的找出来最大值了，所以我们要想求数组里的最大值，要让代码去实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var nums = [1, 2, 3, 4, 5]</span><br><span class="line">var max = nums[0]</span><br><span class="line">for (var i = 1; i &lt; nums.length; i++) &#123;</span><br><span class="line">  if (max &lt; nums[i]) &#123;</span><br><span class="line">    max = nums[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;最大值&#x27;, max)  //可以得出最大值是5</span><br></pre></td></tr></table></figure>



<h2 id="12-5、给数组添加新元素"><a href="#12-5、给数组添加新元素" class="headerlink" title="12-5、给数组添加新元素"></a>12-5、给数组添加新元素</h2><p>push() 方法可向数组的末尾添加一个或多个元素，所以我们一般给数组追加元素的时候，直接使用push方法就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var nums = [1, 2, 3, 4, 5]</span><br><span class="line">nums.push(6)</span><br><span class="line">nums.push(7, 8)</span><br><span class="line">console.log(nums) //追加新元素后的数组  [1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>



<h2 id="12-6、删除数组中的指定元素"><a href="#12-6、删除数组中的指定元素" class="headerlink" title="12-6、删除数组中的指定元素"></a>12-6、删除数组中的指定元素</h2><p>如我们想把数组中的指定元素删除掉，可以用一个新的数组来接受符合要求的元素，不符合要求的元素不接收，这样就可以实现删除数组元素的效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 把元素5删除</span><br><span class="line">   var nums = [1, 2, 3, 4, 5]</span><br><span class="line">   //1,定义一个新数组</span><br><span class="line">   var newNums = []</span><br><span class="line">   //2，遍历旧数组</span><br><span class="line">   for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">     //3,把符合要求的元素添加到新的数组里</span><br><span class="line">     if (nums[i] !== 5) &#123;</span><br><span class="line">       newNums.push(nums[i])</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(newNums) //删除成功 [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>



<h1 id="十三、对象的学习"><a href="#十三、对象的学习" class="headerlink" title="十三、对象的学习"></a>十三、对象的学习</h1><h2 id="13-1、什么是对象"><a href="#13-1、什么是对象" class="headerlink" title="13-1、什么是对象"></a>13-1、什么是对象</h2><p>对象只是一种特殊的数据。对象是一组无序的相关属性和方法组成。这里重点要记住属性和方法这两个新概念</p>
<ul>
<li>属性：事物的特征，对象里的属性就是用来表现该对象具备哪些特征</li>
<li>方法：事物的行为，对象里方法就是用来表示该对象具备哪些行为。</li>
</ul>
<p>例如：<br>哥具备姓名，年龄，身高，体重等属性<br>哥具备写代码，唱歌，骑车，跑步，吃饭等行为。</p>
<ul>
<li>手机具备下面的属性和方法<br><img src="https://img-blog.csdnimg.cn/20201208165824376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h2 id="13-2、为什么需要对象"><a href="#13-2、为什么需要对象" class="headerlink" title="13-2、为什么需要对象"></a>13-2、为什么需要对象</h2><p>保存一个数据时，可以用变量，保存多个数据时可以用数组。但是我如果想保存一个完整的立体的信息时呢。</p>
<ul>
<li>比如保存jelly的完整信息。<br>如果我们用数组来表示就是<br>var shitouge&#x3D;[‘jelly’,’男’,’128’,’188’]<br>这样我虽然把jelly的完整信息保存到了数组里，也可以大致猜出来哪些数据代表什么意思，但是后面的128和188是什么意思呢？？？</li>
</ul>
<p>但是我们如果用对象来保存这些信息呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">姓名:&#x27;jelly&#x27;,</span><br><span class="line">性别:&#x27;男&#x27;</span><br><span class="line">体重:128</span><br><span class="line">身高:188</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上面的{}里包裹的就是我们对象的一些属性。只不过我们的属性名不提倡用汉字，应该用英文或者拼音，我这里方便大家理解才这样写的。</p>
<h2 id="13-3、创建对象的三种方式"><a href="#13-3、创建对象的三种方式" class="headerlink" title="13-3、创建对象的三种方式"></a>13-3、创建对象的三种方式</h2><ul>
<li>利用字面量创建对象</li>
<li>利用new Object创建对象</li>
<li>利用构造函数创建对象</li>
</ul>
<h3 id="13-3-1、利用字面量创建对象"><a href="#13-3-1、利用字面量创建对象" class="headerlink" title="13-3-1、利用字面量创建对象"></a>13-3-1、利用字面量创建对象</h3><p>语法如下<br>var 对象名&#x3D;{<br>属性名：属性值，<br>属性名：属性值，<br>方法名：function(){}<br>}</p>
<p>示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var Person = &#123;</span><br><span class="line"> name:&#x27;jelly&#x27;,</span><br><span class="line"> age:18,</span><br><span class="line"> code:function()&#123;console.log(&#x27;jelly好好看&#x27;)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="13-3-2、利用new-Object创建对象"><a href="#13-3-2、利用new-Object创建对象" class="headerlink" title="13-3-2、利用new Object创建对象"></a>13-3-2、利用new Object创建对象</h3><p>语法：<br>var obj &#x3D; new Object();<br>obj.name&#x3D;’jelly’<br>obj.age&#x3D;18<br>我们这里就是先用 new Object()创建一个空对象，然后通过.属性名给这个空对象添加属性和方法</p>
<h3 id="13-3-3、利用构造函数创建对象"><a href="#13-3-3、利用构造函数创建对象" class="headerlink" title="13-3-3、利用构造函数创建对象"></a>13-3-3、利用构造函数创建对象</h3><p>构造函数是一种特殊的函数，主要用来初始化对象，它总是和new运算符一起使用，我们可以把对象里的一些公共属性和方法抽取出来，然后封装到这个函数里，方便批量创建对象。</p>
<p>使用构造函数创建对象时要注意下面几点</p>
<ul>
<li>1，构造函数名字的首字母习惯大写</li>
<li>2，构造函数里不需要return就可以返回结果</li>
<li>3，调用构造函数创建对象时，必须用new</li>
<li>4，我们的属性和方法前面必须添加this</li>
</ul>
<p>完整实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(name, age) &#123;//创建构造函数Person</span><br><span class="line">     this.name = name;</span><br><span class="line">     this.age = age;</span><br><span class="line">     this.action = function (jineng) &#123;</span><br><span class="line">       console.log(name + &quot;具备&quot; + jineng + &#x27;的技能&#x27;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   //创建对象1</span><br><span class="line">   var obj1 = new Person(&#x27;jelly&#x27;, 18)</span><br><span class="line">   console.log(obj1.name)//jelly</span><br><span class="line">   obj1.action(&#x27;写代码&#x27;)//jelly具备写代码的技能</span><br><span class="line">    //创建对象2</span><br><span class="line">   var obj2 = new Person(&#x27;周杰伦&#x27;, 41)</span><br><span class="line">   console.log(obj2.name)//周杰伦</span><br><span class="line">   obj2.action(&#x27;唱歌&#x27;)//周杰伦具备唱歌的技能</span><br></pre></td></tr></table></figure>



<p>构造函数和对象<br><img src="https://img-blog.csdnimg.cn/20201208174939302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们这里的构造函数就好比汽车的设计图纸，汽车具备哪些属性，拥有哪些方法，已经提前在图纸上设计好了，我们只需要根据图纸new出来一个对象，比如可以new出来一个宝马车，也可以new出来一辆兰博基尼。</p>
<h3 id="13-3-4、new关键字执行过程"><a href="#13-3-4、new关键字执行过程" class="headerlink" title="13-3-4、new关键字执行过程"></a>13-3-4、new关键字执行过程</h3><p>如上面我们通过构造函数new一个对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(name, age) &#123;//创建构造函数Person</span><br><span class="line">     this.name = name;</span><br><span class="line">     this.age = age;</span><br><span class="line">     this.action = function (jineng) &#123;</span><br><span class="line">       console.log(name + &quot;具备&quot; + jineng + &#x27;的技能&#x27;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   //创建对象1</span><br><span class="line">   var obj1 = new Person(&#x27;jelly&#x27;, 18)</span><br></pre></td></tr></table></figure>



<p>这里在new一个对象出来时会执行下面四件事</p>
<ul>
<li>1，在电脑内存中创建一个空对象</li>
<li>2，让this指向这个新的对象</li>
<li>3，执行构造函数里的代码，给这个新对象添加属性和方法</li>
<li>4，返回这个新对象如上面的obj1就是我们创建的新对象</li>
</ul>
<h3 id="13-3-5、变量，属性，函数，方法总结"><a href="#13-3-5、变量，属性，函数，方法总结" class="headerlink" title="13-3-5、变量，属性，函数，方法总结"></a>13-3-5、变量，属性，函数，方法总结</h3><p>属性和变量:</p>
<ul>
<li>相同点：<br>都是用来存储数据的。</li>
<li>不同点：<br>变量单独声明并赋值，使用的时候直接使用变量名就可以；<br>属性在对象里面的，不需要声明，使用的时候要用：对象.属性名。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var dog = &#123;</span><br><span class="line">    //属性</span><br><span class="line">    name:&#x27;可可&#x27;，</span><br><span class="line">    age：&#x27;12&#x27;</span><br><span class="line">&#125; </span><br><span class="line">//变量</span><br><span class="line">var num = 12;</span><br><span class="line"></span><br><span class="line">//调用变量：(直接使用变量名进行调用)</span><br><span class="line">console.log(num); </span><br><span class="line">//调用属性：(对象名.属性名)</span><br><span class="line">console.log(dog.name);</span><br></pre></td></tr></table></figure>



<p>函数和方法：</p>
<ul>
<li>相同点：<br>都是实现某种功能。</li>
<li>不同点：<br>函数是单独声明并且调用的，调用方法：函数名()<br>方法存在于对象里面。调用方法：对象名.方法()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var dog = &#123;</span><br><span class="line">    name:&#x27;可可&#x27;，</span><br><span class="line">    age：&#x27;12&#x27;，</span><br><span class="line">    //方法</span><br><span class="line">    skill：function()&#123;</span><br><span class="line">        console.log(&#x27;汪汪汪&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//函数</span><br><span class="line">function skillDemo()&#123;</span><br><span class="line">    console.log(&quot;睡觉&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用函数：(直接使用:函数名(),进行调用)</span><br><span class="line">skillDemo();</span><br><span class="line">//调用方法：(--对象名.方法名()--)</span><br><span class="line">console.log(dog.skill());</span><br></pre></td></tr></table></figure>



<h2 id="13-4、对象的使用"><a href="#13-4、对象的使用" class="headerlink" title="13-4、对象的使用"></a>13-4、对象的使用</h2><h3 id="13-4-1、访问对象的属性"><a href="#13-4-1、访问对象的属性" class="headerlink" title="13-4-1、访问对象的属性"></a>13-4-1、访问对象的属性</h3><p>对象属性的调用语法有两种</p>
<ul>
<li>对象名.属性名</li>
<li>对象名[‘属性名’]</li>
</ul>
<p>如我们对象如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"> name:&#x27;jelly&#x27;,</span><br><span class="line"> age:18,</span><br><span class="line"> code:function()&#123;console.log(&#x27;jelly好好看&#x27;)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>调用name属性就是  obj.name<br>这里obj就是我们的对象，name就是我们的对象的属性，obj.name里的.就相当于 的 翻译过来就是obj的name<br>另外一种调用属性的方式就是 obj[‘name’]</p>
<h3 id="13-4-2、访问对象的方法"><a href="#13-4-2、访问对象的方法" class="headerlink" title="13-4-2、访问对象的方法"></a>13-4-2、访问对象的方法</h3><p>对象中方法的调用就一种方式：对象名.方法名() 这里的这对小括号是必不可少的。<br>如我们对象如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"> name:&#x27;编程小石头&#x27;,</span><br><span class="line"> age:18,</span><br><span class="line"> code:function()&#123;console.log(&#x27;jelly好好看&#x27;)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>obj.code() 就是直接调用obj里的code方法</p>
<h1 id="十四、内置对象的学习"><a href="#十四、内置对象的学习" class="headerlink" title="十四、内置对象的学习"></a>十四、内置对象的学习</h1><h2 id="14-1、什么是内置对象"><a href="#14-1、什么是内置对象" class="headerlink" title="14-1、什么是内置对象"></a>14-1、什么是内置对象</h2><p>内置对象就是指Javascript自带的一些对象，供开发者使用，这些对象提供了一些常用的的功能。开发者可以很方便的使用这些内置对象，而不用关心这些内置对象的实现原理。<br>就好比我们使用手机内置的发短信，打电话功能，我们用的时候可以很方便的快速使用，而不用关心打电话的实现原理。这就是我们使用内置对象的原因，主要就是为了快速方便的使用内置对象的</p>
<p>常见的内置对象有Math、Array、Date等</p>
<h2 id="14-2、查阅文档的学习"><a href="#14-2、查阅文档的学习" class="headerlink" title="14-2、查阅文档的学习"></a>14-2、查阅文档的学习</h2><p>因为内置对象的方法太多了，我们不可能把所有的方法都记下来，所以我门就需要时不时的查阅文档，就好比我们查字典一样。<br>常用的学习文档有下面几个</p>
<ul>
<li>MDN<br>官方地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></li>
<li>W3cschool<br><a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a></li>
<li>菜鸟教程<br><a href="https://www.runoob.com/js/js-tutorial.html">https://www.runoob.com/js/js-tutorial.html</a></li>
</ul>
<h2 id="14-3、Math对象的学习"><a href="#14-3、Math对象的学习" class="headerlink" title="14-3、Math对象的学习"></a>14-3、Math对象的学习</h2><p>与其他内置对象不同的是，Math 不是一个构造器对象。Math 的所有属性与方法都是静态的。引用圆周率的写法是 Math.PI，调用正余弦函数的写法是 Math.sin(x)，x 是要传入的参数。也就是说我们的Math可以直接通过Math. 来调用他的属性和方法</p>
<p>由于Math对象的方法比较多，我这里只把开发过程中常用的一些方法做下讲解</p>
<h3 id="14-3-1、Math常用的属性"><a href="#14-3-1、Math常用的属性" class="headerlink" title="14-3-1、Math常用的属性"></a>14-3-1、Math常用的属性</h3><ul>
<li>Math.PI<br>圆周率，一个圆的周长和直径之比，约等于 3.14159</li>
</ul>
<h3 id="14-3-2、Math常用的方法"><a href="#14-3-2、Math常用的方法" class="headerlink" title="14-3-2、Math常用的方法"></a>14-3-2、Math常用的方法</h3><ul>
<li>Math.abs(x)  返回一个数的绝对值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.abs(&#x27;-1&#x27;);     // 1</span><br><span class="line">Math.abs(-2);       // 2</span><br><span class="line">Math.abs(null);     // 0</span><br><span class="line">Math.abs(&quot;string&quot;); // NaN</span><br><span class="line">Math.abs();         // NaN</span><br></pre></td></tr></table></figure>



<ul>
<li>Math.max() 返回多个数值的最大值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Math.max(1, 2, 3)) //3</span><br></pre></td></tr></table></figure>



<ul>
<li>Math.min() 返回多个数值的最小值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Math.min(1, 2, 3)) //1</span><br></pre></td></tr></table></figure>



<h3 id="14-3-3、Math中取整数的三个方法"><a href="#14-3-3、Math中取整数的三个方法" class="headerlink" title="14-3-3、Math中取整数的三个方法"></a>14-3-3、Math中取整数的三个方法</h3><ul>
<li>Math.ceil(x) 向上取整，往大了取</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Math.ceil(1.2))//2</span><br><span class="line">   console.log(Math.ceil(1.5))//2</span><br><span class="line">   console.log(Math.ceil(1.7))//2</span><br><span class="line">   console.log(Math.ceil(1.9))//2</span><br></pre></td></tr></table></figure>



<ul>
<li>Math.floor(x) 向下取整，往小了取</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Math.floor(1.2))//1</span><br><span class="line">console.log(Math.floor(1.5))//1</span><br><span class="line">console.log(Math.floor(1.7))//1</span><br><span class="line">console.log(Math.floor(1.9))//1</span><br></pre></td></tr></table></figure>



<ul>
<li>Math.round(x) 四舍五入取整</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Math.round(1.2))//1</span><br><span class="line">console.log(Math.round(1.5))//2</span><br><span class="line">console.log(Math.round(1.7))//2</span><br><span class="line">console.log(Math.round(1.9))//2</span><br></pre></td></tr></table></figure>



<h3 id="14-3-4、随机数的学习"><a href="#14-3-4、随机数的学习" class="headerlink" title="14-3-4、随机数的学习"></a>14-3-4、随机数的学习</h3><p>Math.random() 得到一个大于等于0，小于1之间的随机数<br>使用。</p>
<p><strong>使用场景</strong>：一般我们做抽奖时会用到随机数</p>
<ul>
<li>获取两数之间的随机数（大于等于min小于max）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这个随机数可能是整数，也可能是小数</span><br><span class="line">Math.random() * (max - min) + min</span><br></pre></td></tr></table></figure>



<ul>
<li>得到两数之间的随机整数（大于等于min，小于max）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这个随机数是min和max之间的随机整数</span><br><span class="line">function getRandomInt(min, max) &#123;</span><br><span class="line">  min = Math.ceil(min);</span><br><span class="line">  max = Math.floor(max);</span><br><span class="line">  //不含最大值，含最小值</span><br><span class="line">  return Math.floor(Math.random() * (max - min)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>得到两数之间的随机整数，包括两个数在内（大于等于min，小于等于max）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这个随机数是min和max之间的随机整数</span><br><span class="line">function getRandomIntInclusive(min, max) &#123;</span><br><span class="line">  min = Math.ceil(min);</span><br><span class="line">  max = Math.floor(max);</span><br><span class="line">  //含最大值，含最小值 </span><br><span class="line">  return Math.floor(Math.random() * (max - min + 1)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="14-4、Date日期对象的学习"><a href="#14-4、Date日期对象的学习" class="headerlink" title="14-4、Date日期对象的学习"></a>14-4、Date日期对象的学习</h2><p>我们的Date对象是一个构造函数对象，必须使用new 对象，来创建我们要使用的对象以后才可以使用。</p>
<p>创建一个新Date对象的唯一方法是通过new 操作符，<br>例如：let now &#x3D; new Date()</p>
<p><strong>使用场景</strong> 比如我们的秒杀倒计时，显示的日期都需要借助Date日期对象</p>
<h3 id="14-4-1、创建Date对象"><a href="#14-4-1、创建Date对象" class="headerlink" title="14-4-1、创建Date对象"></a>14-4-1、创建Date对象</h3><p>有 4 种方法创建新的日期对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date()</span><br><span class="line">new Date(year, month, day, hours, minutes, seconds, milliseconds)</span><br><span class="line">new Date(dateString)</span><br><span class="line">new Date(milliseconds)</span><br></pre></td></tr></table></figure>



<ul>
<li>new Date()创建Date对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date()</span><br><span class="line">console.log(d)//Mon Dec 21 2020 20:02:54 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>



<p>这样直接创建的返回的是当前的时间如上面的注释所示，我当前是2020年12月21日20时02分54，你打印的应该是你当前自己的时间。</p>
<ul>
<li>new Date(year, month, …)<br>new Date(year, month, …) 用指定日期和时间创建新的日期对象。<br>7个数字分别指定年、月、日、小时、分钟、秒和毫秒（按此顺序）：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date(2018, 11, 24, 10, 33, 30, 0);</span><br><span class="line">console.log(d) //Mon Dec 24 2018 10:33:30 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>



<p>这里有一点需要注意：JavaScript 从 0 到 11 计算月份。一月是 0。十二月是11。<br>4个数字指定年、月、日和小时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date(2018, 11, 24, 10);</span><br></pre></td></tr></table></figure>



<p>3 个数字指定年、月和日：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date(2018, 11, 24);</span><br></pre></td></tr></table></figure>



<ul>
<li>new Date(dateString)<br>new Date(dateString) 从日期字符串创建一个新的日期对象<br>我们可以通过 年-月-日 或者年&#x2F;月&#x2F;日 获取Date对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//如我们用两种方式来创建2020年12月21日</span><br><span class="line">    var d1 = new Date(2020,11,21);//月份是从0开始的 11代表12月</span><br><span class="line">    console.log(d1) //Mon Dec 21 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">    var d2 = new Date(&#x27;2020-12-21&#x27;);</span><br><span class="line">    console.log(d2) //Mon Dec 21 2020 08:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">     var d3 = new Date(&#x27;2020/12/21&#x27;);</span><br><span class="line">    console.log(d3) //Mon Dec 21 2020 08:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>



<ul>
<li>new Date(milliseconds)<br>new Date(milliseconds) 创建一个零时加毫秒的新日期对象<br>JavaScript 将日期存储为自 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）以来的毫秒数。<br>零时间是 1970 年 1 月 1 日 00:00:00 UTC。<br>现在的时间是：1970 年 1 月 1 日之后的 1608553621233毫秒<br>如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d1 = new Date(0);</span><br><span class="line">console.log(d1) //Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>



<p>r如果我们想获取当前时间距离1970 年 1 月 1 日之间的毫秒值可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d1 = new Date();</span><br><span class="line">console.log(d1.getTime()) //1608553621233</span><br><span class="line">var d2 = new Date();</span><br><span class="line">console.log(d2) //Mon Dec 21 2020 20:27:01 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>



<p>可以看出当前时间距离1970 年 1 月 1 日之间的毫秒值是1608553621233<br>那么我们直接new Date(1608553621233)获取的日期如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d1 = new Date(1608553621233);</span><br><span class="line">console.log(d1) //Mon Dec 21 2020 20:27:01 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>



<p>所以当前的日期和通过new Date(当前日期距离1970年1月1日的毫秒值)都可以获取当前时间。两者可以相互转换。</p>
<h3 id="14-4-2-日期获取方法"><a href="#14-4-2-日期获取方法" class="headerlink" title="14-4-2,日期获取方法"></a>14-4-2,日期获取方法</h3><p>获取方法用于获取日期的某个部分（来自日期对象的信息）。下面是最常用的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>getDate()</td>
<td>以数值返回天（1-31）</td>
</tr>
<tr>
<td>getDay()</td>
<td>以数值获取周名（0-6）</td>
</tr>
<tr>
<td>getFullYear()</td>
<td>获取四位的年（yyyy）</td>
</tr>
<tr>
<td>getHours()</td>
<td>获取小时（0-23）</td>
</tr>
<tr>
<td>getMilliseconds()</td>
<td>获取毫秒（0-999）</td>
</tr>
<tr>
<td>getMinutes()</td>
<td>获取分（0-59）</td>
</tr>
<tr>
<td>getMonth()</td>
<td>获取月（0-11）</td>
</tr>
<tr>
<td>getSeconds()</td>
<td>获取秒（0-59）</td>
</tr>
<tr>
<td>getTime()</td>
<td>获取时间（从 1970 年 1 月 1 日至今）</td>
</tr>
</tbody></table>
<h3 id="14-4-3、日期设置方法"><a href="#14-4-3、日期设置方法" class="headerlink" title="14-4-3、日期设置方法"></a>14-4-3、日期设置方法</h3><p>设置方法用于设置日期的某个部分</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>setDate()</td>
<td>以数值（1-31）设置日</td>
</tr>
<tr>
<td>setFullYear()</td>
<td>设置年（可选月和日）</td>
</tr>
<tr>
<td>setHours()</td>
<td>设置小时（0-23）</td>
</tr>
<tr>
<td>setMilliseconds()</td>
<td>设置毫秒（0-999）</td>
</tr>
<tr>
<td>setMinutes()</td>
<td>设置分（0-59）</td>
</tr>
<tr>
<td>setMonth()</td>
<td>设置月（0-11）</td>
</tr>
<tr>
<td>setSeconds()</td>
<td>设置秒（0-59）</td>
</tr>
<tr>
<td>setTime()</td>
<td>设置时间（从 1970 年 1 月 1 日至今的毫秒数）</td>
</tr>
</tbody></table>
<h3 id="14-4-4、倒计时（综合案例）"><a href="#14-4-4、倒计时（综合案例）" class="headerlink" title="14-4-4、倒计时（综合案例）"></a>14-4-4、倒计时（综合案例）</h3><p>我们这里带大家实现一个倒计时的案例，比如我们知道一个活动结束的时间，然后去计算活动还有多久结束。我会在视频里带着大家写一个综合的案例。大家跟着视频课来学习这个综合案例即可。</p>
<h2 id="14-5、Array数组对象的学习"><a href="#14-5、Array数组对象的学习" class="headerlink" title="14-5、Array数组对象的学习"></a>14-5、Array数组对象的学习</h2><p>数组对象的作用是：使用单独的变量名来存储一系列的值。<br>如我之前学习数组时，数组的一种创建方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mycars = new Array();</span><br><span class="line">mycars[0] = &quot;Saab&quot;;</span><br><span class="line">mycars[1] = &quot;Volvo&quot;;</span><br><span class="line">mycars[2] = &quot;BMW&quot;;</span><br></pre></td></tr></table></figure>



<h3 id="14-5-1、判断是不是数组"><a href="#14-5-1、判断是不是数组" class="headerlink" title="14-5-1、判断是不是数组"></a>14-5-1、判断是不是数组</h3><p>判断一个对象是不是数组有两种方式</p>
<ul>
<li>1，通过instanceof  Array</li>
<li>2，通过Array.isArray(）方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = new Array()</span><br><span class="line">console.log(arr instanceof Array) //true</span><br><span class="line">console.log(Array.isArray(arr))//true</span><br></pre></td></tr></table></figure>



<h3 id="14-5-2、添加和删除数组元素"><a href="#14-5-2、添加和删除数组元素" class="headerlink" title="14-5-2、添加和删除数组元素"></a>14-5-2、添加和删除数组元素</h3><p>其实我们在讲解数组的那一节有教大家如何添加和删除数组，今天再来带大家系统的来学习下数组的添加和删除</p>
<ul>
<li>push方法添加<br>在数组的末尾添加一个或者多个元素</li>
<li>unshift方法添加<br>在数组的开头添加一个或者多个元素</li>
<li>pop方法删除<br>删除数组尾部的元素，一次只能删除一个</li>
<li>shift方法删除<br>删除数组最前面（头部）的元素</li>
</ul>
<h3 id="14-5-3、reverse方法翻转数组"><a href="#14-5-3、reverse方法翻转数组" class="headerlink" title="14-5-3、reverse方法翻转数组"></a>14-5-3、reverse方法翻转数组</h3><p>reverse() 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5]</span><br><span class="line">console.log(arr.reverse())//[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure>



<h3 id="14-5-4、sort方法对数组进行排序"><a href="#14-5-4、sort方法对数组进行排序" class="headerlink" title="14-5-4、sort方法对数组进行排序"></a>14-5-4、sort方法对数组进行排序</h3><p>用sort方法进行排序，默认是升序排列的，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 3, 2, 5, 4]</span><br><span class="line">console.log(arr.sort())//[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>



<p>但是直接用sort方法会有问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [11, 3, 22, 55, 44]</span><br><span class="line">console.log(arr.sort())//[11, 22, 3, 44, 55]</span><br></pre></td></tr></table></figure>



<p>为什么会出现3在11和22后面的问题呢，因为我们sort默认排序顺序是在将元素转换为字符串，然后对字符串进行比较，再排序的，所以我们要想用sort来排序，就要用到另外一个写法了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [11, 3, 22, 55, 44]</span><br><span class="line">//按照升序排序</span><br><span class="line">arr.sort(function (a, b) &#123;</span><br><span class="line">  return a - b</span><br><span class="line">&#125;)</span><br><span class="line">//按照降序排序</span><br><span class="line">arr.sort(function (a, b) &#123;</span><br><span class="line">  return b - a</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>上面的 写法是固定的， a-b时是升序，b-a时是降序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function (a, b) &#123;</span><br><span class="line">      return a - b </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="14-5-5、数组的索引方法"><a href="#14-5-5、数组的索引方法" class="headerlink" title="14-5-5、数组的索引方法"></a>14-5-5、数组的索引方法</h3><ul>
<li>indexOf()方法<br>返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</li>
<li>lastIndexOf() 方法<br>返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1</li>
</ul>
<h3 id="14-5-6、把数组转换为字符串"><a href="#14-5-6、把数组转换为字符串" class="headerlink" title="14-5-6、把数组转换为字符串"></a>14-5-6、把数组转换为字符串</h3><p>我们把数组转换为字符串有下面两种方法</p>
<ul>
<li>toString()<br>将数组通过逗号连接成一个字符串。</li>
<li>join(分隔符)<br>将数组通过分隔符连接成一个字符串。join里分隔符如果不写的话，默认用逗号来连接数组元素组成一个字符串</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 3, 2, 5, 4]</span><br><span class="line">console.log(arr.toString())//1,3,2,5,4</span><br><span class="line">console.log(arr.join(&#x27;-&#x27;))//1-3-2-5-4</span><br></pre></td></tr></table></figure>



<p>这里希望大家重点掌握，因为我们实际开发中，会把数组转换为字符串传给后台开发人员。</p>
<h3 id="14-5-7、数组的其他常用方法"><a href="#14-5-7、数组的其他常用方法" class="headerlink" title="14-5-7、数组的其他常用方法"></a>14-5-7、数组的其他常用方法</h3><ul>
<li>concat() 方法<br>用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组</li>
<li>slice() 方法<br>截取数组的一部分返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变</li>
<li>splice() 方法<br>通过删除或替换现有元素或者原地添加新的元素来修改或者删除数组<br>splice(从第几个开始，删除几个)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5]</span><br><span class="line">arr.splice(0, 2)// 从索引为0的地方开始，删除2个元素。</span><br><span class="line">console.log(arr) //[3, 4, 5]</span><br></pre></td></tr></table></figure>



<ul>
<li>splice(从第几个开始，替换几个，要替换的值)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br><span class="line">arr.splice(0, 2,&#x27;A&#x27;,&#x27;B&#x27;)// 从索引为0的地方开始，替换2个元素，替换为 A和B</span><br><span class="line">console.log(arr) //[&quot;A&quot;, &quot;B&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br></pre></td></tr></table></figure>



<h1 id="十五、wxss和css样式美化"><a href="#十五、wxss和css样式美化" class="headerlink" title="十五、wxss和css样式美化"></a>十五、wxss和css样式美化</h1><p>上面基本上都是JavaScript基础，js在小程序里主要是用来处理逻辑的，样式相关的知识，用来美化我们的小程序。其实我们小程序三剑客里的wxss和我们的css是一样的。</p>
<ul>
<li>菜鸟教程：<a href="https://www.runoob.com/css/css-tutorial.html">https://www.runoob.com/css/css-tutorial.html</a></li>
<li>w3cshool教程：<a href="https://www.w3school.com.cn/css/index.asp">https://www.w3school.com.cn/css/index.asp</a></li>
</ul>
<h2 id="15-1、css基础语法"><a href="#15-1、css基础语法" class="headerlink" title="15-1、css基础语法"></a>15-1、css基础语法</h2><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:<br><img src="https://img-blog.csdnimg.cn/20201224103736458.png" alt="img"><br>在我们小程序的代码里就体现如下</p>
<ul>
<li>1，在wxml里定义一个class选择器<br><img src="https://img-blog.csdnimg.cn/20201224104038440.png" alt="img"></li>
<li>2，在wxss实现css样式<br><img src="https://img-blog.csdnimg.cn/20201224104119913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h2 id="15-2、CSS-注释"><a href="#15-2、CSS-注释" class="headerlink" title="15-2、CSS 注释"></a>15-2、CSS 注释</h2><p>注释是用来解释你的代码，并且可以随意编辑它，浏览器会忽略它。<br>CSS注释以 &#x2F; <em>开始, 以</em> &#x2F; 结束, 实例如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*这是个注释*/</span><br><span class="line">.title&#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">    /*这是另一个注释*/</span><br><span class="line">    color:black;</span><br><span class="line">    font-family:arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="15-3、Id-和-Class选择器"><a href="#15-3、Id-和-Class选择器" class="headerlink" title="15-3、Id 和 Class选择器"></a>15-3、Id 和 Class选择器</h2><ul>
<li>id 选择器以 “#” 来定义。<br>下面的两个 id 选择器，第一个可以定义元素的颜色为红色，第二个定义元素的颜色为绿色：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#red &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">#green &#123;</span><br><span class="line">	color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>class 选择器<br>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用,类选择器以一个点”.”号显示</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.red &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">.green &#123;</span><br><span class="line">	color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们小程序的css中用的最多的就是id和class选择器。</p>
<h2 id="15-4、CSS-背景"><a href="#15-4、CSS-背景" class="headerlink" title="15-4、CSS 背景"></a>15-4、CSS 背景</h2><p>CSS 属性定义背景效果常用的方式:</p>
<ul>
<li>background-color（最常用）<br>background-color 属性定义了元素的背景颜色.如：<br>.title {background-color:red;} 就是设置类选择器title的背景颜色为红色</li>
</ul>
<p>我们上面的 background-color也可以简写为 background，如：<br>.title {background-color:red;}  也是设置背景为红色</p>
<h2 id="15-5、css中颜色设置的三种方式"><a href="#15-5、css中颜色设置的三种方式" class="headerlink" title="15-5、css中颜色设置的三种方式"></a>15-5、css中颜色设置的三种方式</h2><p>CSS中，颜色值通常以以下方式定义:</p>
<ul>
<li>十六进制 - 如：”#ff0000”</li>
<li>RGB - 如：”rgb(255,0,0)”</li>
<li>颜色名称 - 如：”red”</li>
<li>我这里给大家提供一个颜色表，大家可以拿到自己喜欢颜色的十六进制值。<br><a href="https://tool.oschina.net/commons?type=3">https://tool.oschina.net/commons?type=3</a><br>如果这个连接失效了，大家自己百度下“颜色对照表”也可以找到类似的。</li>
</ul>
<p>部分截图如下。<br><img src="https://img-blog.csdnimg.cn/20201224151322333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="15-6、文本常用样式"><a href="#15-6、文本常用样式" class="headerlink" title="15-6、文本常用样式"></a>15-6、文本常用样式</h2><h3 id="15-6-1、文本的对齐方式"><a href="#15-6-1、文本的对齐方式" class="headerlink" title="15-6-1、文本的对齐方式"></a>15-6-1、文本的对齐方式</h3><p>文本排列属性是用来设置文本的水平对齐方式。<br>文本可居中或对齐到左或右,两端对齐</p>
<ul>
<li>text-align: center； 文本居中对齐</li>
<li>text-align: left； 文本居左对齐</li>
<li>text-align: right； 文本居右对齐</li>
</ul>
<h3 id="15-6-2、文本修饰"><a href="#15-6-2、文本修饰" class="headerlink" title="15-6-2、文本修饰"></a>15-6-2、文本修饰</h3><p>text-decoration 属性用来设置或删除文本的装饰</p>
<ul>
<li>text-decoration: overline; 上划线<br><img src="https://img-blog.csdnimg.cn/20201224152359894.png" alt="img"></li>
<li>text-decoration: line-through; 中间划线<br><img src="https://img-blog.csdnimg.cn/20201224152458464.png" alt="img"></li>
<li>text-decoration:underline; 下划线<br><img src="https://img-blog.csdnimg.cn/20201224152542808.png" alt="img"></li>
</ul>
<h3 id="15-6-3、color设置文本颜色"><a href="#15-6-3、color设置文本颜色" class="headerlink" title="15-6-3、color设置文本颜色"></a>15-6-3、color设置文本颜色</h3><p>如下所示，设置字体颜色为红色的三种方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 英文颜色 */</span><br><span class="line">.title &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">/* rgb设置颜色 */</span><br><span class="line">.title &#123;</span><br><span class="line">  color: rgb(255, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">/* 十六进制设置颜色 */</span><br><span class="line">.title &#123;</span><br><span class="line">  color: #FF0000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20201224153147236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这些颜色值，可以在我前面给到大家的颜色对照表里找到。</p>
<h3 id="15-6-4，font-size-设置字体大小"><a href="#15-6-4，font-size-设置字体大小" class="headerlink" title="15-6-4，font-size 设置字体大小"></a>15-6-4，font-size 设置字体大小</h3><p>可以自己去看下 <a href="https://www.runoob.com/css/css-text.html">https://www.runoob.com/css/css-text.html</a></p>
<h2 id="15-7、css边框和边距"><a href="#15-7、css边框和边距" class="headerlink" title="15-7、css边框和边距"></a>15-7、css边框和边距</h2><p>元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。<br><img src="https://img-blog.csdnimg.cn/20201224154827728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我这里画一个图，方便大家理解margin，padding，border。其实我们装手机的快递盒子有点类似。<br><img src="https://img-blog.csdnimg.cn/20201225174000202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="15-7-1、padding-内边距"><a href="#15-7-1、padding-内边距" class="headerlink" title="15-7-1、padding 内边距"></a>15-7-1、padding 内边距</h3><p>元素的内边距在边框和内容区之间。控制该区域最简单的属性是 padding 属性。padding 属性定义元素边框与元素内容之间的空白区域。padding 属性接受像素值或百分比值，但不允许使用负值</p>
<ul>
<li>padding: 10px;<br>如果只设置一个值，那么上下左右都是10px</li>
<li>padding: 10px 20px 30px 40px;<br>按照上、右、下、左的顺序分别设置各边的内边距。这样设置就是内边距的上间距10px，右间距20px，下边距30px，左边距40px</li>
<li>也通过使用下面四个单独的属性，分别设置上、右、下、左内边距：<br>padding-top<br>padding-right<br>padding-bottom<br>padding-left<br><img src="https://img-blog.csdnimg.cn/20201224155732952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h3 id="15-7-2、border边框"><a href="#15-7-2、border边框" class="headerlink" title="15-7-2、border边框"></a>15-7-2、border边框</h3><p>元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。<br>CSS border 属性允许你规定元素边框的样式、宽度和颜色。<br>如下面几种边框<br><img src="https://img-blog.csdnimg.cn/20201224160219664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>每个边框有 3 个方面：样式，宽度、以及颜色</p>
<ul>
<li>border-style可以来设置样式<br>  <img src="https://img-blog.csdnimg.cn/20201224160755362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>  我们通过设置border-style来定义上下左右四个边框样式，当让也可以定义单边样式，如果您希望为元素框的某一个边设置边框样式，而不是设置所有 4 个边的边框样式，可以使用下面的单边边框样式属性：<br>  border-top-style<br>  border-right-style<br>  border-bottom-style<br>  border-left-style </li>
<li>border-width设置边框的宽度<br>  您可以通过 border-width 属性为边框指定宽度。<br>  同样border-width: 5px;只有一个值的时候是设置上下左右4个边框的宽度。<br>  您也可以通过下列属性分别设置边框各边的宽度：<br>  border-top-width<br>  border-right-width<br>  border-bottom-width<br>  border-left-width </li>
<li>border-color设置边框的颜色<br>  您可以通过border-color 属性为边框指定颜色。<br>  同样border-color只有一个值的时候是设置上下左右4个边框的颜色。<br>  您也可以通过下列属性分别设置边框各边的颜色：<br>  border-top-color<br>  border-right-color<br>  border-bottom-color<br>  border-left-color </li>
<li>当然我们我们的边框宽度，样式，颜色有一种简写方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title&#123;</span><br><span class="line">  border:5px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们只需要一个border属性，就可以设置上下左右四个边框的宽度为5px，样式为solid，颜色为red。</p>
<h3 id="15-7-3、margin外边距"><a href="#15-7-3、margin外边距" class="headerlink" title="15-7-3、margin外边距"></a>15-7-3、margin外边距</h3><p>围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。margin 没有背景颜色，是完全透明的<br>设置外边距的最简单的方法就是使用 margin 属性，这个属性接受任何长度单位、百分数值甚至负值<br><img src="https://img-blog.csdnimg.cn/20201224162251291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<ul>
<li>Margin - 单边外边距属性<br>在CSS中，它可以指定不同的侧面不同的边距：<br>实例<br>margin-top:100px;<br>margin-bottom:100px;<br>margin-right:50px;<br>margin-left:50px;</li>
</ul>
<p>margin属性可以有一到四个值。</p>
<ul>
<li>margin:25px 50px 75px 100px;<br>上边距为25px<br>右边距为50px<br>下边距为75px<br>左边距为100px</li>
<li>margin:25px 50px 75px;<br>上边距为25px<br>左右边距为50px<br>下边距为75px</li>
<li>margin:25px 50px;<br>上下边距为25px<br>左右边距为50px</li>
<li>margin:25px;<br>所有的4个边距都是25px</li>
</ul>
<h2 id="15-8、border-radius设置圆角边框"><a href="#15-8、border-radius设置圆角边框" class="headerlink" title="15-8、border-radius设置圆角边框"></a>15-8、border-radius设置圆角边框</h2><p>border-radius 主要是用来设置圆角用的，下面我通过几个常用的例子来给大家讲解下这个知识点</p>
<ul>
<li>1，直接可以用像素设置圆角大小</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title &#123;</span><br><span class="line">  background: red;</span><br><span class="line">  /* 可以用像素设置圆角 */</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<ul>
<li>2,如果有宽高值，可以设置border-radius为宽高的一半实现圆形</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title &#123;</span><br><span class="line">  background: red;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border-radius: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20201225170735485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>当有宽高的时候，设置 border-radius为50%同样可以实现上面的圆形功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title &#123;</span><br><span class="line">  background: red;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="15-9、综合案例一-画个月牙"><a href="#15-9、综合案例一-画个月牙" class="headerlink" title="15-9、综合案例一(画个月牙) "></a>15-9、综合案例一(画个月牙) <img src="https://img-blog.csdnimg.cn/20201225171436313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></h2><ul>
<li>1，在wxml里定义两个view组件，并且设置好class类名<br><img src="https://img-blog.csdnimg.cn/20201225171546564.png" alt="img"></li>
<li>2，然后再wxss里设置对应的css样式，用到我们前面学的border-radius<br><img src="https://img-blog.csdnimg.cn/20201225171638467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可以看出来，我们就是用了border-radius实现了一个红色的圆形和一个白色的圆形，白色的圆形遮住了一部分红色的大圆，这样就实现了一个红色的月牙。</li>
</ul>
<h2 id="15-11、px和rpx的转换"><a href="#15-11、px和rpx的转换" class="headerlink" title="15-11、px和rpx的转换"></a>15-11、px和rpx的转换</h2><p>我们在设置宽度，高度，边框粗细时都会用到尺寸单位，我们这里重点给大家讲解下px和rpx。rpx是微信为小程序专门设计的一个尺寸单位。<br>px和rpx的换算如下：<br><img src="https://img-blog.csdnimg.cn/20201228104051894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>一般设计规范都是依据iPhone6来设计的，也就是说平常ui设计师给出的1px我们在写代码时要写0.5rpx。</p>
<p>所以开发小程序里建议大家用rpx作为小程序的尺寸单位，这样能很好的做自适应。如果我们的设计小姐姐给的是px单位的设计图，我们就要自己用px除以2得到我们对应的rpx大小。</p>
<h1 id="十六、多媒体组件的学习（图片和视频）"><a href="#十六、多媒体组件的学习（图片和视频）" class="headerlink" title="十六、多媒体组件的学习（图片和视频）"></a>十六、多媒体组件的学习（图片和视频）</h1><h2 id="16-1、认识图片image组件"><a href="#16-1、认识图片image组件" class="headerlink" title="16-1、认识图片image组件"></a>16-1、认识图片image组件</h2><p>image组件：主要用来显示图片，可以是本地图片，也可以是网络图片。</p>
<p>官方学习文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">https://developers.weixin.qq.com/miniprogram/dev/component/image.html</a></p>
<h3 id="16-1-1、src属性显示网络图片"><a href="#16-1-1、src属性显示网络图片" class="headerlink" title="16-1-1、src属性显示网络图片"></a>16-1-1、src属性显示网络图片</h3><p>我们通过src属性来设置要显示的图片资源，图片资源有两种</p>
<ul>
<li>本地图片资源</li>
<li>网络图片资源</li>
</ul>
<p>由于我们本地的图片会占用小程序软件包的大小，所以这里推荐大家尽量使用网络图片。<br><img src="https://img-blog.csdnimg.cn/20210104201638769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们设置显示图片的语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;image src=&quot;图片资源地址&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure>



<h3 id="16-1-2、src属性显示本地图片"><a href="#16-1-2、src属性显示本地图片" class="headerlink" title="16-1-2、src属性显示本地图片"></a>16-1-2、src属性显示本地图片</h3><p>用image显示本地图片，我们需要提前把图片放在小程序项目里，如下图我们把本地图片放在images目录里，这个images目录需要我们自己新建。<br>然后在image组件里设置src属性，指向这个本地图片，就可以在小程序里展示了。</p>
<h3 id="16-1-3、通过mode设置图片裁剪、缩放的模式"><a href="#16-1-3、通过mode设置图片裁剪、缩放的模式" class="headerlink" title="16-1-3、通过mode设置图片裁剪、缩放的模式"></a>16-1-3、通过mode设置图片裁剪、缩放的模式</h3><p>image组件另外一个比较重要的属性就是mode了。我们在使用图片时，不能百分之百保证图片的比例正好是我们想要的，这个时候就要用到图片的裁剪和缩放了。<br>mode 的常用设置如下</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>scaleToFill</td>
<td>缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td>
</tr>
<tr>
<td>aspectFit</td>
<td>缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td>
</tr>
<tr>
<td>aspectFill</td>
<td>缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td>
</tr>
<tr>
<td>widthFix</td>
<td>缩放模式，宽度不变，高度自动变化，保持原图宽高比不变</td>
</tr>
<tr>
<td>heightFix</td>
<td>缩放模式，高度不变，宽度自动变化，保持原图宽高比不变	2.10.3</td>
</tr>
<tr>
<td>top</td>
<td>裁剪模式，不缩放图片，只显示图片的顶部区域</td>
</tr>
<tr>
<td>bottom</td>
<td>裁剪模式，不缩放图片，只显示图片的底部区域</td>
</tr>
<tr>
<td>center</td>
<td>裁剪模式，不缩放图片，只显示图片的中间区域</td>
</tr>
<tr>
<td>left</td>
<td>裁剪模式，不缩放图片，只显示图片的左边区域</td>
</tr>
<tr>
<td>right</td>
<td>裁剪模式，不缩放图片，只显示图片的右边区域</td>
</tr>
<tr>
<td>top left</td>
<td>裁剪模式，不缩放图片，只显示图片的左上边区域</td>
</tr>
<tr>
<td>top right</td>
<td>裁剪模式，不缩放图片，只显示图片的右上边区域</td>
</tr>
<tr>
<td>bottom left</td>
<td>裁剪模式，不缩放图片，只显示图片的左下边区域</td>
</tr>
<tr>
<td>bottom right</td>
<td>裁剪模式，不缩放图片，只显示图片的右下边区域</td>
</tr>
</tbody></table>
<p>比如我们有一个原图如下。<br><img src="https://img-blog.csdnimg.cn/20210104203418276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>设置不同的mode值，可以很明显的看出来区别<br><img src="https://img-blog.csdnimg.cn/20210104203527548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>后面我们需要对图片做裁剪或者伸缩处理时，就可以设置不同的mode值来实现不同的效果。</p>
<h3 id="16-1-4、图片懒加载"><a href="#16-1-4、图片懒加载" class="headerlink" title="16-1-4、图片懒加载"></a>16-1-4、图片懒加载</h3><p>小程序里image组件是支持图片懒加载的，当我们一个列表页有很多图片时，我们可以使用懒加载，来加快页面加载速度。使用懒加载时，我们只需要给image设置lazy-load就可以了。<br><img src="https://img-blog.csdnimg.cn/20210104204621150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="16-2、认识视频video组件"><a href="#16-2、认识视频video组件" class="headerlink" title="16-2、认识视频video组件"></a>16-2、认识视频video组件</h2><p>video组件：主要用来实现视频播放。</p>
<p>官方学习文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/video.html">https://developers.weixin.qq.com/miniprogram/dev/component/video.html</a></p>
<h3 id="16-2-1、src属性设置视频地址"><a href="#16-2-1、src属性设置视频地址" class="headerlink" title="16-2-1、src属性设置视频地址"></a>16-2-1、src属性设置视频地址</h3><p><img src="https://img-blog.csdnimg.cn/20210104204731972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>video组件里也是通过src属性来设置视频资源的。</p>
<h3 id="16-2-2，设置视频弹幕属性来显示弹幕"><a href="#16-2-2，设置视频弹幕属性来显示弹幕" class="headerlink" title="16-2-2，设置视频弹幕属性来显示弹幕"></a>16-2-2，设置视频弹幕属性来显示弹幕</h3><p>我们上面设置src只能保证视频的正常播放，如果我们想使用弹幕功能，就要为video设置别的属性了。<br><img src="https://img-blog.csdnimg.cn/20210104210554480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们如果想在视频上显示弹幕，就要设置danmu-list属性。可以看出danmu-list属性是一个数组，而这个数组就要放置我们弹幕的一些数据了。<br><img src="https://img-blog.csdnimg.cn/20210104210725746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>下面我在代码里给大家简单的演示下弹幕的显示。<br>首先在wxml里设置danmu-list属性，并且给danmu-list绑定数据danmuList<br><img src="https://img-blog.csdnimg.cn/20210104210925139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>而这个danmuList就要在js里设置了。<br><img src="https://img-blog.csdnimg.cn/20210104211241948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们可以在danmuList的每个弹幕对象里设置弹幕显示的内容，弹幕的颜色，弹幕显示的时间。</p>
<h3 id="16-2-3，发送弹幕功能"><a href="#16-2-3，发送弹幕功能" class="headerlink" title="16-2-3，发送弹幕功能"></a>16-2-3，发送弹幕功能</h3><p>我们上面只是简单的展示了弹幕，如果我们想让用户发送弹幕该怎么做呢。下面就来教大家实现弹幕的发送功能。<br>简单起见，我这里设置一个input来获取用户输入的内容，用一个button按钮来触发弹幕的发送。</p>
<p>wxml文件如下：<br><img src="https://img-blog.csdnimg.cn/20210104213340860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这里我们特意设置了一个id属性，我们下面发送弹幕时，需要先初始化一个视频对象，而初始化视频对象时就用到了这个id。</p>
<p>js文件如下：<br><img src="https://img-blog.csdnimg.cn/20210104212613321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>在onReady页面渲染完成时，初始化了一个视频对象videoContext，然后通过bindInput获取用户输入的弹幕内容。最后在点击发送弹幕按钮时，通过videoContext.sendDanmu来发送弹幕到视频的屏幕上。<br>官方文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/video.html">https://developers.weixin.qq.com/miniprogram/dev/component/video.html</a></p>
<h1 id="十七、授权登录退出和缓存"><a href="#十七、授权登录退出和缓存" class="headerlink" title="十七、授权登录退出和缓存"></a>十七、授权登录退出和缓存</h1><p>我们的项目开发多多少少的都会用到用户的一些信息，比如头像，昵称，性别等。而这些信息的获取，小程序也为我们提供好了方法。</p>
<h2 id="17-1、认识wx-login方法"><a href="#17-1、认识wx-login方法" class="headerlink" title="17-1、认识wx.login方法"></a>17-1、认识wx.login方法</h2><p>对应的文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info</a></p>
<p>使用这个方法可以获取如下的用户信息<br><img src="https://pic.imgdb.cn/item/63d68820face21e9ef47802b.png"></p>
<h2 id="17-2、授权弹窗"><a href="#17-2、授权弹窗" class="headerlink" title="17-2、授权弹窗"></a>17-2、授权弹窗</h2><p>一般我的使用上面的wx.login()方法获取用户信息时，需要用户授权的。一般授权弹窗如下。<br><img src="https://pic.imgdb.cn/item/63d6882cface21e9ef47aa9e.png"><br>只有用户点击允许以后才可以获取用户信息。</p>
<h3 id="不弹起授权弹窗解决方案"><a href="#不弹起授权弹窗解决方案" class="headerlink" title="不弹起授权弹窗解决方案"></a>不弹起授权弹窗解决方案</h3><p>有的同学用这个方法时，不会弹起上面的弹窗，有可能是因为基础库版本太低，这里建议升级到最新版的基础库。<br><img src="https://img-blog.csdnimg.cn/20210514110150215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="17-3、授权登录核心代码"><a href="#17-3、授权登录核心代码" class="headerlink" title="17-3、授权登录核心代码"></a>17-3、授权登录核心代码</h2><p>其实核心代码官方文档里有提供的。<br><img src="https://pic.imgdb.cn/item/63d68842face21e9ef47e81d.png"></p>
<h2 id="17-4、顶部圆形头像和昵称"><a href="#17-4、顶部圆形头像和昵称" class="headerlink" title="17-4、顶部圆形头像和昵称"></a>17-4、顶部圆形头像和昵称</h2><p><img src="https://pic.imgdb.cn/item/63d6884eface21e9ef480b36.png"><br>其实这里倒是挺简单，重点知识只有一个圆形图片的实现这里只需要一个image组件和一个text组件即可。通过css的border-radius就可以来设置圆形图像了。<br><img src="https://img-blog.csdnimg.cn/20210514110843559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="17-5、本地缓存的讲解"><a href="#17-5、本地缓存的讲解" class="headerlink" title="17-5、本地缓存的讲解"></a>17-5、本地缓存的讲解</h2><h3 id="17-5-1、使用wx-setStorageSync缓存"><a href="#17-5-1、使用wx-setStorageSync缓存" class="headerlink" title="17-5-1、使用wx.setStorageSync缓存"></a>17-5-1、使用wx.setStorageSync缓存</h3><p>这里缓存我们主要用到了wx.setStorageSync 对应的官方文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html">https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html</a><br><img src="https://img-blog.csdnimg.cn/2021051411134147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="17-5-2、缓存数据的查看"><a href="#17-5-2、缓存数据的查看" class="headerlink" title="17-5-2、缓存数据的查看"></a>17-5-2、缓存数据的查看</h3><p>本地缓存数据<br><img src="https://pic.imgdb.cn/item/63d68864face21e9ef484c30.png"></p>
<h3 id="17-5-3、使用wx-getStorageSync获取缓存"><a href="#17-5-3、使用wx-getStorageSync获取缓存" class="headerlink" title="17-5-3、使用wx.getStorageSync获取缓存"></a>17-5-3、使用wx.getStorageSync获取缓存</h3><p><img src="https://img-blog.csdnimg.cn/20210514111636364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>对应的官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html">https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html</a></p>
<h2 id="17-6、退出登录的编写"><a href="#17-6、退出登录的编写" class="headerlink" title="17-6、退出登录的编写"></a>17-6、退出登录的编写</h2><p>退出登录其实很简单，就实现一个点击事件就可以了<br><img src="https://pic.imgdb.cn/item/63d68864face21e9ef484c30.png"><br>然后js里具体代码就下面这几行就够了<br><img src="https://pic.imgdb.cn/item/63d6888aface21e9ef48b195.png"></p>
<h2 id="17-7、案例代码-index-wxml"><a href="#17-7、案例代码-index-wxml" class="headerlink" title="17-7、案例代码 index.wxml"></a>17-7、案例代码 index.wxml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button wx:if=&quot;&#123;&#123;!userInfo&#125;&#125;&quot; bindtap=&quot;login&quot;&gt;授权登录&lt;/button&gt;</span><br><span class="line">&lt;view wx:else class=&quot;root&quot;&gt;</span><br><span class="line">  &lt;image class=&quot;touxiang&quot; src=&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;text class=&quot;nicheng&quot;&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</span><br><span class="line">  &lt;button bindtap=&quot;loginOut&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>



<p>index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    userInfo: &#x27;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    let user = wx.getStorageSync(&#x27;user&#x27;)</span><br><span class="line">    console.log(&#x27;进入小程序的index页面获取缓存&#x27;, user)</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      userInfo: user</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 授权登录</span><br><span class="line">  login() &#123;</span><br><span class="line">    wx.getUserProfile(&#123;</span><br><span class="line">      desc: &#x27;必须授权才可以继续使用&#x27;,</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        let user = res.userInfo</span><br><span class="line">        // 把用户信息缓存到本地</span><br><span class="line">        wx.setStorageSync(&#x27;user&#x27;, user)</span><br><span class="line">        console.log(&quot;用户信息&quot;, user)</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          userInfo: user</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: res =&gt; &#123;</span><br><span class="line">        console.log(&#x27;授权失败&#x27;, res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 退出登录</span><br><span class="line">  loginOut() &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      userInfo: &#x27;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.setStorageSync(&#x27;user&#x27;, null)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>index.wxss</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.root &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.touxiang &#123;</span><br><span class="line">  width: 200rpx;</span><br><span class="line">  height: 200rpx;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  margin-top: 30rpx;</span><br><span class="line">  margin-bottom: 10rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="十八、swiper轮播图组件"><a href="#十八、swiper轮播图组件" class="headerlink" title="十八、swiper轮播图组件"></a>十八、swiper轮播图组件</h1><h2 id="18-1、swiper组件"><a href="#18-1、swiper组件" class="headerlink" title="18-1、swiper组件"></a>18-1、swiper组件</h2><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html</a></p>
<p>如下图<br><img src="https://img-blog.csdnimg.cn/20210105160644563.png" alt="img"><br>给大家看下官方swiper简介<br><img src="https://img-blog.csdnimg.cn/20210105160749113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>可以看出我们的swiper必须结合swiper-item来使用。</p>
<h2 id="18-2、swiper-item组件"><a href="#18-2、swiper-item组件" class="headerlink" title="18-2、swiper-item组件"></a>18-2、swiper-item组件</h2><p>我们的swiper-item就是用来装每个轮播图使用的。<br><img src="https://pic.imgdb.cn/item/63d688a1face21e9ef48eec7.png"></p>
<h2 id="18-3、swiper-item组件里显示轮播图-案例代码"><a href="#18-3、swiper-item组件里显示轮播图-案例代码" class="headerlink" title="18-3、swiper-item组件里显示轮播图 案例代码"></a>18-3、swiper-item组件里显示轮播图 案例代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;swiper indicator-dots&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;image src=&quot;https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg&quot; /&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;image src=&quot;https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1819216937,2118754409&amp;fm=26&amp;gp=0.jpg&quot; /&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;image src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2273029747,2912173232&amp;fm=15&amp;gp=0.jpg&quot; /&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure>



<h2 id="18-4、swiper的常用属性。"><a href="#18-4、swiper的常用属性。" class="headerlink" title="18-4、swiper的常用属性。"></a>18-4、swiper的常用属性。</h2><p>可以看出我们的swiper有很多属性，下面我会重点的把我们一些常用的属性，通过视频里的一个综合案例来给大家讲解下。</p>
<p>还是来看官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html</a><br><img src="https://img-blog.csdnimg.cn/2021010516274396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h1 id="十九、通过tabBar设置多页面"><a href="#十九、通过tabBar设置多页面" class="headerlink" title="十九、通过tabBar设置多页面"></a>十九、通过tabBar设置多页面</h1><p>我们正常创建的默认项目是一个单页面，我们要想实现下面效果所示的多页面就要借助tabBar来实现多页面。</p>
<p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#%E9%85%8D%E7%BD%AE%E9%A1%B9">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#配置项</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210622174333805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>一个小程序可以配置2-5个多页面，<br><img src="https://img-blog.csdnimg.cn/202106221744101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>我们这里以创建3个页面来给大家做下讲解。<br><img src="https://img-blog.csdnimg.cn/20201223111650910.png" alt="img"></p>
<h2 id="19-1、创建image目录放图标"><a href="#19-1、创建image目录放图标" class="headerlink" title="19-1、创建image目录放图标"></a>19-1、创建image目录放图标</h2><p>我们要使用tabBar就需要用到图标，所以我们要创建一个放图标的目录。<br><img src="https://pic.imgdb.cn/item/63d688b6face21e9ef4925ad.png"></p>
<h2 id="19-2、创建多个页面"><a href="#19-2、创建多个页面" class="headerlink" title="19-2、创建多个页面"></a>19-2、创建多个页面</h2><p>在app.json里创建</p>
<p><img src="https://pic.imgdb.cn/item/63d688c0face21e9ef493fd7.png"></p>
<h2 id="19-3、设置tabBar实现多页面布局"><a href="#19-3、设置tabBar实现多页面布局" class="headerlink" title="19-3、设置tabBar实现多页面布局"></a>19-3、设置tabBar实现多页面布局</h2><p>上面三个页面创建好以后，我们就可以通过tabBar来设置多页面布局了。<br>在app.json里添加如下配置。<br><img src="https://img-blog.csdnimg.cn/20201223112508863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这样我们就可以实现可以自由切换的多页面小程序了。<br><img src="https://img-blog.csdnimg.cn/20201223112620746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="19-4、设置tabbar的代码"><a href="#19-4、设置tabbar的代码" class="headerlink" title="19-4、设置tabbar的代码"></a>19-4、设置tabbar的代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;color&quot;: &quot;#Fc0&quot;,</span><br><span class="line">    &quot;selectedColor&quot;: &quot;#f4c903&quot;,</span><br><span class="line">    &quot;borderStyle&quot;: &quot;white&quot;,</span><br><span class="line">    &quot;list&quot;: [&#123;</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;image/tab1-ok.png&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;image/tab1.png&quot;,</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/home/home&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;首页&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;image/tab2-ok.png&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;image/tab2.png&quot;,</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/me/me&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;我的&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h1 id="二十、navigator页面跳转"><a href="#二十、navigator页面跳转" class="headerlink" title="二十、navigator页面跳转"></a>二十、navigator页面跳转</h1><p>在小程序里做页面跳转有两种方式</p>
<ul>
<li>1，借助navigator组件</li>
<li>2，借助wx.自带方法，在点击的时候做页面跳转<br>如下图所示的几个wx.方法<br><img src="https://img-blog.csdnimg.cn/2021010516140378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>官方给出的几种跳转方式的解释如下<br><img src="https://img-blog.csdnimg.cn/20210622173323610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
</ul>
<h2 id="20-1、navigator实现页面跳转"><a href="#20-1、navigator实现页面跳转" class="headerlink" title="20-1、navigator实现页面跳转"></a>20-1、navigator实现页面跳转</h2><p>navigator其实和我们html里的a标签有点像，也是为了实现页面跳转的。<br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html">https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html</a></p>
<p>当然了我们使用navigator来跳转页面时，分下面几种情况。当然这些跳转方式都是通过配置open-type属性来定义的。<br><img src="https://img-blog.csdnimg.cn/20210106205014426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="20-2、页面的跳转方式"><a href="#20-2、页面的跳转方式" class="headerlink" title="20-2、页面的跳转方式"></a>20-2、页面的跳转方式</h2><p>下面我把一些常用的open-type属性列出来给大家，方便大家以后使用。</p>
<table>
<thead>
<tr>
<th>open-type值</th>
<th>说明</th>
<th>对应wx方法</th>
</tr>
</thead>
<tbody><tr>
<td>navigate</td>
<td>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面</td>
<td>对应wx.navigateTo</td>
</tr>
<tr>
<td>redirect</td>
<td>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面</td>
<td>对应 wx.redirectTo</td>
</tr>
<tr>
<td>switchTab</td>
<td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td>
<td>对应 wx.switchTab</td>
</tr>
<tr>
<td>reLaunch</td>
<td>关闭所有页面，打开到应用内的某个页面</td>
<td>对应 wx.reLaunch</td>
</tr>
<tr>
<td>navigateBack</td>
<td>关闭当前页面，返回上一页面或多级页面</td>
<td>对应 wx.navigateBack</td>
</tr>
<tr>
<td>exit</td>
<td>退出小程序，target&#x3D;”miniProgram”时生效</td>
<td>无</td>
</tr>
</tbody></table>
<p>如我们使用navigate做页面跳转，只写个url属性，open-type的值默认就是navigate</p>
<p>跳转到新页面后，会有一个返回按钮。我们可以通过这个返回按钮返回上一个页面。</p>
<h2 id="20-3，点击事件结合wx方法实现跳转"><a href="#20-3，点击事件结合wx方法实现跳转" class="headerlink" title="20-3，点击事件结合wx方法实现跳转"></a>20-3，点击事件结合wx方法实现跳转</h2><p>我们做页面跳转除了使用navigate组件外，还可以通过点击事件借助wx方法实现页面跳转。</p>
<p>常用的wx方法：</p>
<table>
<thead>
<tr>
<th>wx方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>wx.navigateTo</td>
<td>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面</td>
</tr>
<tr>
<td>wx.redirectTo</td>
<td>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面</td>
</tr>
<tr>
<td>wx.switchTab</td>
<td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td>
</tr>
<tr>
<td>wx.reLaunch</td>
<td>关闭所有页面，打开到应用内的某个页面</td>
</tr>
<tr>
<td>wx.navigateBack</td>
<td>关闭当前页面，返回上一页面或多级页面</td>
</tr>
<tr>
<td>我这里给大家举个简单的例子</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>在wxml里设置点击事件<br><img src="https://img-blog.csdnimg.cn/20210106212455465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></li>
<li>然后再js里设置点击后跳转页面<br><img src="https://img-blog.csdnimg.cn/20210106212535285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"><br>这样就可以实现页面跳转了，和使用navigate做跳转一样的效果。<br>其余的几个wx跳转方法，我也会在视频里给大家做演示。</li>
</ul>
<h2 id="20-4，通过switchTab跳转tabbar页面如何携带数据"><a href="#20-4，通过switchTab跳转tabbar页面如何携带数据" class="headerlink" title="20-4，通过switchTab跳转tabbar页面如何携带数据"></a>20-4，通过switchTab跳转tabbar页面如何携带数据</h2><p>我们跳转到tabbar页面是无法直接通过url携带数据，所以我们就要通过别的方式来实现页面跳转时的数据传递，所以这时候可以有两个方式。具体代码我在视频里带大家写一遍。</p>
<h3 id="20-4-1、通过app-js里的globalData"><a href="#20-4-1、通过app-js里的globalData" class="headerlink" title="20-4-1、通过app.js里的globalData"></a>20-4-1、通过app.js里的globalData</h3><p>其实就是通过app.js里的全局变量来传递。</p>
<h3 id="20-4-2、通过本地缓存"><a href="#20-4-2、通过本地缓存" class="headerlink" title="20-4-2、通过本地缓存"></a>20-4-2、通过本地缓存</h3><p>其实就是在A页面存数据到缓存，然后A页面跳转到B页面时通过取本地缓存来拿到数据，进而实现页面跳转传递参数的功能。</p>
<h2 id="20-5、打开别的小程序"><a href="#20-5、打开别的小程序" class="headerlink" title="20-5、打开别的小程序"></a>20-5、打开别的小程序</h2><p>其实我们可以在自己的小程序里通过navigateTo打开别的小程序的，只不过有自己特定的方法：wx.navigateToMiniProgram<br>对应的官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html</a><br><img src="https://img-blog.csdnimg.cn/17eb8d80b92a4be2928744e44f4af1cc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_16,color_FFFFFF,t_70,g_se,x_16" alt="img"><br>其实只需要拿到别的小程序的appid就可以实现这个功能了。</p>
<h1 id="二十一、小程序页面生命周期"><a href="#二十一、小程序页面生命周期" class="headerlink" title="二十一、小程序页面生命周期"></a>二十一、小程序页面生命周期</h1><h2 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html">https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html</a><br>这是官方给出的页面生命周期解释，如下图<br><img src="https://img-blog.csdnimg.cn/328a6cea2929405f8e988467ea6337f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"><br>作为初学者，一开始不一定能看懂，所以我给大家总结成下面所示的。方便大家学习。其实生命周期就是一个小程序页面从创建到销毁的一个时间周期。<br><img src="https://img-blog.csdnimg.cn/20210121203933666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/e3e686d8e7d0488c8721dec24de43176.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="二十二、小程序应用生命周期"><a href="#二十二、小程序应用生命周期" class="headerlink" title="二十二、小程序应用生命周期"></a>二十二、小程序应用生命周期</h1><p><img src="https://img-blog.csdnimg.cn/20210121203911422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html</a></p>
<p>这里最常用的就是下面3个</p>
<h3 id="onLaunch"><a href="#onLaunch" class="headerlink" title="onLaunch()"></a>onLaunch()</h3><p>小程序初始化完成时触发，全局只触发一次。</p>
<h3 id="onShow"><a href="#onShow" class="headerlink" title="onShow()"></a>onShow()</h3><p>小程序启动，或从后台进入前台显示时触发</p>
<h3 id="onHide"><a href="#onHide" class="headerlink" title="onHide()"></a>onHide()</h3><p>小程序从前台进入后台时触发</p>
<h1 id="二十三、scrollview讲解"><a href="#二十三、scrollview讲解" class="headerlink" title="二十三、scrollview讲解"></a>二十三、scrollview讲解</h1><h2 id="23-1、认识scrollview"><a href="#23-1、认识scrollview" class="headerlink" title="23-1、认识scrollview"></a>23-1、认识scrollview</h2><p>首先要去看下官方文档<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html</a><br><img src="https://img-blog.csdnimg.cn/c8426616bcb14000a67cb3fee4a8c40a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="23-2、快速创建100个view快捷方式"><a href="#23-2、快速创建100个view快捷方式" class="headerlink" title="23-2、快速创建100个view快捷方式"></a>23-2、快速创建100个view快捷方式</h2><p>先教大家一个在wxml页面里快速创建100行view代码的快捷方式<br>输入  view{$}*100  然后回车键，就可以在页面里快速创建100行view了。<br><img src="https://img-blog.csdnimg.cn/20210131094725604.png" alt="img"></p>
<h2 id="23-3、设置列表条目隔行不同颜色"><a href="#23-3、设置列表条目隔行不同颜色" class="headerlink" title="23-3、设置列表条目隔行不同颜色"></a>23-3、设置列表条目隔行不同颜色</h2><p>效果图如下：<br><img src="https://img-blog.csdnimg.cn/a95eb958c0f649b1ace6ab17727d133c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"><br>其实这是借助我们css的 :nth-child知识点，如上图所示:nth-child(2n)就是设置偶数行，:nth-child(1n)就是设置奇数行。</p>
<h2 id="23-4、一键置顶，回到列表页面顶部"><a href="#23-4、一键置顶，回到列表页面顶部" class="headerlink" title="23-4、一键置顶，回到列表页面顶部"></a>23-4、一键置顶，回到列表页面顶部</h2><p>主要是借助scroll-view的scroll-top属性，我会在视频里手把手的教大家实现这个功能的<br><img src="https://img-blog.csdnimg.cn/c2ecade32dcf4aaaa05e3a021722e718.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="23-5、让列表里的任意位置滚动到顶部"><a href="#23-5、让列表里的任意位置滚动到顶部" class="headerlink" title="23-5、让列表里的任意位置滚动到顶部"></a>23-5、让列表里的任意位置滚动到顶部</h2><p>主要是借助scroll-view的scroll-into-view属性，我会在视频里手把手的教大家实现这个功能的<br><img src="https://img-blog.csdnimg.cn/458b11911f7f43ae94d815393de6e8d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"><br>注意事项：如上图所示，我们需要给每个条目设置一个id，并且这个id不能是数字开头。<br><img src="https://img-blog.csdnimg.cn/c3003609f931464fa5fd195385552cfa.png" alt="img"><br>对应的js代码如下：<br><img src="https://img-blog.csdnimg.cn/d9f7fad647954a8e97d0177df86f5c3b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yW56iL5bCP55-z5aS0,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="二十四、注册小程序"><a href="#二十四、注册小程序" class="headerlink" title="二十四、注册小程序"></a>二十四、注册小程序</h1><p>我们前面虽然可以用测试号创建小程序,但是测试号有很多功能会受限,比如我们接下来要讲的云开发,必须是注册小程序后才可以使用,所以今天我们就来讲讲小程序的注册.</p>
<h2 id="24-1、其实官方给的注册步骤很详细了"><a href="#24-1、其实官方给的注册步骤很详细了" class="headerlink" title="24-1、其实官方给的注册步骤很详细了"></a>24-1、其实官方给的注册步骤很详细了</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/9620803e90a57d6ce600cdb5cafced2f.png" alt="img"><br>官方注册文档:<a href="https://developers.weixin.qq.com/miniprogram/introduction/">https://developers.weixin.qq.com/miniprogram/introduction/</a></p>
<p>微信小程序注册地址：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a><br>进去以后点击立即注册<br><img src="https://img-blog.csdnimg.cn/20210118170514905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXNoaV8xOTkw,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>进入注册页面时,跟着提示一步步来就可以了<br><img src="https://img-blog.csdnimg.cn/img_convert/b4e63808210224e80f8a5ecec6d9bc6a.png" alt="img"></p>
<h2 id="24-2、注意点"><a href="#24-2、注意点" class="headerlink" title="24-2、注意点"></a>24-2、注意点</h2><ul>
<li>如果只是学习的话,注册个人小程序即可.</li>
<li>如果想商用,想使用微信支付,取用户手机号等复杂功能,可以注册企业小程序,不过企业小程序必须有营业执照才可以注册</li>
<li>一个邮箱只能注册一个小程序</li>
<li>一个身份证可以注册5个，个人小程序</li>
<li>一个企业的营业执照可以注册50个企业小程序</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/2023/01/29/Vue3/</url>
    <content><![CDATA[<h1 id="一、了解vue3"><a href="#一、了解vue3" class="headerlink" title="一、了解vue3"></a>一、了解vue3</h1><ul>
<li>Vue.js 3.0 “One Piece” 正式版在今年9月份发布</li>
<li>2年多开发, 100+位贡献者, 2600+次提交, 600+次PR</li>
<li><strong>Vue3支持vue2的大多数特性</strong></li>
<li><strong>更好的支持Typescript</strong></li>
</ul>
<h2 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升:"></a>性能提升:</h2><ul>
<li>打包大小减少41%</li>
<li>初次渲染快55%, 更新渲染快133%</li>
<li>内存减少54%</li>
<li><strong>使用Proxy代替defineProperty实现数据响应式</strong></li>
<li><strong>重写虚拟DOM的实现和Tree-Shaking</strong></li>
</ul>
<h2 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h2><ul>
<li><p><strong>Composition (组合) API</strong></p>
</li>
<li><p>setup</p>
</li>
<li><ul>
<li>ref 和 reactive</li>
<li>computed 和 watch</li>
<li>新的生命周期函数</li>
<li>provide与inject</li>
<li>…</li>
</ul>
</li>
<li><p>新组件</p>
</li>
<li><ul>
<li>Fragment - 文档碎片</li>
<li>Teleport - 瞬移组件的位置</li>
<li>Suspense - 异步加载组件的loading界面</li>
</ul>
</li>
<li><p>其它API更新</p>
</li>
<li><ul>
<li>全局API的修改</li>
<li>将原来的全局API转移到应用对象</li>
<li>模板语法变化<span id="more"></span></li>
</ul>
</li>
</ul>
<h1 id="二、创建vue3"><a href="#二、创建vue3" class="headerlink" title="二、创建vue3"></a>二、创建vue3</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 安装或者升级</span><br><span class="line">    npm install -g @vue/cli</span><br><span class="line">    ## 保证 vue cli 版本在 4.5.0 以上</span><br><span class="line">    vue --version</span><br><span class="line">    ## 创建项目</span><br><span class="line">    vue create my-project</span><br></pre></td></tr></table></figure>

<h2 id="然后的步骤"><a href="#然后的步骤" class="headerlink" title="然后的步骤"></a>然后的步骤</h2><ul>
<li>Please pick a preset - 选择 *<strong>Manually select features*</strong></li>
<li>Check the features needed for your project - 选择上 *<strong>TypeScript*</strong> ，特别注意点空格是选择，点回车是下一步</li>
<li>Choose a version of Vue.js that you want to start the project with - 选择 *<strong>3.x (Preview)*</strong></li>
<li>Use class-style component syntax - 直接回车</li>
<li>Use Babel alongside TypeScript - 直接回车</li>
<li>Pick a linter &#x2F; formatter config - 直接回车</li>
<li>Use history mode for router? - 直接回车</li>
<li>Pick a linter &#x2F; formatter config - 直接回车</li>
<li>Pick additional lint features - 直接回车</li>
<li>Where do you prefer placing config for Babel, ESLint, etc.? - 直接回车</li>
<li>Save this as a preset for future projects? - 直接回车</li>
</ul>
<h2 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h2><ul>
<li>vite 是一个由原生 ESM 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发，</li>
<li>它做到了<em><strong>本地快速开发启动</strong></em>, 在生产环境下基于 Rollup 打包。</li>
<li>快速的冷启动，不需要等待打包操作；</li>
<li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起；</li>
<li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="三、Composition-API-常用部分"><a href="#三、Composition-API-常用部分" class="headerlink" title="三、Composition API(常用部分)"></a>三、Composition API(常用部分)</h1><p>​	<a href="https://composition-api.vuejs.org/zh/api.html">文档</a></p>
<h3 id="（1）setup"><a href="#（1）setup" class="headerlink" title="（1）setup"></a>（1）setup</h3><ul>
<li>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次</li>
<li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li>
</ul>
<h3 id="（2）ref"><a href="#（2）ref" class="headerlink" title="（2）ref"></a>（2）ref</h3><ul>
<li><p>作用: 定义一个数据的响应式</p>
</li>
<li><p>语法: const xxx &#x3D; ref(initValue): </p>
</li>
<li><ul>
<li>创建一个包含响应式数据的引用(reference)对象</li>
<li>js中操作数据: xxx.value</li>
<li>模板中操作数据: 不需要.value</li>
</ul>
</li>
<li><p>一般用来定义一个基本类型的响应式数据</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  ref</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  /* 在Vue3中依然可以使用data和methods配置, 但建议使用其新语法实现 */</span><br><span class="line">  // data () &#123;</span><br><span class="line">  //   return &#123;</span><br><span class="line">  //     count: 0</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;,</span><br><span class="line">  // methods: &#123;</span><br><span class="line">  //   update () &#123;</span><br><span class="line">  //     this.count++</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;</span><br><span class="line"></span><br><span class="line">  /* 使用vue3的composition API */</span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    // 定义响应式数据 ref对象</span><br><span class="line">    const count = ref(1)</span><br><span class="line">    console.log(count)</span><br><span class="line"></span><br><span class="line">    // 更新响应式数据的函数</span><br><span class="line">    function update () &#123;</span><br><span class="line">      // alert(&#x27;update&#x27;)</span><br><span class="line">      count.value = count.value + 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（3）reactive"><a href="#（3）reactive" class="headerlink" title="（3）reactive"></a>（3）reactive</h3><ul>
<li>作用: 定义多个数据的响应式</li>
<li>const proxy &#x3D; reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li>
<li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;name: &#123;&#123;state.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;age: &#123;&#123;state.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;wife: &#123;&#123;state.wife&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">/* </span><br><span class="line">reactive: </span><br><span class="line">    作用: 定义多个数据的响应式</span><br><span class="line">    const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</span><br><span class="line">    响应式转换是“深层的”：会影响对象内部所有嵌套的属性</span><br><span class="line">    内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</span><br><span class="line">*/</span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    /* </span><br><span class="line">    定义响应式数据对象</span><br><span class="line">    */</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      name: &#x27;tom&#x27;,</span><br><span class="line">      age: 25,</span><br><span class="line">      wife: &#123;</span><br><span class="line">        name: &#x27;marry&#x27;,</span><br><span class="line">        age: 22</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(state, state.wife)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      state.name += &#x27;--&#x27;</span><br><span class="line">      state.age += 1</span><br><span class="line">      state.wife.name += &#x27;++&#x27;</span><br><span class="line">      state.wife.age += 2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      update,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（4）比较Vue2与Vue3的响应式-重要）"><a href="#（4）比较Vue2与Vue3的响应式-重要）" class="headerlink" title="（4）比较Vue2与Vue3的响应式(重要）"></a>（4）比较Vue2与Vue3的响应式(重要）</h3><h4 id="vue2的响应式"><a href="#vue2的响应式" class="headerlink" title="vue2的响应式"></a>vue2的响应式</h4><p>核心: </p>
<ul>
<li>对象: 通过defineProperty对对象的已有属性值的读取和修改进行劫持(监视&#x2F;拦截)</li>
<li>数组: 通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(data, &#x27;count&#x27;, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>问题 </p>
</li>
<li><ul>
<li>对象直接新添加的属性或删除已有属性, 界面不会自动更新</li>
<li>直接通过下标替换元素或更新length, 界面不会自动更新 arr[1] &#x3D; {}</li>
</ul>
</li>
</ul>
<h4 id="Vue3的响应式"><a href="#Vue3的响应式" class="headerlink" title="Vue3的响应式"></a>Vue3的响应式</h4><p>核心: </p>
<ul>
<li><p>通过Proxy(代理): 拦截对data任意属性的任意(13种)操作, 包括属性值的读写, 属性的添加, 属性的删除等…</p>
</li>
<li><p>通过 Reflect(反射): 动态对被代理对象的相应属性进行特定的操作</p>
</li>
<li><p>文档: </p>
</li>
<li><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Proxy(data, &#123;</span><br><span class="line">	// 拦截读取属性值</span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    	return Reflect.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 拦截设置属性值或添加新属性</span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    	return Reflect.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 拦截删除属性</span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    	return Reflect.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = &#x27;tom&#x27;   </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Proxy 与 Reflect&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    const user = &#123;</span><br><span class="line">      name: &quot;John&quot;,</span><br><span class="line">      age: 12</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    proxyUser是代理对象, user是被代理对象</span><br><span class="line">    后面所有的操作都是通过代理对象来操作被代理对象内部属性</span><br><span class="line">    */</span><br><span class="line">    const proxyUser = new Proxy(user, &#123;</span><br><span class="line"></span><br><span class="line">      get(target, prop) &#123;</span><br><span class="line">        console.log(&#x27;劫持get()&#x27;, prop)</span><br><span class="line">        return Reflect.get(target, prop)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      set(target, prop, val) &#123;</span><br><span class="line">        console.log(&#x27;劫持set()&#x27;, prop, val)</span><br><span class="line">        return Reflect.set(target, prop, val); // (2)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      deleteProperty (target, prop) &#123;</span><br><span class="line">        console.log(&#x27;劫持delete属性&#x27;, prop)</span><br><span class="line">        return Reflect.deleteProperty(target, prop)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // 读取属性值</span><br><span class="line">    console.log(proxyUser===user)</span><br><span class="line">    console.log(proxyUser.name, proxyUser.age)</span><br><span class="line">    // 设置属性值</span><br><span class="line">    proxyUser.name = &#x27;bob&#x27;</span><br><span class="line">    proxyUser.age = 13</span><br><span class="line">    console.log(user)</span><br><span class="line">    // 添加属性</span><br><span class="line">    proxyUser.sex = &#x27;男&#x27;</span><br><span class="line">    console.log(user)</span><br><span class="line">    // 删除属性</span><br><span class="line">    delete proxyUser.sex</span><br><span class="line">    console.log(user)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="（5）setup细节"><a href="#（5）setup细节" class="headerlink" title="（5）setup细节"></a>（5）setup细节</h3><ul>
<li><p>setup执行的时机</p>
</li>
<li><ul>
<li>在beforeCreate之前执行(一次), 此时组件对象还没有创建</li>
<li>this是undefined, 不能通过this来访问data&#x2F;computed&#x2F;methods &#x2F; props</li>
<li>其实所有的composition API相关回调函数中也都不可以</li>
</ul>
</li>
<li><p>setup的返回值</p>
</li>
<li><ul>
<li>一般都返回一个对象: 为模板提供数据, 也就是模板中可以直接使用此对象中的所有属性&#x2F;方法</li>
<li>返回对象中的属性会与data函数返回对象的属性合并成为组件对象的属性</li>
<li>返回对象中的方法会与methods中的方法合并成功组件对象的方法</li>
<li>如果有重名, setup优先</li>
<li>注意:</li>
<li>一般不要混合使用: methods中可以访问setup提供的属性和方法, 但在setup方法中不能访问data和methods</li>
<li>setup不能是一个async函数: 因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性数据</li>
</ul>
</li>
<li><p>setup的参数</p>
</li>
<li><ul>
<li>setup(props, context) &#x2F; setup(props, {attrs, slots, emit})</li>
<li>props: 包含props配置声明且传入了的所有属性的对象</li>
<li>attrs: 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</li>
<li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li>
<li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;fn(&#x27;--&#x27;)&quot;&gt;更新&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;child :msg=&quot;msg&quot; msg2=&quot;cba&quot; @fn=&quot;fn&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  ref,</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">import child from &#x27;./child.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const msg = ref(&#x27;abc&#x27;)</span><br><span class="line"></span><br><span class="line">    function fn (content: string) &#123;</span><br><span class="line">      msg.value += content</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;m&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;msg2: &#123;&#123;$attrs.msg2&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  defineComponent</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;child&#x27;,</span><br><span class="line"></span><br><span class="line">  props: [&#x27;msg&#x27;],</span><br><span class="line"></span><br><span class="line">  emits: [&#x27;fn&#x27;], // 可选的, 声明了更利于程序员阅读, 且可以对分发的事件数据进行校验</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    console.log(&#x27;data&#x27;, this)</span><br><span class="line">    return &#123;</span><br><span class="line">      // n: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    console.log(&#x27;beforeCreate&#x27;, this)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    // update () &#123;</span><br><span class="line">    //   this.n++</span><br><span class="line">    //   this.m++</span><br><span class="line">    // &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // setup (props, context) &#123;</span><br><span class="line">  setup (props, &#123;attrs, emit, slots&#125;) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;setup&#x27;, this)</span><br><span class="line">    console.log(props.msg, attrs.msg2, slots, emit)</span><br><span class="line"></span><br><span class="line">    const m = ref(2)</span><br><span class="line">    const n = ref(3)</span><br><span class="line"></span><br><span class="line">    function update () &#123;</span><br><span class="line">      // console.log(&#x27;--&#x27;, this)</span><br><span class="line">      // this.n += 2 </span><br><span class="line">      // this.m += 2</span><br><span class="line"></span><br><span class="line">      m.value += 2</span><br><span class="line">      n.value += 2</span><br><span class="line"></span><br><span class="line">      // 分发自定义事件</span><br><span class="line">      emit(&#x27;fn&#x27;, &#x27;++&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      m,</span><br><span class="line">      n,</span><br><span class="line">      update,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（6）reactive与ref-细节"><a href="#（6）reactive与ref-细节" class="headerlink" title="（6）reactive与ref-细节"></a>（6）reactive与ref-细节</h3><ul>
<li>是Vue3的 composition API中2个最重要的响应式API</li>
<li>ref用来处理基本类型数据, reactive用来处理对象(递归深度响应式)</li>
<li>如果用ref对象&#x2F;数组, 内部会自动将对象&#x2F;数组转换为reactive的代理对象</li>
<li>ref内部: 通过给value属性添加getter&#x2F;setter来实现对数据的劫持</li>
<li>reactive内部: 通过使用Proxy来实现对对象内部所有数据的劫持, 并通过Reflect操作对象内部数据</li>
<li>ref的数据操作: 在js中要.value, 在模板中不需要(内部解析模板时会自动添加.value)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;m1: &#123;&#123;m1&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;m2: &#123;&#123;m2&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;m3: &#123;&#123;m3&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  ref</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const m1 = ref(&#x27;abc&#x27;)</span><br><span class="line">    const m2 = reactive(&#123;x: 1, y: &#123;z: &#x27;abc&#x27;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    // 使用ref处理对象  ==&gt; 对象会被自动reactive为proxy对象</span><br><span class="line">    const m3 = ref(&#123;a1: 2, a2: &#123;a3: &#x27;abc&#x27;&#125;&#125;)</span><br><span class="line">    console.log(m1, m2, m3)</span><br><span class="line">    console.log(m3.value.a2) // 也是一个proxy对象</span><br><span class="line"></span><br><span class="line">    function update() &#123;</span><br><span class="line">      m1.value += &#x27;--&#x27;</span><br><span class="line">      m2.x += 1</span><br><span class="line">      m2.y.z += &#x27;++&#x27;</span><br><span class="line"></span><br><span class="line">      m3.value = &#123;a1: 3, a2: &#123;a3: &#x27;abc---&#x27;&#125;&#125;</span><br><span class="line">      m3.value.a2.a3 += &#x27;==&#x27; // reactive对对象进行了深度数据劫持</span><br><span class="line">      console.log(m3.value.a2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      m1,</span><br><span class="line">      m2,</span><br><span class="line">      m3,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（7）计算属性与监视"><a href="#（7）计算属性与监视" class="headerlink" title="（7）计算属性与监视"></a>（7）计算属性与监视</h3><ul>
<li><p>computed函数:</p>
</li>
<li><ul>
<li>与computed配置功能一致</li>
<li>只有getter</li>
<li>有getter和setter</li>
</ul>
</li>
<li><p>watch函数</p>
</li>
<li><ul>
<li>与watch配置功能一致</li>
<li>监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</li>
<li>默认初始时不执行回调, 但可以通过配置immediate为true, 来指定初始时立即执行第一次</li>
<li>通过配置deep为true, 来指定深度监视</li>
</ul>
</li>
<li><p>watchEffect函数</p>
</li>
<li><ul>
<li>不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据</li>
<li>默认初始时就会执行第一次, 从而可以收集需要监视的数据</li>
<li>监视数据发生变化时回调</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  fistName: &lt;input v-model=&quot;user.firstName&quot;/&gt;&lt;br&gt;</span><br><span class="line">  lastName: &lt;input v-model=&quot;user.lastName&quot;/&gt;&lt;br&gt;</span><br><span class="line">  fullName1: &lt;input v-model=&quot;fullName1&quot;/&gt;&lt;br&gt;</span><br><span class="line">  fullName2: &lt;input v-model=&quot;fullName2&quot;&gt;&lt;br&gt;</span><br><span class="line">  fullName3: &lt;input v-model=&quot;fullName3&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  ref,</span><br><span class="line">  computed,</span><br><span class="line">  watch,</span><br><span class="line">  watchEffect</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const user = reactive(&#123;</span><br><span class="line">      firstName: &#x27;A&#x27;,</span><br><span class="line">      lastName: &#x27;B&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 只有getter的计算属性</span><br><span class="line">    const fullName1 = computed(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;fullName1&#x27;)</span><br><span class="line">      return user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 有getter与setter的计算属性</span><br><span class="line">    const fullName2 = computed(&#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        console.log(&#x27;fullName2 get&#x27;)</span><br><span class="line">        return user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      set (value: string) &#123;</span><br><span class="line">        console.log(&#x27;fullName2 set&#x27;)</span><br><span class="line">        const names = value.split(&#x27;-&#x27;)</span><br><span class="line">        user.firstName = names[0]</span><br><span class="line">        user.lastName = names[1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const fullName3 = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watchEffect: 监视所有回调中使用的数据</span><br><span class="line">    */</span><br><span class="line">    /* </span><br><span class="line">    watchEffect(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;watchEffect&#x27;)</span><br><span class="line">      fullName3.value = user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;) </span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    使用watch的2个特性:</span><br><span class="line">      深度监视</span><br><span class="line">      初始化立即执行</span><br><span class="line">    */</span><br><span class="line">    watch(user, () =&gt; &#123;</span><br><span class="line">      fullName3.value = user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      immediate: true,  // 是否初始化立即执行一次, 默认是false</span><br><span class="line">      deep: true, // 是否是深度监视, 默认是false</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watch一个数据</span><br><span class="line">      默认在数据发生改变时执行回调</span><br><span class="line">    */</span><br><span class="line">    watch(fullName3, (value) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;watch&#x27;)</span><br><span class="line">      const names = value.split(&#x27;-&#x27;)</span><br><span class="line">      user.firstName = names[0]</span><br><span class="line">      user.lastName = names[1]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watch多个数据: </span><br><span class="line">      使用数组来指定</span><br><span class="line">      如果是ref对象, 直接指定</span><br><span class="line">      如果是reactive对象中的属性,  必须通过函数来指定</span><br><span class="line">    */</span><br><span class="line">    watch([() =&gt; user.firstName, () =&gt; user.lastName, fullName3], (values) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;监视多个数据&#x27;, values)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      user,</span><br><span class="line">      fullName1,</span><br><span class="line">      fullName2,</span><br><span class="line">      fullName3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（8）-生命周期"><a href="#（8）-生命周期" class="headerlink" title="（8） 生命周期"></a>（8） 生命周期</h3><p><strong>与 2.x 版本生命周期相对应的组合式 API</strong></p>
<ul>
<li>beforeCreate -&gt; 使用 setup()</li>
<li>created -&gt; 使用 setup()</li>
<li>beforeMount -&gt; onBeforeMount</li>
<li>mounted -&gt; onMounted</li>
<li>beforeUpdate -&gt; onBeforeUpdate</li>
<li>updated -&gt; onUpdated</li>
<li>beforeDestroy -&gt; onBeforeUnmount</li>
<li>destroyed -&gt; onUnmounted</li>
<li>errorCaptured -&gt; onErrorCaptured</li>
</ul>
<p><strong>新增的钩子函数</strong></p>
<p>组合式 API 还提供了以下调试钩子函数：</p>
<ul>
<li>onRenderTracked</li>
<li>onRenderTriggered</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;about&quot;&gt;</span><br><span class="line">  &lt;h2&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  onMounted,</span><br><span class="line">  onUpdated,</span><br><span class="line">  onUnmounted, </span><br><span class="line">  onBeforeMount, </span><br><span class="line">  onBeforeUpdate,</span><br><span class="line">  onBeforeUnmount</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    console.log(&#x27;beforeCreate()&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(&#x27;created&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(&#x27;mounted&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeUpdate () &#123;</span><br><span class="line">    console.log(&#x27;beforeUpdate&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  updated () &#123;</span><br><span class="line">    console.log(&#x27;updated&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeUnmount () &#123;</span><br><span class="line">    console.log(&#x27;beforeUnmount&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unmounted () &#123;</span><br><span class="line">     console.log(&#x27;unmounted&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    </span><br><span class="line">    const msg = ref(&#x27;abc&#x27;)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      msg.value += &#x27;--&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onBeforeMount(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onBeforeMount&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onMounted&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onBeforeUpdate&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onUpdated(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onUpdated&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onBeforeUnmount&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onUnmounted&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;isShow=!isShow&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;Child v-if=&quot;isShow&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（9）自定义hook函数"><a href="#（9）自定义hook函数" class="headerlink" title="（9）自定义hook函数"></a>（9）自定义hook函数</h3><ul>
<li>使用Vue3的组合API封装的可复用的功能函数</li>
<li>自定义hook的作用类似于vue2中的mixin技术</li>
<li>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</li>
<li>需求1: 收集用户鼠标点击的页面坐标hooks&#x2F;useMousePosition.ts</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mport &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">收集用户鼠标点击的页面坐标</span><br><span class="line">*/</span><br><span class="line">export default function useMousePosition () &#123;</span><br><span class="line">  // 初始化坐标数据</span><br><span class="line">  const x = ref(-1)</span><br><span class="line">  const y = ref(-1)</span><br><span class="line"></span><br><span class="line">  // 用于收集点击事件坐标的函数</span><br><span class="line">  const updatePosition = (e: MouseEvent) =&gt; &#123;</span><br><span class="line">    x.value = e.pageX</span><br><span class="line">    y.value = e.pageY</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 挂载后绑定点击监听</span><br><span class="line">  onMounted(() =&gt; &#123;</span><br><span class="line">    document.addEventListener(&#x27;click&#x27;, updatePosition)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 卸载前解绑点击监听</span><br><span class="line">  onUnmounted(() =&gt; &#123;</span><br><span class="line">    document.removeEventListener(&#x27;click&#x27;, updatePosition)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return &#123;x, y&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;x: &#123;&#123;x&#125;&#125;, y: &#123;&#123;y&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line">/* </span><br><span class="line">在组件中引入并使用自定义hook</span><br><span class="line">自定义hook的作用类似于vue2中的mixin技术</span><br><span class="line">自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</span><br><span class="line">*/</span><br><span class="line">import useMousePosition from &#x27;./hooks/useMousePosition&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    const &#123;x, y&#125; = useMousePosition()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>利用TS泛型强化类型检查</li>
<li>需求2: 封装发ajax请求的hook函数</li>
</ul>
<p>​       hooks&#x2F;useRequest.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">使用axios发送异步ajax请求</span><br><span class="line">*/</span><br><span class="line">export default function useUrlLoader&lt;T&gt;(url: string) &#123;</span><br><span class="line"></span><br><span class="line">  const result = ref&lt;T | null&gt;(null)</span><br><span class="line">  const loading = ref(true)</span><br><span class="line">  const errorMsg = ref(null)</span><br><span class="line"></span><br><span class="line">  axios.get(url)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">      loading.value = false</span><br><span class="line">      result.value = response.data</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(e =&gt; &#123;</span><br><span class="line">      loading.value = false</span><br><span class="line">      errorMsg.value = e.message || &#x27;未知错误&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    loading,</span><br><span class="line">    result,</span><br><span class="line">    errorMsg,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;about&quot;&gt;</span><br><span class="line">  &lt;h2 v-if=&quot;loading&quot;&gt;LOADING...&lt;/h2&gt;</span><br><span class="line">  &lt;h2 v-else-if=&quot;errorMsg&quot;&gt;&#123;&#123;errorMsg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- &lt;ul v-else&gt;</span><br><span class="line">    &lt;li&gt;id: &#123;&#123;result.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;name: &#123;&#123;result.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;distance: &#123;&#123;result.distance&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul v-for=&quot;p in result&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &lt;li&gt;id: &#123;&#123;p.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;title: &#123;&#123;p.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;price: &#123;&#123;p.price&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;!-- &lt;img v-if=&quot;result&quot; :src=&quot;result[0].url&quot; alt=&quot;&quot;&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  watch</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line">import useRequest from &#x27;./hooks/useRequest&#x27;</span><br><span class="line"></span><br><span class="line">// 地址数据接口</span><br><span class="line">interface AddressResult &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  distance: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 产品数据接口</span><br><span class="line">interface ProductResult &#123;</span><br><span class="line">  id: string;</span><br><span class="line">  title: string;</span><br><span class="line">  price: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    // const &#123;loading, result, errorMsg&#125; = useRequest&lt;AddressResult&gt;(&#x27;/data/address.json&#x27;)</span><br><span class="line">    const &#123;loading, result, errorMsg&#125; = useRequest&lt;ProductResult[]&gt;(&#x27;/data/products.json&#x27;)</span><br><span class="line"></span><br><span class="line">    watch(result, () =&gt; &#123;</span><br><span class="line">      if (result.value) &#123;</span><br><span class="line">        console.log(result.value.length) // 有提示</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      loading,</span><br><span class="line">      result, </span><br><span class="line">      errorMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（10）-toRefs"><a href="#（10）-toRefs" class="headerlink" title="（10） toRefs"></a>（10） toRefs</h3><p>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</p>
<p>应用: 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</p>
<p>问题: reactive 对象取出的所有属性值都是非响应式的</p>
<p>解决: 利用 toRefs 可以将一个响应式 reactive 对象的所有原始属性转换为响应式的 ref 属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;foo: &#123;&#123;foo&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;bar: &#123;&#123;bar&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;foo2: &#123;&#123;foo2&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;bar2: &#123;&#123;bar2&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">toRefs:</span><br><span class="line">  将响应式对象中所有属性包装为ref对象, 并返回包含这些ref对象的普通对象</span><br><span class="line">  应用: 当从合成函数返回响应式对象时，toRefs 非常有用，</span><br><span class="line">        这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      foo: &#x27;a&#x27;,</span><br><span class="line">      bar: &#x27;b&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const stateAsRefs = toRefs(state)</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      state.foo += &#x27;++&#x27;</span><br><span class="line">      state.bar += &#x27;++&#x27;</span><br><span class="line">    &#125;, 2000);</span><br><span class="line"></span><br><span class="line">    const &#123;foo2, bar2&#125; = useReatureX()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      // ...state,</span><br><span class="line">      ...stateAsRefs,</span><br><span class="line">      foo2, </span><br><span class="line">      bar2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function useReatureX() &#123;</span><br><span class="line">  const state = reactive(&#123;</span><br><span class="line">    foo2: &#x27;a&#x27;,</span><br><span class="line">    bar2: &#x27;b&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    state.foo2 += &#x27;++&#x27;</span><br><span class="line">    state.bar2 += &#x27;++&#x27;</span><br><span class="line">  &#125;, 2000);</span><br><span class="line"></span><br><span class="line">  return toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（11）-ref获取元素"><a href="#（11）-ref获取元素" class="headerlink" title="（11） ref获取元素"></a>（11） ref获取元素</h3><p>利用ref函数获取组件中的标签元素</p>
<p>功能需求: 让输入框自动获取焦点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot;&gt;---</span><br><span class="line">  &lt;input type=&quot;text&quot; ref=&quot;inputRef&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">ref获取元素: 利用ref函数获取组件中的标签元素</span><br><span class="line">功能需求: 让输入框自动获取焦点</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const inputRef = ref&lt;HTMLElement|null&gt;(null)</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      inputRef.value &amp;&amp; inputRef.value.focus()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      inputRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Composition-API-其它部分"><a href="#Composition-API-其它部分" class="headerlink" title="Composition API(其它部分)"></a>Composition API(其它部分)</h2><h3 id="（1）shallowReactive-与-shallowRef"><a href="#（1）shallowReactive-与-shallowRef" class="headerlink" title="（1）shallowReactive 与 shallowRef"></a>（1）shallowReactive 与 shallowRef</h3><ul>
<li>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</li>
<li>shallowRef: 只处理了value的响应式, 不进行对象的reactive处理</li>
<li>什么时候用浅响应式呢?</li>
<li>一般情况下使用ref和reactive即可</li>
<li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive</li>
<li>如果有一个对象数据, 后面会产生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h3&gt;m1: &#123;&#123;m1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;m2: &#123;&#123;m2&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;m3: &#123;&#123;m3&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;m4: &#123;&#123;m4&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, ref, shallowReactive, shallowRef &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const m1 = reactive(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line">    const m2 = shallowReactive(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    const m3 = ref(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line">    const m4 = shallowRef(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      // m1.b.c += 1</span><br><span class="line">      // m2.b.c += 1</span><br><span class="line"></span><br><span class="line">      // m3.value.a += 1</span><br><span class="line">      m4.value.a += 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      m1,</span><br><span class="line">      m2,</span><br><span class="line">      m3,</span><br><span class="line">      m4,</span><br><span class="line">      update,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（2）readonly-与-shallowReadonly"><a href="#（2）readonly-与-shallowReadonly" class="headerlink" title="（2）readonly 与 shallowReadonly"></a>（2）readonly 与 shallowReadonly</h3><ul>
<li><p>readonly: </p>
</li>
<li><ul>
<li>深度只读数据</li>
<li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</li>
<li>只读代理是深层的：访问的任何嵌套 property 也是只读的。</li>
</ul>
</li>
<li><p>shallowReadonly </p>
</li>
<li><ul>
<li>浅只读数据</li>
<li>创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换</li>
</ul>
</li>
<li><p>应用场景: </p>
</li>
<li><ul>
<li>在某些特定情况下, 我们可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;state&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly, shallowReadonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: &#123;</span><br><span class="line">        c: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // const rState1 = readonly(state)</span><br><span class="line">    const rState2 = shallowReadonly(state)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      // rState1.a++ // error</span><br><span class="line">      // rState1.b.c++ // error</span><br><span class="line"></span><br><span class="line">      // rState2.a++ // error</span><br><span class="line">      rState2.b.c++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（3）-toRaw-与-markRaw"><a href="#（3）-toRaw-与-markRaw" class="headerlink" title="（3） toRaw 与 markRaw"></a>（3） toRaw 与 markRaw</h3><ul>
<li><p>toRaw </p>
</li>
<li><ul>
<li>返回由 reactive 或 readonly 方法转换成响应式代理的普通对象。</li>
<li>这是一个还原方法，可用于临时读取，访问不会被代理&#x2F;跟踪，写入时也不会触发界面更新。</li>
</ul>
</li>
<li><p>markRaw </p>
</li>
<li><ul>
<li>标记一个对象，使其永远不会转换为代理。返回对象本身</li>
<li>应用场景:</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>有些值不应被设置为响应式的，例如复杂的第三方类实例或 Vue 组件对象。</li>
<li>当渲染具有不可变数据源的大列表时，跳过代理转换可以提高性能。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;state&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;testToRaw&quot;&gt;测试toRaw&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;testMarkRaw&quot;&gt;测试markRaw&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">toRaw: 得到reactive代理对象的目标数据对象</span><br><span class="line">*/</span><br><span class="line">import &#123;</span><br><span class="line">  markRaw,</span><br><span class="line">  reactive, toRaw,</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const state = reactive&lt;any&gt;(&#123;</span><br><span class="line">      name: &#x27;tom&#x27;,</span><br><span class="line">      age: 25,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const testToRaw = () =&gt; &#123;</span><br><span class="line">      const user = toRaw(state)</span><br><span class="line">      user.age++  // 界面不会更新</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const testMarkRaw = () =&gt; &#123;</span><br><span class="line">      const likes = [&#x27;a&#x27;, &#x27;b&#x27;]</span><br><span class="line">      // state.likes = likes</span><br><span class="line">      state.likes = markRaw(likes) // likes数组就不再是响应式的了</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        state.likes[0] += &#x27;--&#x27;</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      testToRaw,</span><br><span class="line">      testMarkRaw,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（4）toRef"><a href="#（4）toRef" class="headerlink" title="（4）toRef"></a>（4）toRef</h3><ul>
<li>为源响应式对象上的某个属性创建一个 ref对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</li>
<li>区别ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</li>
<li>应用: 当要将 某个prop 的 ref 传递给复合函数时，toRef 很有用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;foo&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;foo2&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Child :foo=&quot;foo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/*</span><br><span class="line">toRef:</span><br><span class="line">  为源响应式对象上的某个属性创建一个 ref对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</span><br><span class="line">  区别ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</span><br><span class="line">  应用: 当要将某个 prop 的 ref 传递给复合函数时，toRef 很有用</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  toRef,</span><br><span class="line">  ref,</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      foo: 1,</span><br><span class="line">      bar: 2</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const foo = toRef(state, &#x27;foo&#x27;)</span><br><span class="line">    const foo2 = ref(state.foo)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      state.foo++</span><br><span class="line">      // foo.value++</span><br><span class="line">      // foo2.value++  // foo和state中的数据不会更新</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      foo,</span><br><span class="line">      foo2,</span><br><span class="line">      update,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Child&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;foo&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;length&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, defineComponent, Ref, toRef &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const component = defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      require: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setup (props, context) &#123;</span><br><span class="line">    const length = useFeatureX(toRef(props, &#x27;foo&#x27;))</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function useFeatureX(foo: Ref) &#123;</span><br><span class="line">  const lenth = computed(() =&gt; foo.value.length)</span><br><span class="line"></span><br><span class="line">  return lenth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default component</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（5）customRef"><a href="#（5）customRef" class="headerlink" title="（5）customRef"></a>（5）customRef</h3><ul>
<li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li>
<li>需求: 使用 customRef 实现 debounce 的示例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;input v-model=&quot;keyword&quot; placeholder=&quot;搜索关键字&quot;/&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;keyword&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/*</span><br><span class="line">customRef:</span><br><span class="line">  创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</span><br><span class="line"></span><br><span class="line">需求: </span><br><span class="line">  使用 customRef 实现 debounce 的示例</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  customRef</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const keyword = useDebouncedRef(&#x27;&#x27;, 500)</span><br><span class="line">    console.log(keyword)</span><br><span class="line">    return &#123;</span><br><span class="line">      keyword</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">实现函数防抖的自定义ref</span><br><span class="line">*/</span><br><span class="line">function useDebouncedRef&lt;T&gt;(value: T, delay = 200) &#123;</span><br><span class="line">  let timeout: number</span><br><span class="line">  return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        // 告诉Vue追踪数据</span><br><span class="line">        track()</span><br><span class="line">        return value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue: T) &#123;</span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">        timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">          value = newValue</span><br><span class="line">          // 告诉Vue去触发界面更新</span><br><span class="line">          trigger()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（6）provide-与-inject"><a href="#（6）provide-与-inject" class="headerlink" title="（6）provide 与 inject"></a>（6）provide 与 inject</h3><ul>
<li>provide和inject提供依赖注入，功能类似 2.x 的provide&#x2F;inject</li>
<li>实现跨层级组件(祖孙)间通信</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;当前颜色: &#123;&#123;color&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;red&#x27;&quot;&gt;红&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;yellow&#x27;&quot;&gt;黄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;blue&#x27;&quot;&gt;蓝&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;Son /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">- provide` 和 `inject` 提供依赖注入，功能类似 2.x 的 `provide/inject</span><br><span class="line">- 实现跨层级组件(祖孙)间通信</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ProvideInject&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    </span><br><span class="line">    const color = ref(&#x27;red&#x27;)</span><br><span class="line"></span><br><span class="line">    provide(&#x27;color&#x27;, color)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      color</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;子组件&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;GrandSon /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import GrandSon from &#x27;./GrandSon.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandSon</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3 :style=&quot;&#123;color&#125;&quot;&gt;孙子组件: &#123;&#123;color&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const color = inject(&#x27;color&#x27;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      color</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（7）响应式数据的判断"><a href="#（7）响应式数据的判断" class="headerlink" title="（7）响应式数据的判断"></a>（7）响应式数据的判断</h3><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 reactive 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 readonly 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</li>
</ul>
<h2 id="手写组合API"><a href="#手写组合API" class="headerlink" title="手写组合API"></a>手写组合API</h2><h3 id="（1）-shallowReactive-与-reactive"><a href="#（1）-shallowReactive-与-reactive" class="headerlink" title="（1） shallowReactive 与 reactive"></a>（1） shallowReactive 与 reactive</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reactiveHandler = &#123;</span><br><span class="line">  get (target, key) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key===<span class="string">&#x27;_is_reactive&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set (target, key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据已更新, 去更新界面&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据已删除, 去更新界面&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">自定义shallowReactive</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowReactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, reactiveHandler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">自定义reactive</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span> (target) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; <span class="keyword">typeof</span> target===<span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123; <span class="comment">// 数组</span></span><br><span class="line">      target.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        target[index] = <span class="title function_">reactive</span>(item)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 对象</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(target).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        target[key] = <span class="title function_">reactive</span>(target[key])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, reactiveHandler)</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试自定义shallowReactive */</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">a</span> = &#123;<span class="attr">b</span>: <span class="number">4</span>&#125; <span class="comment">// 劫持到了</span></span><br><span class="line">proxy.<span class="property">a</span>.<span class="property">b</span> = <span class="number">5</span> <span class="comment">// 没有劫持到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试自定义reactive */</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: [&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;],</span><br><span class="line">  <span class="attr">c</span>: &#123;<span class="attr">x</span>: [<span class="number">11</span>]&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy)</span><br><span class="line">proxy.<span class="property">b</span>[<span class="number">0</span>].<span class="property">x</span> += <span class="number">1</span></span><br><span class="line">proxy.<span class="property">c</span>.<span class="property">x</span>[<span class="number">0</span>] += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）shallowRef-与-ref"><a href="#（2）shallowRef-与-ref" class="headerlink" title="（2）shallowRef 与 ref"></a>（2）shallowRef 与 ref</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义shallowRef</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowRef</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;</span><br><span class="line">    <span class="attr">_value</span>: target, <span class="comment">// 用来保存数据的内部属性</span></span><br><span class="line">    <span class="attr">_is_ref</span>: <span class="literal">true</span>, <span class="comment">// 用来标识是ref对象</span></span><br><span class="line">    get value () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">    &#125;,</span><br><span class="line">    set value (val) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = val</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set value 数据已更新, 去更新界面&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">自定义ref</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; <span class="keyword">typeof</span> target===<span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    target = <span class="title function_">reactive</span>(target)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = &#123;</span><br><span class="line">    <span class="attr">_value</span>: target, <span class="comment">// 用来保存数据的内部属性</span></span><br><span class="line">    <span class="attr">_is_ref</span>: <span class="literal">true</span>, <span class="comment">// 用来标识是ref对象</span></span><br><span class="line">    get value () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">    &#125;,</span><br><span class="line">    set value (val) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = val</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set value 数据已更新, 去更新界面&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试自定义shallowRef */</span></span><br><span class="line"><span class="keyword">const</span> ref3 = <span class="title function_">shallowRef</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">ref3.<span class="property">value</span> = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">ref3.<span class="property">value</span>.<span class="property">a</span> = <span class="string">&#x27;yyy&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试自定义ref */</span></span><br><span class="line"><span class="keyword">const</span> ref1 = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> ref2 = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: [&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;],</span><br><span class="line">  <span class="attr">c</span>: &#123;<span class="attr">x</span>: [<span class="number">11</span>]&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">ref1.<span class="property">value</span>++</span><br><span class="line">ref2.<span class="property">value</span>.<span class="property">b</span>[<span class="number">0</span>].<span class="property">x</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ref1, ref2)</span><br></pre></td></tr></table></figure>

<h3 id="（3）-shallowReadonly-与-readonly"><a href="#（3）-shallowReadonly-与-readonly" class="headerlink" title="（3） shallowReadonly 与 readonly"></a>（3） shallowReadonly 与 readonly</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> readonlyHandler = &#123;</span><br><span class="line">  get (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key===<span class="string">&#x27;_is_readonly&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;只读的, 不能修改&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  deleteProperty () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;只读的, 不能删除&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">自定义shallowReadonly</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowReadonly</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, readonlyHandler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">自定义readonly</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; <span class="keyword">typeof</span> target===<span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123; <span class="comment">// 数组</span></span><br><span class="line">      target.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        target[index] = <span class="title function_">readonly</span>(item)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 对象</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(target).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        target[key] = <span class="title function_">readonly</span>(target[key])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, readonlyHandler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> proxy </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试自定义readonly */</span></span><br><span class="line"><span class="comment">/* 测试自定义shallowReadonly */</span></span><br><span class="line"><span class="keyword">const</span> objReadOnly = <span class="title function_">readonly</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> objReadOnly2 = <span class="title function_">shallowReadonly</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">objReadOnly.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">objReadOnly.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">objReadOnly2.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">objReadOnly2.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="（4）-isRef-isReactive-与-isReadonly"><a href="#（4）-isRef-isReactive-与-isReadonly" class="headerlink" title="（4） isRef, isReactive 与 isReadonly"></a>（4） isRef, isReactive 与 isReadonly</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">判断是否是ref对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRef</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj &amp;&amp; obj.<span class="property">_is_ref</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">判断是否是reactive对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isReactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj &amp;&amp; obj.<span class="property">_is_reactive</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">判断是否是readonly对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isReadonly</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj &amp;&amp; obj.<span class="property">_is_readonly</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">是否是reactive或readonly产生的代理对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isProxy</span> (obj) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isReactive</span>(obj) || <span class="title function_">isReadonly</span>(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试判断函数 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(<span class="title function_">reactive</span>(&#123;&#125;)))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(<span class="title function_">ref</span>(&#123;&#125;)))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReadonly</span>(<span class="title function_">readonly</span>(&#123;&#125;)))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isProxy</span>(<span class="title function_">reactive</span>(&#123;&#125;)))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isProxy</span>(<span class="title function_">readonly</span>(&#123;&#125;)))</span><br></pre></td></tr></table></figure>

<h2 id="Composition-API-VS-Option-API"><a href="#Composition-API-VS-Option-API" class="headerlink" title="Composition API VS Option API"></a>Composition API VS Option API</h2><h3 id="（1）Option-API的问题"><a href="#（1）Option-API的问题" class="headerlink" title="（1）Option API的问题"></a>（1）Option API的问题</h3><ul>
<li>在传统的Vue OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 ，滚动条反复上下移动</li>
</ul>
<h3 id="（2）-使用Compisition-API"><a href="#（2）-使用Compisition-API" class="headerlink" title="（2） 使用Compisition API"></a>（2） 使用Compisition API</h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起</p>
<h1 id="四、其它新组合和API"><a href="#四、其它新组合和API" class="headerlink" title="四、其它新组合和API"></a>四、其它新组合和API</h1><h2 id="1-新组件"><a href="#1-新组件" class="headerlink" title="1. 新组件"></a>1. 新组件</h2><h3 id="（1）-Fragment-片断"><a href="#（1）-Fragment-片断" class="headerlink" title="（1） Fragment(片断)"></a>（1） Fragment(片断)</h3><ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（2）-Teleport-瞬移"><a href="#（2）-Teleport-瞬移" class="headerlink" title="（2） Teleport(瞬移)"></a>（2） Teleport(瞬移)</h3><ul>
<li>Teleport 提供了一种干净的方法, 让组件的html在父组件界面外的特定标签(很可能是body)下插入显示</li>
</ul>
<p>ModalButton.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;modalOpen = true&quot;&gt;</span><br><span class="line">    Open full screen modal! (With teleport!)</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;modalOpen&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        I&#x27;m a teleported modal! </span><br><span class="line">        (My parent is &quot;body&quot;)</span><br><span class="line">        &lt;button @click=&quot;modalOpen = false&quot;&gt;</span><br><span class="line">          Close</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;modal-button&#x27;,</span><br><span class="line">    setup () &#123;</span><br><span class="line">      const modalOpen = ref(false)</span><br><span class="line">      return &#123;</span><br><span class="line">        modalOpen</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .modal &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0; right: 0; bottom: 0; left: 0;</span><br><span class="line">    background-color: rgba(0,0,0,.5);</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .modal div &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    background-color: white;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;modal-button&gt;&lt;/modal-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import ModalButton from &#x27;./ModalButton.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    ModalButton</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（3）-Suspense-不确定的"><a href="#（3）-Suspense-不确定的" class="headerlink" title="（3） Suspense(不确定的)"></a>（3） Suspense(不确定的)</h3><ul>
<li>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">    &lt;template v-slot:default&gt;</span><br><span class="line">      &lt;AsyncComp/&gt;</span><br><span class="line">      &lt;!-- &lt;AsyncAddress/&gt; --&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template v-slot:fallback&gt;</span><br><span class="line">      &lt;h1&gt;LOADING...&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">异步组件 + Suspense组件</span><br><span class="line">*/</span><br><span class="line">// import AsyncComp from &#x27;./AsyncComp.vue&#x27;</span><br><span class="line">import AsyncAddress from &#x27;./AsyncAddress.vue&#x27;</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">const AsyncComp = defineAsyncComponent(() =&gt; import(&#x27;./AsyncComp.vue&#x27;))</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    AsyncComp,</span><br><span class="line">    AsyncAddress</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>AsyncComp.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;AsyncComp22&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AsyncComp&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    //   setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(&#123;</span><br><span class="line">    //       msg: &#x27;abc&#x27;</span><br><span class="line">    //     &#125;)</span><br><span class="line">    //   &#125;, 2000)</span><br><span class="line">    // &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;abc&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>AsyncAddress.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;data&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    const result = await axios.get(&#x27;/data/address.json&#x27;)</span><br><span class="line">    return &#123;</span><br><span class="line">      data: result.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="其他新的API"><a href="#其他新的API" class="headerlink" title="其他新的API"></a>其他新的API</h2><h3 id="全新的全局API"><a href="#全新的全局API" class="headerlink" title="全新的全局API"></a>全新的全局API</h3><ul>
<li>createApp()</li>
<li>defineProperty()</li>
<li>defineAsyncComponent()</li>
<li>nextTick()</li>
</ul>
<h3 id="将原来的全局API转移到应用对象"><a href="#将原来的全局API转移到应用对象" class="headerlink" title="将原来的全局API转移到应用对象"></a>将原来的全局API转移到应用对象</h3><ul>
<li>app.component()</li>
<li>app.config()</li>
<li>app.directive()</li>
<li>app.mount()</li>
<li>app.unmount()</li>
<li>app.use()</li>
</ul>
<h3 id="模板语法变化"><a href="#模板语法变化" class="headerlink" title="模板语法变化"></a>模板语法变化</h3><ul>
<li><p>v-model的本质变化 </p>
</li>
<li><ul>
<li>prop：value -&gt; modelValue；</li>
<li>event：input -&gt; update:modelValue；</li>
</ul>
</li>
<li><p>.sync修改符已移除, 由v-model代替 </p>
</li>
<li><p>v-if优先v-for解析</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2023/01/29/Git/</url>
    <content><![CDATA[<h2 id="git常用指令面板"><a href="#git常用指令面板" class="headerlink" title="git常用指令面板"></a>git常用指令面板</h2><p><img src="https://pic.imgdb.cn/item/63d683edface21e9ef3b5ada.png"></p>
<span id="more"></span>

<h2 id="版本控制："><a href="#版本控制：" class="headerlink" title="版本控制："></a>版本控制：</h2><p>简单来说，版本控制在软件开发中，可以帮助程序员进行代码的追踪、维护、控制等等一系列的操作。</p>
<h3 id="版本控制的功能："><a href="#版本控制的功能：" class="headerlink" title="版本控制的功能："></a>版本控制的功能：</h3><h4 id="不同版本的存储管理："><a href="#不同版本的存储管理：" class="headerlink" title="不同版本的存储管理："></a>不同版本的存储管理：</h4><p>一个项目会不断进行版本的迭代，来修复之前的一些问题、增加新的功能、需求，甚至包括项目的重构； </p>
<p>如果我们通过手动来维护一系列的项目备份，简直是一场噩梦； </p>
<h4 id="重大版本的备份维护："><a href="#重大版本的备份维护：" class="headerlink" title="重大版本的备份维护："></a>重大版本的备份维护：</h4><p>对于很多重大的版本，我们会进行备份管理； </p>
<h4 id="恢复之前的项目版本："><a href="#恢复之前的项目版本：" class="headerlink" title="恢复之前的项目版本："></a>恢复之前的项目版本：</h4><p>当我们开发过程中发生一些严重的问题时，想要恢复之前的操作或者回到之前某个版本； </p>
<h4 id="记录项目的点点滴滴："><a href="#记录项目的点点滴滴：" class="headerlink" title="记录项目的点点滴滴："></a>记录项目的点点滴滴：</h4><p>如果我们每一个功能的修改、bug的修复、新的需求更改都需要记录下来，版本控制可以很好的解决； </p>
<h4 id="多人开发的代码合并："><a href="#多人开发的代码合并：" class="headerlink" title="多人开发的代码合并："></a>多人开发的代码合并：</h4><p>项目中通常都是多人开发，将多人代码进行合并，并且在出现冲突时更好的进行处理；</p>
<h3 id="检测当前的配置信息：git-config-–list"><a href="#检测当前的配置信息：git-config-–list" class="headerlink" title="检测当前的配置信息：git config –list"></a>检测当前的配置信息：git config –list</h3><p><img src="https://pic.imgdb.cn/item/63d6840aface21e9ef3bb691.png"></p>
<h2 id="获取Git仓库-–-git-init-x2F-git-clone"><a href="#获取Git仓库-–-git-init-x2F-git-clone" class="headerlink" title="获取Git仓库 – git init&#x2F;git clone"></a>获取Git仓库 – git init&#x2F;git clone</h2><p><strong>我们需要一个Git来管理源代码，那么我们本地也需要有一个Git仓库。</strong> </p>
<h3 id="通常有两种获取-Git-项目仓库的方式："><a href="#通常有两种获取-Git-项目仓库的方式：" class="headerlink" title="通常有两种获取 Git 项目仓库的方式："></a>通常有两种获取 Git 项目仓库的方式：</h3><p>方式一：初始化一个Git仓库，并且可以将当前项目的文件都添加到Git仓库中（目前很多的脚手架在创建项目时都会默认创建一个Git仓库）； </p>
<p>方式二：从其它服务器 克隆（clone） 一个已存在的 Git 仓库（第一天到公司通常我们需要做这个操作）； </p>
<h3 id="方式一：初始化Git仓库"><a href="#方式一：初始化Git仓库" class="headerlink" title="方式一：初始化Git仓库"></a>方式一：初始化Git仓库</h3><p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的核心； </p>
<p>但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪； </p>
<p>git init</p>
<h3 id="方式二：从Git远程仓库"><a href="#方式二：从Git远程仓库" class="headerlink" title="方式二：从Git远程仓库"></a>方式二：从Git远程仓库</h3><p>git clone <a href="https://github.com/coderwhy/hy-react-web-music.git">https://github.com/coderwhy/hy-react-web-music.git</a></p>
<h2 id="文件的状态划分"><a href="#文件的状态划分" class="headerlink" title="文件的状态划分"></a>文件的状态划分</h2><p><strong>现在我们的电脑上已经有一个Git仓库：</strong> </p>
<p>在实际开发中，你需要将某些文件交由这个Git仓库来管理； </p>
<p>并且我们之后会修改文件的内容，当达成某一个目标时，想要记录下来这次操作，就会将它提交到仓库中； </p>
<p><strong>那么我们需要对文件来划分不同的状态，以确定这个文件是否已经归于Git仓库的管理：</strong> </p>
<p>未跟踪：默认情况下，Git仓库下的文件也没有添加到Git仓库管理中，我们需要通过add命令来操作； </p>
<p>已跟踪：添加到Git仓库管理的文件处于已跟踪状态，Git可以对其进行各种跟踪管理； </p>
<p><strong>已跟踪的文件又可以进行细分状态划分：</strong> </p>
<p>staged：暂缓区中的文件状态； </p>
<p>Unmodified：commit命令，可以将staged中文件提交到Git仓库 </p>
<p>Modified：修改了某个文件后，会处于Modified状态； </p>
<p><strong>在工作时，你可以选择性地将这些修改过的文件放入暂存区；</strong> </p>
<p><strong>然后提交所有已暂存的修改，如此反复</strong></p>
<p><strong>检测文件的状态 - git status</strong></p>
<p><strong>我们在有Git仓库的目录下新建一个文件，查看文件的状态：</strong> </p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p><img src="https://pic.imgdb.cn/item/63d6845bface21e9ef3c636b.png"></p>
<p><strong>Untracked files：未跟踪的文件</strong> </p>
<p>未跟踪的文件意味着 Git 在之前的提交中没有这些文件； </p>
<p>Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”； </p>
<p><strong>我们也可以查看更加简洁的状态信息：</strong> </p>
<p>git status –s              </p>
<p>git status –short               <img src="https://pic.imgdb.cn/item/63d68466face21e9ef3c7c74.png"></p>
<p>左栏指明了暂存区的状态，右栏指明了工作区的状态； </p>
<h2 id="文件添加到暂存区-–-git-add"><a href="#文件添加到暂存区-–-git-add" class="headerlink" title="文件添加到暂存区 – git add"></a>文件添加到暂存区 – git add</h2><h2 id="文件更新提交-–-git-commit"><a href="#文件更新提交-–-git-commit" class="headerlink" title="文件更新提交 – git commit"></a>文件更新提交 – git commit</h2><p><strong>现在的暂存区已经准备就绪，可以提交了。</strong> </p>
<p>每次准备提交前，先用 git status 看下，你所需要的文件是不是都已暂存起来了； </p>
<p>再运行提交命令 git commit； </p>
<p>可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行; </p>
<p><strong>如果我们修改文件的add操作，加上commit的操作有点繁琐，那么可以将两个命令结合来使用：</strong> </p>
<p><strong>文件更新提交 – git commit</strong> </p>
<h3 id="git-commit-–m-“提交信息”"><a href="#git-commit-–m-“提交信息”" class="headerlink" title="git commit –m “提交信息”"></a>git commit –m “提交信息”</h3><p><img src="https://pic.imgdb.cn/item/63d68475face21e9ef3c9e13.png"></p>
<p><strong>如果我们修改文件的add操作，加上commit的操作有点繁琐，那么可以将两个命令结合来使用：</strong></p>
<h3 id="git-commit-a-m-“修改了bbb文件”"><a href="#git-commit-a-m-“修改了bbb文件”" class="headerlink" title="git commit -a -m “修改了bbb文件”"></a>git commit -a -m “修改了bbb文件”</h3><p><img src="https://pic.imgdb.cn/item/63d6847eface21e9ef3cb384.png"></p>
<h2 id="查看提交的历史-–-git-log"><a href="#查看提交的历史-–-git-log" class="headerlink" title="查看提交的历史 – git log"></a>查看提交的历史 – git log</h2><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p><img src="https://pic.imgdb.cn/item/63d6848dface21e9ef3cd43c.png"></p>
<h3 id="git-log-–pretty-x3D-oneline-–graph"><a href="#git-log-–pretty-x3D-oneline-–graph" class="headerlink" title="git log –pretty&#x3D;oneline –graph"></a>git log –pretty&#x3D;oneline –graph</h3><p><img src="https://pic.imgdb.cn/item/63d68496face21e9ef3ce899.png"></p>
<h2 id="版本回退-–-git-reset"><a href="#版本回退-–-git-reset" class="headerlink" title="版本回退 – git reset"></a>版本回退 – git reset</h2><p><strong>如果想要进行版本回退，我们需要先知道目前处于哪一个版本：Git通过HEAD指针记录当前版本。</strong> </p>
<p>HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交； </p>
<p>理解 HEAD 的最简方式，就是将它看做 <strong>该分支上的最后一次提交</strong> 的快照；</p>
<p><strong>我们可以通过HEAD来改变Git目前的版本指向：</strong> </p>
<p>上一个版本就是HEAD^，上上一个版本就是HEAD^^； </p>
<p>如果是上1000个版本，我们可以使用HEAD~1000； </p>
<p>我们可以可以指定某一个commit id； </p>
<p>git reset –hard HEAD^ </p>
<p>git reset –hard HEAD~1000 </p>
<p>git reset –hard 2d44982</p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>GitHub：<a href="https://github.com/">https://github.com/</a>   （主要使用）</p>
<p>Gitee：<a href="https://gitee.com/">https://gitee.com/</a>     （国内）</p>
<h2 id="管理远程服务器"><a href="#管理远程服务器" class="headerlink" title="管理远程服务器"></a>管理远程服务器</h2><p><strong>查看远程地址：比如我们之前从GitHub上clone下来的代码，它就是有自己的远程仓库的：</strong> </p>
<p><strong>添加远程地址：我们也可以继续添加远程服务器（让本地的仓库和远程服务器仓库建立连接）：</strong> </p>
<p><strong>重命名远程地址：</strong> </p>
<p><strong>移除远程地址：</strong> </p>
<p>git remote </p>
<p>git remote –v </p>
<p>-v是—verbose的缩写(冗长的)</p>
<p><strong>添加远程地址：我们也可以继续添加远程服务器（让本地的仓库和远程服务器仓库建立连接）：</strong> </p>
<p>git remote add <shortname> <url> </p>
<p>git remote add gitlab <a href="http://152.136.185.210:7888/coderwhy/gitremotedemo.git">http://152.136.185.210:7888/coderwhy/gitremotedemo.git</a></p>
<h3 id="重命名远程地址："><a href="#重命名远程地址：" class="headerlink" title="重命名远程地址："></a>重命名远程地址：</h3><p>git remote rename gitlab glab</p>
<h3 id="移除远程地址："><a href="#移除远程地址：" class="headerlink" title="移除远程地址："></a>移除远程地址：</h3><p>git remote remove gitlab</p>
<h2 id="远程仓库的交互"><a href="#远程仓库的交互" class="headerlink" title="远程仓库的交互"></a>远程仓库的交互</h2><p><strong>将代码push到远程仓库：将本地仓库的代码推送到远程仓库中；</strong></p>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><h3 id="git-push-origin-master"><a href="#git-push-origin-master" class="headerlink" title="git push origin master"></a>git push origin master</h3><h3 id="从远程仓库fetch代码：从远程仓库获取最新的代码"><a href="#从远程仓库fetch代码：从远程仓库获取最新的代码" class="headerlink" title="从远程仓库fetch代码：从远程仓库获取最新的代码"></a>从远程仓库fetch代码：从远程仓库获取最新的代码</h3><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><h3 id="git-fetch-origin"><a href="#git-fetch-origin" class="headerlink" title="git fetch origin"></a>git fetch origin</h3><p>获取到代码后默认并没有合并到本地仓库，我们需要通过merge来合并； </p>
<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p><strong>从远程仓库pull代码：上面的两次操作有点繁琐，我们可以通过一个命令来操作</strong></p>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><h3 id="git-fetch-git-merge-rebase"><a href="#git-fetch-git-merge-rebase" class="headerlink" title="git fetch + git merge(rebase)"></a>git fetch + git merge(rebase)</h3><h3 id="Git创建分支：git-branch-testing"><a href="#Git创建分支：git-branch-testing" class="headerlink" title="Git创建分支：git branch testing"></a>Git创建分支：git branch testing</h3><h3 id="查看分支-：git-checkout-testing"><a href="#查看分支-：git-checkout-testing" class="headerlink" title="查看分支 ：git checkout testing"></a>查看分支 ：git checkout testing</h3><h3 id="创建分支同时切换：git-checkout-b"><a href="#创建分支同时切换：git-checkout-b" class="headerlink" title="创建分支同时切换：git checkout -b "></a>创建分支同时切换：git checkout -b <newbranchname></h3><p>查看和删除分支</p>
<h3 id="git-branch-查看当前所有的分支"><a href="#git-branch-查看当前所有的分支" class="headerlink" title="git branch # 查看当前所有的分支"></a>git branch # 查看当前所有的分支</h3><h3 id="git-branch-–v-同时查看最后一次提交"><a href="#git-branch-–v-同时查看最后一次提交" class="headerlink" title="git branch –v # 同时查看最后一次提交"></a>git branch –v # 同时查看最后一次提交</h3><h3 id="git-branch-–merged-查看所有合并到当前分支的分支"><a href="#git-branch-–merged-查看所有合并到当前分支的分支" class="headerlink" title="git branch –merged # 查看所有合并到当前分支的分支"></a>git branch –merged # 查看所有合并到当前分支的分支</h3><h3 id="git-branch-–no-merged-查看所有没有合并到当前分支的分支"><a href="#git-branch-–no-merged-查看所有没有合并到当前分支的分支" class="headerlink" title="git branch –no-merged # 查看所有没有合并到当前分支的分支"></a>git branch –no-merged # 查看所有没有合并到当前分支的分支</h3><h3 id="git-branch-–d-hotfix-删除当前分支"><a href="#git-branch-–d-hotfix-删除当前分支" class="headerlink" title="git branch –d hotfix # 删除当前分支"></a>git branch –d hotfix # 删除当前分支</h3><h3 id="git-branch-–D-hotfix-强制删除某一个分支"><a href="#git-branch-–D-hotfix-强制删除某一个分支" class="headerlink" title="git branch –D hotfix # 强制删除某一个分支"></a>git branch –D hotfix # 强制删除某一个分支</h3><h3 id="git-remote-set-url-origin-URL-更换远程仓库地址，URL为新地址"><a href="#git-remote-set-url-origin-URL-更换远程仓库地址，URL为新地址" class="headerlink" title="git remote set-url origin URL 更换远程仓库地址，URL为新地址"></a>git remote set-url origin URL 更换远程仓库地址，URL为新地址</h3><h2 id="远程分支的管理"><a href="#远程分支的管理" class="headerlink" title="远程分支的管理"></a>远程分支的管理</h2><h3 id="操作一：推送分支到远程"><a href="#操作一：推送分支到远程" class="headerlink" title="操作一：推送分支到远程"></a>操作一：推送分支到远程</h3><p>当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上； </p>
<p>运行 git push <remote> <branch>； </p>
<h3 id="操作二：跟踪远程分支"><a href="#操作二：跟踪远程分支" class="headerlink" title="操作二：跟踪远程分支"></a>操作二：跟踪远程分支</h3><p>当克隆一个仓库时，它通常会自动地创建一个跟踪 origin&#x2F;master 的 master 分支； </p>
<p>如果你愿意的话可以设置其他的跟踪分支，可以通过运行 git checkout –track <remote>&#x2F;<branch> </p>
<p>如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支； </p>
<h3 id="操作三：删除远程分支"><a href="#操作三：删除远程分支" class="headerlink" title="操作三：删除远程分支"></a>操作三：删除远程分支</h3><p>如果某一个远程分支不再使用，我们想要删除掉，可以运行带有 –delete 选项的 git push 命令来删除一个远程分支。 </p>
<p>git checkout –track <remote>&#x2F;<branch> </p>
<p>git checkout <branch> </p>
<p>git push origin –delete <branch></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts</title>
    <url>/2023/01/29/Echarts/</url>
    <content><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><p>Echarts好像也没有多大的难点，都是照着官方文档找API进行配置。刚好上个月公司有个React——Echart项目，就对此了解了一下，其实还是对其实例化对象与数据的赋值为主要点叭（做好一个类型，其它类型的图表也差不多）。</p>
<p>效果图：</p>
<p><img src="https://pic.imgdb.cn/item/63d6824fface21e9ef37148d.png"></p>
<span id="more"></span>


<p><img src="https://pic.imgdb.cn/item/63d68258face21e9ef372e20.png"></p>
<p>config.ts为配置项文件</p>
<p>countryMap.ts为自定义的国家显示数据（非必须）</p>
<p>worldMap.json为世界地图的JSON文件</p>
<p>WorldMap.tsx为主文件</p>
<p>WorldMap.tsx</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BarChart</span>, <span class="title class_">LineChart</span>, <span class="title class_">MapChart</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/charts&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TitleComponent</span>,</span><br><span class="line">  <span class="title class_">TooltipComponent</span>,</span><br><span class="line">  <span class="title class_">GridComponent</span>,</span><br><span class="line">  <span class="title class_">DatasetComponent</span>,</span><br><span class="line">  <span class="title class_">TransformComponent</span>,</span><br><span class="line">  <span class="title class_">LegendComponent</span>,</span><br><span class="line">  <span class="title class_">DataZoomComponent</span>,</span><br><span class="line">  <span class="title class_">ToolboxComponent</span>,</span><br><span class="line">  <span class="title class_">VisualMapComponent</span>,</span><br><span class="line">  <span class="title class_">GeoComponent</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LabelLayout</span>, <span class="title class_">UniversalTransition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/features&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanvasRenderer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/renderers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapOption &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CountryCard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Div</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 68%;</span></span><br><span class="line"><span class="string">  height: 480px;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">echarts.<span class="title function_">use</span>([</span><br><span class="line">  <span class="title class_">TitleComponent</span>,</span><br><span class="line">  <span class="title class_">TooltipComponent</span>,</span><br><span class="line">  <span class="title class_">GridComponent</span>,</span><br><span class="line">  <span class="title class_">DatasetComponent</span>,</span><br><span class="line">  <span class="title class_">TransformComponent</span>,</span><br><span class="line">  <span class="title class_">BarChart</span>,</span><br><span class="line">  <span class="title class_">LabelLayout</span>,</span><br><span class="line">  <span class="title class_">UniversalTransition</span>,</span><br><span class="line">  <span class="title class_">CanvasRenderer</span>,</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">LegendComponent</span>,</span><br><span class="line">  <span class="title class_">DataZoomComponent</span>,</span><br><span class="line">  <span class="title class_">ToolboxComponent</span>,</span><br><span class="line">  <span class="title class_">VisualMapComponent</span>,</span><br><span class="line">  <span class="title class_">MapChart</span>,</span><br><span class="line">  <span class="title class_">GeoComponent</span>,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WorldMapProps</span> &#123;</span><br><span class="line">  <span class="attr">countryData</span>: <span class="title class_">CountryCard</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WorldMap</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">WorldMapProps</span>&gt; = <span class="function">(<span class="params">&#123; countryData &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. get DOM</span></span><br><span class="line">  <span class="keyword">const</span> chartmap = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">  echarts.<span class="title function_">registerMap</span>(<span class="string">&#x27;world&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./worldMap.json&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// init echarts map</span></span><br><span class="line">    <span class="keyword">const</span> map = echarts.<span class="title function_">init</span>(chartmap.<span class="property">current</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>)</span><br><span class="line">    <span class="comment">// 4. get table data</span></span><br><span class="line">    map.<span class="title function_">setOption</span>(<span class="title function_">mapOption</span>(countryData))</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="function">() =&gt;</span> map.<span class="title function_">resize</span>()</span><br><span class="line">  &#125;, [countryData])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Div</span> <span class="attr">ref</span>=<span class="string">&#123;chartmap&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WorldMap</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; countryFullName &#125; <span class="keyword">from</span> <span class="string">&#x27;../../helpers/utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; country &#125; <span class="keyword">from</span> <span class="string">&#x27;./countryMap&#x27;</span></span><br><span class="line"><span class="keyword">import</span> worldMap <span class="keyword">from</span> <span class="string">&#x27;./worldMap.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cn country abbreviation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cen full name of country</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">filterUnmatchCountry</span> = (<span class="params">cn: <span class="built_in">string</span>, cen: <span class="built_in">string</span> | <span class="literal">undefined</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = worldMap.<span class="property">features</span></span><br><span class="line">  <span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>(newArr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item.<span class="property">id</span>, item.<span class="property">properties</span>.<span class="property">name</span>]))</span><br><span class="line">  <span class="keyword">if</span> (newMap.<span class="title function_">has</span>(cn)) &#123;</span><br><span class="line">    <span class="keyword">const</span> newCen = newMap.<span class="title function_">get</span>(cn)</span><br><span class="line">    <span class="keyword">if</span> (cen !== newCen) &#123;</span><br><span class="line">      <span class="keyword">return</span> newCen</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cen</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cn country abbreviation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transferCountry</span>(<span class="params">cn: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (country.<span class="title function_">has</span>(cn)) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">filterUnmatchCountry</span>(cn, country.<span class="title function_">get</span>(cn))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">mapOption</span> = (<span class="params">countryData: <span class="built_in">Array</span>&lt;&#123; rank: <span class="built_in">number</span>; name: <span class="built_in">string</span>; <span class="built_in">number</span>: <span class="built_in">string</span> &#125;&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// define map params</span></span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="comment">// tooltip component</span></span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>, <span class="comment">// if trigger tooltip component,when mouse hover, will show series&#x27;s data value</span></span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,</span><br><span class="line">        <span class="attr">fontStyle</span>: <span class="string">&#x27;14px&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;transparent&#x27;</span>,</span><br><span class="line">      <span class="comment">//  customize float layer css style -- remove box shadow here</span></span><br><span class="line">      <span class="attr">extraCssText</span>: <span class="string">&#x27;box-shadow: none&#x27;</span>,</span><br><span class="line">      <span class="comment">// mouse hover callback, use to modify tooltip component data format</span></span><br><span class="line">      <span class="attr">formatter</span>: <span class="function">(<span class="params">params: &#123; data: &#123; rank: <span class="built_in">string</span> &#125;; value: <span class="built_in">string</span>; name: <span class="built_in">string</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rank = params.<span class="property">data</span>?.<span class="property">rank</span> ? params.<span class="property">data</span>.<span class="property">rank</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> value = params.<span class="property">value</span> ? params.<span class="property">value</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;rank&#125;</span> <span class="subst">$&#123;params.name&#125;</span> <span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射组件</span></span><br><span class="line">    <span class="attr">visualMap</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">max</span>: countryData[<span class="number">0</span>]?.<span class="property">number</span> + <span class="number">1</span>,</span><br><span class="line">      <span class="attr">calcuable</span>: <span class="literal">false</span>, <span class="comment">// close drag function</span></span><br><span class="line">      <span class="attr">realtime</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">inRange</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: [<span class="string">&#x27;#9BB2C0&#x27;</span>, <span class="string">&#x27;#6AB3D4&#x27;</span>, <span class="string">&#x27;#ABDCED&#x27;</span>, <span class="string">&#x27;#ABDCED&#x27;</span>], <span class="comment">// assign the color of the data from less to more</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        <span class="attr">map</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">        <span class="attr">roam</span>: <span class="literal">false</span>, <span class="comment">// forbid mouse to &#x27;scale&#x27; and &#x27;move&#x27;</span></span><br><span class="line">        <span class="attr">data</span>: countryData.<span class="title function_">map</span>(<span class="function">(<span class="params">item: &#123; rank: <span class="built_in">number</span>; name: <span class="built_in">string</span>; <span class="built_in">number</span>: <span class="built_in">string</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="title function_">countryFullName</span>(item.<span class="property">name</span>),</span><br><span class="line">          <span class="attr">value</span>: item.<span class="property">number</span>,</span><br><span class="line">          <span class="attr">rank</span>: item.<span class="property">rank</span>,</span><br><span class="line">        &#125;)),</span><br><span class="line">        <span class="attr">selectedMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// zoom + aspectScale(stretch) = change map size</span></span><br><span class="line">        <span class="attr">zoom</span>: <span class="number">1.2</span>,</span><br><span class="line">        <span class="attr">aspectScale</span>: <span class="number">1.1</span>,</span><br><span class="line">        <span class="attr">boxWidth</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">normal</span>: &#123;</span><br><span class="line">            <span class="attr">borderWidth</span>: <span class="number">0</span>, <span class="comment">// modify map border</span></span><br><span class="line">            <span class="attr">areaColor</span>: <span class="string">&#x27;#D9E2E9&#x27;</span>, <span class="comment">// modify map basic color</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// modify hover area color</span></span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">            <span class="attr">areaColor</span>: <span class="string">&#x27;#F4E5BC&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2全家桶</title>
    <url>/2023/01/29/Vue2%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>vue相对于react来说更简单、易上手。但由于公司转React开发，导致我对vue的学习与巩固又停了下来，只是简单的用vue做了三两个项目。此次回顾相当于复习一遍vue。</p>
<h1 id="一、vue基础"><a href="#一、vue基础" class="headerlink" title="一、vue基础"></a>一、vue基础</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><ul>
<li>是一套用于构建用户界面的前端框架</li>
<li>vue 框架的特性，主要体现在如下两方面：</li>
</ul>
<h3 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h3><p>在使用了 vue 的页面中，vue 会监听数据的变化，从而自动重新渲染页面的结构。</p>
<p>好处：当页面数据发生变化时，页面会自动重新渲染！ </p>
<p>注意：数据驱动视图是单向的数据绑定。</p>
<span id="more"></span>

<h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p>在填写表单时，双向数据绑定可以辅助开发者在不操作 DOM 的前提下，自动把用户填写的内容同步到数据源 </p>
<p>中。</p>
<p>好处：开发者不再需要手动操作 DOM 元素，来获取表单元素最新的值！</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是 vue 实现数据驱动视图和双向数据绑定的核心原理。MVVM 指的是 Model、View 和 ViewModel， </p>
<p>它把每个 HTML 页面都拆分成了这三个部分。</p>
<p><img src="https://pic.imgdb.cn/item/63d676ffface21e9ef1c11cd.png"></p>
<h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><p>ViewModel 作为 MVVM 的核心，是它把当前页面的数据源（Model）和页面的结构（View）连接在了一起。</p>
<p>当数据源发生变化时，会被 ViewModel 监听到，VM 会根据最新的数据源自动更新页面的结构 </p>
<p>当表单元素的值发生变化时，也会被 VM 监听到，VM 会把变化过后最新的值自动同步到 Model 数据源中</p>
<h2 id="vue的基本使用"><a href="#vue的基本使用" class="headerlink" title="vue的基本使用"></a>vue的基本使用</h2><h3 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h3><h4 id="①-导入-vue-js-的-script-脚本文件"><a href="#①-导入-vue-js-的-script-脚本文件" class="headerlink" title="① 导入 vue.js 的 script 脚本文件"></a>① 导入 vue.js 的 script 脚本文件</h4><h4 id="②-在页面中声明一个将要被-vue-所控制的-DOM-区域"><a href="#②-在页面中声明一个将要被-vue-所控制的-DOM-区域" class="headerlink" title="② 在页面中声明一个将要被 vue 所控制的 DOM 区域"></a>② 在页面中声明一个将要被 vue 所控制的 DOM 区域</h4><h4 id="③-创建-vm-实例对象（vue-实例对象）"><a href="#③-创建-vm-实例对象（vue-实例对象）" class="headerlink" title="③ 创建 vm 实例对象（vue 实例对象）"></a>③ 创建 vm 实例对象（vue 实例对象）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  //2.在页面中声明一个将要被vue控制的DOM区域</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  //1.导入vue.js的script脚本文件</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./lib/vue/2.6.12.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3.创建VM实例对象（vue的实例对象）</span></span></span><br><span class="line"><span class="language-javascript">    coonst vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.1 指定vue控制页面的哪个区域</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.2 指定Model数据源</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userName</span>:<span class="string">&#x27;jelly&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>





#### 基本代码与 MVVM 的对应关系

![](https://pic.imgdb.cn/item/63d6770dface21e9ef1c3174.png)

## vue的调试工具

###  安装 vue-devtools 调试工具 

vue 官方提供的 vue-devtools 调试工具，能够方便开发者对 vue 项目进行调试与开发。 

Chrome 浏览器在线安装 vue-devtools ： 

https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd



## vue的指令与过滤器

### 指令的概念

指令（Directives）是 vue 为开发者提供的模板语法，用于辅助开发者渲染页面的基本结构。 

vue 中的指令按照不同的用途可以分为如下 6 大类： 

#### ① 内容渲染指令 

#### ② 属性绑定指令 

#### ③ 事件绑定指令 

#### ④ 双向绑定指令 

#### ⑤ 条件渲染指令 

#### ⑥ 列表渲染指令 



### 内容渲染指令 

#### 内容渲染指令用来辅助开发者渲染 DOM 元素的文本内容。常用的内容渲染指令有如下 3 个： 

#### v-text 

#### {{ }} 

####  v-html

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//v-text 指令会覆盖元素内默认的值。</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&#x27;userName&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&#x27;gender&#x27;</span>&gt;</span>sex:<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //gender</span><br><span class="line"></span><br><span class="line">//&#123;&#123;&#125;&#125;用来解决 v-text 会覆盖默认文本内容的问题。这种 &#123;&#123; &#125;&#125; 语法的专业名称是插值表达</span><br><span class="line">式（英文名为：Mustache）。</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Name:&#123;&#123;jelly&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Sex:&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//相对于 v-text 指令来说，插值表达式在开发中更常用一些！因为它不会覆盖元素中默认的文本内容。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//v-text 指令和插值表达式只能渲染纯文本内容。如果要把包含 HTML 标签的字符串渲染为页面的 HTML 元素，</span><br><span class="line">则需要用到 v-html 这个指令</span><br><span class="line">假设discription=<span class="tag">&lt;<span class="name">h5</span> <span class="attr">style</span>=<span class="string">&#x27;color:red&#x27;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&#x27;discription&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 红色字体的 123</span><br></pre></td></tr></table></figure>



### 属性绑定指令

#### 要为元素的属性动态绑定属性值，则需要用到 v-bind 属性绑定指令（简写为 : ）

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//data:&#123;</span><br><span class="line">inputValue:&#x27;Plase input&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&#x27;inputValue&#x27;</span>/&gt;</span></span><br><span class="line">//简写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:placeholder</span>=<span class="string">&#x27;inputValue&#x27;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">//支持JavaScript的表达式运算</span><br><span class="line">&#123;&#123;number=1&#125;&#125;</span><br><span class="line">&#123;&#123;ok?&#x27;yes&#x27;:&#x27;no&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;message.split(&#x27;&#x27;).sort.join(&#x27;&#x27;)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&#x27;list-&#x27;</span> +<span class="attr">id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

### 事件绑定指令

#### vue 提供了 v-on 事件绑定指令，用来辅助程序员为 DOM 元素绑定事件监听。（简写为 @）

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">// 简写</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//原生 DOM 对象有 onclick、oninput、onkeyup 等原生事件，替换为 vue 的事件绑定形式后，</span><br><span class="line">分别为：v-on:click、v-on:input、v-on:keyup</span><br></pre></td></tr></table></figure>

事件参数对象

在原生的 DOM 事件绑定中，可以在事件处理函数的形参处，接收事件参数对象 event。同理，在 v-on 指令 （简写为 @ ）所绑定的事件处理函数中，同样可以接收到事件参数对象 event，示例代码如下：

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;<span class="attr">count</span>:&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> nowBgc=e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span></span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=nowBgc===<span class="string">&#x27;red&#x27;</span>?<span class="string">&quot;&quot;</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> +=<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



#### 绑定事件并传参 

在使用 v-on 指令绑定事件时，可以使用 **( )** 进行传参，示例代码如下：

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;<span class="attr">count</span>:&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;add(2)&#x27;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">step</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> +=step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



#### $event 

$event 是 vue 提供的特殊变量，用来表示原生的事件参数对象 event。$event 可以解决事件参数对象 event 被覆盖的问题。示例用法如下：

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;<span class="attr">count</span>:&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add(2,$event)&#x27;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">step,e</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> nowBgc=e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span></span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=nowBgc===<span class="string">&#x27;pink&#x27;</span>?<span class="string">&quot;&quot;</span>:<span class="string">&#x27;pink&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> +=step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

#### 事件修饰符

在事件处理函数中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。因此， 

vue 提供了事件修饰符的概念，来辅助程序员更方便的对事件的触发进行控制。常用的 5 个事件修饰符如下：

.prevent          阻止默认行为

.stop                阻止事件冒泡

.captrue          以捕捉模式触发当前的事件处理函数

.once               绑定的事件只触发1次

.self                  只有在event.target是当前元素自身是触发事件处理函数



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//阻止默认跳转行为</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://www.baidu.com&#x27;</span> @<span class="attr">click</span>=<span class="string">&#x27;onLinkClick&#x27;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

### 双向绑定指令

#### vue 提供了 v-model 双向数据绑定指令，用来辅助开发者在不操作 DOM 的前提下，快速获取表单的数据。

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Name:&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inpit</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span>, <span class="attr">v-model</span>=<span class="string">&#x27;userName&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">inpit</span>&gt;</span></span><br><span class="line">//在输入框输入数值会立马显示在p标签中</span><br></pre></td></tr></table></figure>

#### v-model 指令的修饰符

为了方便对用户输入的内容进行处理，vue为v-model指令提供了3个修饰符

.number         值转为数值类型                                     <input v-model.number='age'>

.trim                去掉首位空格                                         <input v-model.number='msg'>

.lazy                 在change是时而非 input时更新         <input v-model.lazy='msg'>



### 条件渲染指令

条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是： 

#### v-if 可以单独使用，或配合 v-else/v-else-if 指令一起使用：

#### v-show 

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&#x27;networkState===200&#x27;</span>&gt;</span>请求成功，被v-if控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">v-else</span>&gt;</span>error<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">v-else-if</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&#x27;networkState===200&#x27;</span>&gt;</span>请求成功，被v-show控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

#### 区别：

实现原理不同： 

v-if 指令会动态地创建或移除 DOM 元素，从而控制元素在页面上的显示与隐藏； 

v-show 指令会动态为元素添加或移除 style="display: none;" 样式，从而控制元素的显示与隐藏； 

性能消耗不同： 

v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此： 

如果需要非常频繁地切换，则使用 v-show 较好 

如果在运行时条件很少改变，则使用 v-if 较好



### 列表渲染指令

#### vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。v-for 指令需要使 用 item in items 形式的特殊语法，其中： 

#### items 是待循环的数组 

#### tem 是被循环的每一项

当列表的数据变化时，默认情况下，vue 会尽可能的复用已存在的 DOM 元素，从而提升渲染的性能。但这种 默认的性能优化策略，会导致有状态的列表无法被正确更新。 为了给 vue 一个提示，以便它能跟踪每个节点的身份，从而在保证有状态的列表被正确更新的前提下，提升渲 染的性能。此时，需要为每项提供一个唯一的 key 属性：

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">list:[&#123;id:1,name:&#x27;zs&#x27;&#125;,&#123;id:2,name:&#x27;ls&#x27;&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in list&#x27;</span> <span class="attr">:key</span>=<span class="string">&#x27;user.id&#x27;</span>&gt;</span>索引：&#123;&#123;index&#125;&#125;,名字：&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="key-的注意事项"><a href="#key-的注意事项" class="headerlink" title="key 的注意事项"></a>key 的注意事项</h4><p>① key 的值只能是字符串或数字类型 </p>
<p>② key 的值必须具有唯一性（即：key 的值不能重复） </p>
<p>③ 建议把数据项 id 属性的值作为 key 的值（因为 id 属性的值具有唯一性） </p>
<p>④ 使用 index 的值当作 key 的值没有任何意义（因为 index 的值不具有唯一性） </p>
<p>⑤ 建议使用 v-for 指令时一定要指定 key 的值（既提升性能、又防止列表状态紊乱）</p>
<h2 id="过滤器-vue2有，vue3无"><a href="#过滤器-vue2有，vue3无" class="headerlink" title="过滤器(vue2有，vue3无)"></a>过滤器(vue2有，vue3无)</h2><p>过滤器（Filters）是 vue 为开发者提供的功能，常用于文本的格式化。过滤器可以用在两个地方：插值表达式 和 v-bind 属性绑定。 </p>
<p>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道符：| ”进行调用，示例代码如下：</p>
<h4 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;message | captalize&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&#x27;rawId | formatId&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在创建vue实例期间，在filters节点中可以定义过滤器</span></span><br><span class="line"><span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:#app;</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">message</span>:<span class="string">&#x27;hello Vue.js&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">filters</span>:&#123;</span><br><span class="line">  <span class="comment">//首字母大写过滤器</span></span><br><span class="line">  <span class="title function_">captalize</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()+str.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//number过滤器</span></span><br><span class="line">  <span class="title function_">formatId</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">number</span>(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 filters 节点下定义的过滤器，称为“私有过滤器”，因为它只能在当前 vm 实例所控制的 el 区域内使用。 </p>
<p>如果希望在多个 vue 实例之间共享过滤器，则可以按照如下的格式定义全局过滤器：</p>
<h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局过滤器，独立于每个VM实例之外</span></span><br><span class="line"><span class="comment">// vue.filter(name,callBack)方法接收两个参数;名字、处理函数</span></span><br><span class="line">vue.<span class="property">filter</span>（<span class="string">&#x27;captalize&#x27;</span>,<span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()+str.<span class="title function_">slice</span>(<span class="number">1</span>)+<span class="string">&#x27;--&#x27;</span>）</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续调用多个过滤器</span></span><br><span class="line">&lt;p&gt;</span><br><span class="line">  &#123;&#123;message|filterA|filterB&#125;&#125;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"><span class="comment">//过滤器传参</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123;message|filterA（a,b&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="watch侦听器"><a href="#watch侦听器" class="headerlink" title="watch侦听器"></a>watch侦听器</h2><p>watch 侦听器允许开发者监视数据的变化，从而针对数据的变化做特定的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:#app;</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">userName</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="comment">// 监听message值的变化</span></span><br><span class="line">  <span class="comment">// newVal是变化后的新值，oldVal是变化之前的旧值</span></span><br><span class="line">  <span class="title function_">userName</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal,oldVal)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听 username 值的变化，并使用 axios 发起 Ajax 请求，检测当前输入的用户名是否可用：</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 监听 username 值的变化</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">username</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newVal === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 使用 axios 发起请求，判断用户名是否可用</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="immediate-选项"><a href="#immediate-选项" class="headerlink" title="immediate 选项"></a>immediate 选项</h3><p>默认情况下，组件在初次加载完毕后不会调用 watch 侦听器。如果想让 watch 侦听器立即被调用，则需要使 </p>
<p>用 immediate 选项。示例代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"><span class="attr">username</span>: &#123;</span><br><span class="line"><span class="comment">// handler 是固定写法，表示当 username 的值变化时，自动调用 handler 处理函数</span></span><br><span class="line"><span class="attr">handler</span>: <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (newVal === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 表示页面初次渲染好之后，就立即触发当前的 watch 侦听器</span></span><br><span class="line"><span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="deep-选项"><a href="#deep-选项" class="headerlink" title="deep 选项"></a>deep 选项</h3><p>如果 watch 侦听的是一个对象，如果对象中的属性值发生了变化，则无法被监听到。此时需要使用 deep 选项，代码示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:#app;</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">userName</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="comment">// 监听message值的变化</span></span><br><span class="line">  <span class="comment">// newVal是变化后的新值，oldVal是变化之前的旧值</span></span><br><span class="line">  <span class="title function_">userName</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal,oldVal)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果只想监听对象中单个属性的变化，则可以按照如下的方式定义 watch 侦听器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:#app;</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">info</span>:&#123;<span class="attr">userName</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"> <span class="string">&#x27;info.userName&#x27;</span>:&#123;</span><br><span class="line">   <span class="title function_">handler</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>存放页面中的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">  info:&#123;userName:&#x27;hello&#x27;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><p>计算属性指的是通过一系列运算之后，最终得到一个属性值。 </p>
<p>这个动态计算出来的属性值可以被模板结构或 methods 方法使用。</p>
<p>① 虽然计算属性在声明的时候被定义为方法，但是计算属性的本质是一个属性 </p>
<p>② 计算属性会缓存计算的结果，只有计算属性依赖的数据变化时，才会重新进行运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:#app;</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">r,<span class="number">0</span>,<span class="attr">g</span>:<span class="number">0</span>,<span class="attr">b</span>:<span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="title function_">rgb</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>),(<span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>),(<span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">rgb</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="methods方法"><a href="#methods方法" class="headerlink" title="methods方法"></a>methods方法</h2><p>存放vue中的函数，在methods中不能使用箭头函数，因为箭头函数的this指向的是父级，不能取到Vue实例对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  show()&#123;</span><br><span class="line">    console.log(this.rgb)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>单页面应用程序（英文名：Single Page Application）简称 SPA，顾名 思义，指的是一个 Web 网站中只有唯一的一个 HTML 页面，所有的功能 与交互都在这唯一的一个页面内完成。</p>
<p>vue-cli 是 Vue.js 开发的标准工具。它简化了程序员基于 webpack 创建工程化的 Vue 项目的过程。</p>
<h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><p>vue-cli 是 npm 上的一个全局包，使用 npm install 命令，即可方便的把它安装到自己的电脑上： </p>
<p>npm install -g @vue&#x2F;cli </p>
<p>基于 vue-cli 快速生成工程化的 Vue 项目： </p>
<p>vue create 项目的名称</p>
<h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><p>在工程化的项目中，vue 要做的事情很单纯：通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。 </p>
<p>其中： </p>
<p>① App.vue 用来编写待渲染的模板结构 </p>
<p>② index.html 中需要预留一个 el 区域 </p>
<p>③ main.js 把 App.vue 渲染到了 index.html 所预留的区域中</p>
<h2 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h2><p>组件化开发指的是：根据封装的思想，把页面上可重用的 UI 结构封装为组件，从而方便项目的开发和维护。</p>
<p>vue 是一个支持组件化开发的前端框架。 </p>
<p>vue 中规定：组件的后缀名是 .vue。之前接触到的 App.vue 文件本质上就是一个 vue 的组件。</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>每个 .vue 组件都由 3 部分构成，分别是： </p>
<p>template -&gt; 组件的模板结构 </p>
<p>script -&gt; 组件的 JavaScript 行为 </p>
<p>style -&gt; 组件的样式 </p>
<p>其中，每个组件中必须包含 template 模板结构，而 script 行为和 style 样式是可选的组成部分。</p>
<h4 id="template"><a href="#template" class="headerlink" title="template"></a>template</h4><p>vue 规定：每个组件对应的模板结构，需要定义到 <template> 节点中。template 是 vue 提供的容器标签，只起到包裹性质的作用，它不会被渲染为真正的 DOM 元素 。</p>
<p> template 中只能包含唯一的根节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">//组件dom结构</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><p>vue 规定：开发者可以在 <script> 节点中封装组件的 JavaScript 业务逻辑。 </p>
<script > 节点的基本结构如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  //data、methods</span><br><span class="line"></span><br><span class="line">  //导出对象</span><br><span class="line">  export default&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

vue 规定：.vue 组件中的 data 必须是一个函数，不能直接指向一个数据对象。 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//error</span><br><span class="line">data:&#123;</span><br><span class="line">  count:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



#### style

vue 规定：组件内的 <style> 节点是可选的，开发者可以在 <style> 节点中编写样式美化当前组件的 UI 结构。 

<script > 节点的基本结构如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    font-size:16px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">//less语法</span><br><span class="line">  &lt;style lang=&#x27;less&#x27;&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    font-size:16px;</span><br><span class="line">    span&#123;</span><br><span class="line">      color:pink;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

### 组件之间的父子关系

![](https://pic.imgdb.cn/item/63d67728face21e9ef1c6a1b.png)

### 使用组件的三个步骤

1.使用import语法导入组件

2.使用components节点注册组件

3.以标签形式使用已注册的组件

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、import Test from ’../../components/Test.vue‘</span><br><span class="line"></span><br><span class="line">  3、&lt;templace&gt;</span><br><span class="line">    &lt;Test/&gt;</span><br><span class="line">  &lt;/templace&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      2、         export  default&#123;</span><br><span class="line">                 components:&#123;</span><br><span class="line">                   Test</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>



### 私有组件：

### 通过 components 注册的是私有子组件 全局组件：

在 vue 项目的 main.js 入口文件中，通过 Vue.component() 方法，可以注册全局组件。示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入</span><br><span class="line">import Count from ’@、components/Count.vue‘</span><br><span class="line"></span><br><span class="line">// 参数1：字符串表示，组件的名字</span><br><span class="line">// 参数2：要全局注册的组件</span><br><span class="line">  vue.component (&#x27;MyCount&#x27;,Count)</span><br></pre></td></tr></table></figure>

### 组件的props

props 是组件的自定义属性，在封装通用组件的时候，合理地使用 props 可以极大的提高组件的复用性！ 

它的语法格式如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">  props:[&#x27;自定义属性A&#x27;,&#x27;自定义属性B...&#x27;],</span><br><span class="line"></span><br><span class="line">    //组件的私有数据</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

vue 规定：组件中封装的自定义属性是只读的，程序员不能直接修改 props 的值。否则会直接报错：

要想修改 props 的值，可以把 props 的值转存到 data 中，因为 data 中的数据都是可读可写的！

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:[&#x27;init&#x27;],</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      count:this.init //把this。init的值存到count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

在声明自定义属性时，可以通过 default 来定义属性的默认值。通过 type 来定义属性的值类型。 required 选项，将属性设置为必填项，示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">  props:&#123;</span><br><span class="line">    init:&#123;</span><br><span class="line">      //用 default属性定义属性的默认值</span><br><span class="line">      default:0,</span><br><span class="line">        // 用type属性定义属性的值类型</span><br><span class="line">        //如果传递过来的值不符合此类型，则会报错</span><br><span class="line">        type:number,</span><br><span class="line">        required:true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### 组件之间的样式冲突问题

默认情况下，写在 .vue 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。

### 导致组件之间样式冲突的根本原因是： 

#### ① 单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面进行呈现的。 

#### ② 每个组件中的样式，都会影响整个 index.html 页面中的 DOM 元素。

解决：为每个组件分配唯一的自定义属性，在编写组件样式时，通过属性选择器来控制样式的作用域，示例代码如下。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&#x27;container&#x27; data-v-001&gt;</span><br><span class="line">    &lt;h3 data-v-001&gt;轮播图组件&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">//通过中括号&quot;属性选择器&quot;，来防止组件之间的样式冲突，因为每个组件分配的自定义属性是唯一的</span><br><span class="line">  .container[data-v-001]&#123;</span><br><span class="line">    boder:1px solid pink;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>

为了提高开发效率和开发体验，vue 为 style 节点提供了 scoped 属性，从而防止组件之间的样式冲突问题；如果给当前组件的 style 节点添加了 scoped 属性，则当前组件的样式对其子组件是不生效的。如果想让某些样式对子组件生效，可以使用 /deep/ 深度选择器。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&#x27;container&#x27;&gt;</span><br><span class="line">    &lt;h3 &gt;轮播图组件&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .container&#123;</span><br><span class="line">    boder:1px solid pink;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //deep</span><br><span class="line">  /deep/.container&#123;</span><br><span class="line">    boder:1px solid pink;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>

## 生命周期

生命周期（Life Cycle）是指一个组件从创建 -> 运行 -> 销毁的整个阶段，强调的是一个时间段。 

生命周期函数：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行。 

注意：生命周期强调的是时间段，生命周期函数强调的是时间点。

### 生命周期分类

![](https://pic.imgdb.cn/item/63d67745face21e9ef1cb9aa.png)

### 组件之间的数据共享

#### 组件之间常见的关系

#### ① 父子关系 

父子组件之间的数据共享又分为： 

① 父 -> 子共享数据 

② 子 -> 父共享数据

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;Son :msg=&quot;message&quot; :user=&#x27;userInfo&#x27;&gt;&lt;/Son&gt;</span><br><span class="line">data()&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    message:&#x27;hello vue.js&#x27;,</span><br><span class="line">    userInfo:&#123;name:jelly,age:18&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  //子组件</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h5&gt;Son 组件&lt;/h5&gt;</span><br><span class="line">      &lt;p&gt;父组件传过来的mgs值:&#123;&#123;mag&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;父组件传过来的user值:&#123;&#123;user&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;/templace&gt;</span><br><span class="line">  props:[&#x27;msg&#x27;,&#x27;user&#x27;]</span><br></pre></td></tr></table></figure>

子组件向父组件共享数据使用自定义事件

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//子组件</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;count:0&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods :&#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">    this.coutn+=1</span><br><span class="line">    //修改数据时，通过$emit()触发自定义事件</span><br><span class="line">    this.$emit(&#x27;numChange&#x27;,this.count)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //父组件</span><br><span class="line">&lt;Son @numChange=&#x27;getNewCount&#x27;&gt;&lt;/Son&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;countFromSon:0&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods :&#123;</span><br><span class="line">    getNewCount(val)&#123;</span><br><span class="line">    this.countFromSon=val</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

#### ② 兄弟关系

EventBus

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在main中,在vue的原型链上挂载一个bus属性用来做兄弟组件传值</span><br><span class="line">    Vue.prototype.$bus = new Vue()</span><br><span class="line">//A组件</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;count:0&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods :&#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">    this.coutn+=1</span><br><span class="line">      //发送</span><br><span class="line">    this.$emit(&#x27;numChange&#x27;,this.count)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">//B组件</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;count:0&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods :&#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">    //接收      </span><br><span class="line">    this.$on(&#x27;numChange&#x27;,val=&gt;&#123;</span><br><span class="line">      this.count=val</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

## ref

ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用。 

每个 vue 的组件实例上，都包含一个 $refs 对象，里面存储着对应的 DOM 元素或组件的引用。默认情况下， 组件的 $refs 指向一个空对象。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3 ref=&#x27;myh3&#x27;&gt;MyRef 组件&lt;/H3&gt;</span><br><span class="line">&lt;button @click=&#x27;getRef&#x27;&gt;获取$refs引用&lt;/button&gt;</span><br><span class="line">methods:&#123;</span><br><span class="line">  getRef()&#123;</span><br><span class="line">    //通过this.$refs.引用名称,可以获取到DOM元素</span><br><span class="line">    console.log(this.$refs.myh3)</span><br><span class="line"></span><br><span class="line">    //操作DOM元素，把文本颜色改成红色</span><br><span class="line">    this.$refs.myh3.style.color=&#x27;red&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### 控制文本框和按钮的按需切换

通过布尔值inputVisible来控制组件中的文本框与按钮的按需切换

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&#x27;text&#x27; v-if=&#x27;inputVisible&#x27; ref=&#x27;ipt&#x27;&gt;&lt;/input&gt;</span><br><span class="line">  &lt;button v-else @click=&#x27;showInput&#x27;&gt;展示输入框&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;inputVisible:false&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods :&#123;</span><br><span class="line">    showInput()&#123;</span><br><span class="line">      this.inputVisible=true</span><br><span class="line">      //自动获取焦点</span><br><span class="line">      this.$refs.ipt.focus()</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

## this.$nextTick

组件的 $nextTick(cb) 方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行。通俗的理解是：等组件的 DOM 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 DOM 元素。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&#x27;text&#x27; v-if=&#x27;inputVisible&#x27; ref=&#x27;ipt&#x27;&gt;&lt;/input&gt;</span><br><span class="line">  &lt;button v-else @click=&#x27;showInput&#x27;&gt;展示输入框&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    return &#123;inputVisible:false&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods :&#123;</span><br><span class="line">    showInput()&#123;</span><br><span class="line">      this.inputVisible=true</span><br><span class="line">//把对input文本框的操作，推迟到DOM更新完后，否则页面上根部不存在文本框元素</span><br><span class="line">      this.$nextTick(()=&gt;&#123;</span><br><span class="line">        this.$refs.ipt.focus()</span><br><span class="line">        </span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

## 动态组件

动态组件指的是动态切换组件的显示与隐藏。

vue 提供了一个内置的 <component> 组件，专门用来实现动态组件的渲染。 

默认情况下，切换动态组件时无法保持组件的状态。此时可以使用 vue 内置的 <keep-alive> 组件保持动态组 件的状态。示例代码如下

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  //1、当前要渲染的组件名称</span><br><span class="line">    return &#123;comName:&#x27;Left&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">//2、通过is属性，动态渲染</span><br><span class="line">&lt;keep-alive&gt;  </span><br><span class="line">   &lt;component :is=&#x27;comName&#x27;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">  //3.点击按钮，切换组件</span><br><span class="line">  &lt;button @click=&#x27;comName&#x27;&gt;展示Left组件&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&#x27;comName&#x27;&gt;展示Riht组件&lt;/button&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

### keep-alive 对应的生命周期函数

当组件被缓存时，会自动触发组件的 deactivated 生命周期函数。 

当组件被激活时，会自动触发组件的 activated 生命周期函数。

### include属性

include 属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&#x27;MyLeft,MyRight&#x27;&gt;  </span><br><span class="line">   &lt;component :is=&#x27;comName&#x27;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

## 插槽

插槽（Slot）是 vue 为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p &gt;这是 MyCom1的第一个p标签&lt;/p&gt;</span><br><span class="line">  //通过slot标签，为用户预留内容占位符（插槽）</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt; //显示my-com1组件中的内容</span><br><span class="line">  &lt;p &gt;这是 MyCom1的第最后个p标签&lt;/p&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;my-com1&gt;</span><br><span class="line">  &lt;p&gt;自定义内容&lt;p&gt;</span><br><span class="line">&lt;/my-com1&gt;</span><br></pre></td></tr></table></figure>

### 具名插槽

在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot (简写为#)指令，并以 v-slot 的参数的 形式提供其名称。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&#x27;header&#x27;&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template v-slot:header&gt;</span><br><span class="line">  &lt;p &gt;test&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">  &lt;p &gt;test&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

### 作用域插槽

在封装组件的过程中，可以为预留的 <slot> 插槽绑定 props 数据，这种带有 props 数据的 <slot> 叫做“作用 域插槽”。示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line"> &lt;slot v-for=&#x27;item in list&#x27; :user=&#x27;item&#x27;&gt;</span><br><span class="line"> &lt;/slot&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line">  //使用作用域插槽</span><br><span class="line">  &lt;my-com3&gt;</span><br><span class="line">  &lt;template #default=&#x27;scope&#x27;&gt;</span><br><span class="line">     &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scope&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/my-com3&gt;</span><br><span class="line"></span><br><span class="line">  //解构插槽props</span><br><span class="line">   &lt;my-com3&gt;</span><br><span class="line">  &lt;template #default=&#x27;&#123;user&#125;&#x27;&gt;</span><br><span class="line">     &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;user.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/my-com3&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

## 自定义指令

vue 中的自定义指令分为两类，分别是： 

### 私有自定义指令 

在每个 vue 组件中，可以在 directives 节点下声明私有自定义指令。示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建自定义指令</span><br><span class="line">directives;&#123;</span><br><span class="line">  color:&#123;</span><br><span class="line">    bind(el)&#123;</span><br><span class="line">      el.style.color=&#x27;pink&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  //使用自定义指令</span><br><span class="line">    &lt;h1 v-color&gt;App 组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//动态绑定参数</span><br><span class="line">data()&#123;</span><br><span class="line">  return&#123;</span><br><span class="line">    color:&#x27;pink&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &lt;h1 v-color=&#x27;color&#x27;&gt;App 组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//通过binding获取指令的参数值</span><br><span class="line">directives;&#123;</span><br><span class="line">  color:&#123;</span><br><span class="line">    bind(el,binding)&#123;</span><br><span class="line">      el.style.color=binding.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//update 函数</span><br><span class="line">bind 函数只调用 1 次：当指令第一次绑定到元素时调用，当 DOM 更新时 bind 函数不会被触发。 update 函</span><br><span class="line">数会在每次 DOM 更新时被调用。示例代码如下：</span><br><span class="line">directives;&#123;</span><br><span class="line">  color:&#123;</span><br><span class="line">    bind(el,binding)&#123;</span><br><span class="line">      el.style.color=binding.value</span><br><span class="line">    &#125;,</span><br><span class="line">    update(el,binding)&#123;</span><br><span class="line">      el.style.color=binding.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果 insert 和update 函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式：</span><br><span class="line">directives;&#123;</span><br><span class="line">  color(el,binding)&#123;</span><br><span class="line">      el.style.color=binding.value</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### 全局自定义指令

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//参数1:字符串，名字</span><br><span class="line">//参数2:对象，用来接收指令的参数值</span><br><span class="line">  Vue.directive(&#x27;color&#x27;,function(el,binding)&#123;</span><br><span class="line">    el.style.color=bing.value</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

# 二、路由

SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。 

此时，不同组件之间的切换需要通过前端路由来实现。 

结论：在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成！

## 前端路由 

通俗易懂的概念：Hash 地址与组件之间的对应关系。

### 前端路由的工作方式 

#### ① 用户点击了页面上的路由链接 

#### ② 导致了 URL 地址栏中的 Hash 值发生了变化 

#### ③ 前端路由监听了到 Hash 地址的变化 

#### ④ 前端路由把当前 Hash 地址对应的组件渲染都浏览器中



## vue-router

vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目 中组件的切换。

###  vue-router 安装和配置的步骤 

#### 在 vue2 的项目中，安装 vue-router 的命令如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vue-router@3.5.2 -S</span><br></pre></td></tr></table></figure>

### 创建路由模块

#### 在 src 源代码目录下，新建 router/index.js 路由模块

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import vue from &#x27;vue&#x27;</span><br><span class="line">import vueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">  vue.use(vueRouter)</span><br><span class="line">  const router=new vueRouter()</span><br><span class="line">  export defaule router</span><br></pre></td></tr></table></figure>

### 导入并挂载路由

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import vue from &#x27;vue&#x27;</span><br><span class="line">import APP from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;@/router&#x27;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">  render:h=&gt;h(App),</span><br><span class="line">    router:router</span><br><span class="line">  &#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

## vue-router基本用法

### <router-link> 

### <router-view> 

在 src/App.vue 组件中，使用 vue-router 提供的 <router-link> 和 <router-view> 声明路由链接和占位符：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;App组件&lt;/h1&gt;</span><br><span class="line">    &lt;router-link to=&#x27;/home&#x27;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&#x27;/movie&#x27;&gt;电影&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&#x27;/about&#x27;&gt;关于&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    //路由占位符（路由出口）</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br></pre></td></tr></table></figure>

### 声明路由规则

在 src/router/index.js 路由模块中，通过 routes 数组声明路由的匹配规则。示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Home from &#x27;@/components/home.vue&#x27;</span><br><span class="line">import Movie from &#x27;@/components/Movie.vue&#x27;</span><br><span class="line">import About from &#x27;@/components/about.vue&#x27;</span><br><span class="line"></span><br><span class="line">  const router=new VueRouter(&#123;</span><br><span class="line">  routers:[</span><br><span class="line">  &#123;path:&#x27;/home&#x27;,component:Home&#125;,</span><br><span class="line">  &#123;path:&#x27;/movie&#x27;,component:Movie&#125;,</span><br><span class="line">  &#123;path:&#x27;/about&#x27;,component:About&#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

### 路由重定向

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const router=new VueRouter(&#123;</span><br><span class="line">  routers:[</span><br><span class="line">  &#123;path:&#x27;/&#x27;,redirect:&#x27;/home&#x27;&#125;,</span><br><span class="line">  &#123;path:&#x27;/home&#x27;,component:Home&#125;,</span><br><span class="line">  &#123;path:&#x27;/movie&#x27;,component:Movie&#125;,</span><br><span class="line">  &#123;path:&#x27;/about&#x27;,component:About&#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

###  嵌套路由

![](https://pic.imgdb.cn/item/63d6775cface21e9ef1cef4b.png)

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;App组件&lt;/h3&gt;</span><br><span class="line">    &lt;router-link to=&#x27;/about/tab1&gt;tab1&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&#x27;/about/tab2&gt;tab2&lt;/router-link&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br></pre></td></tr></table></figure>

#### 通过 children 属性声明子路由规则

在 src/router/index.js 路由模块中，导入需要的组件，并使用 children 属性声明子路由规则：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Tab1 from &#x27;@/components/tab1.vue&#x27;</span><br><span class="line">import Tab2 from &#x27;@/components/tab2.vue&#x27;</span><br><span class="line"></span><br><span class="line">  const router=new VueRouter(&#123;</span><br><span class="line">  routers:[</span><br><span class="line">  &#123;path:&#x27;/about&#x27;,</span><br><span class="line">  component:About,</span><br><span class="line">  children:[</span><br><span class="line">  &#123;path:&#x27;tab1&#x27;,component:Tab1&#125;,</span><br><span class="line">  &#123;path:&#x27;tab2&#x27;,component:Tab2&#125;,</span><br><span class="line">    ]</span><br><span class="line">   &#125;]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

### 动态路由

动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。 

在 vue-router 中使用英文的冒号（**:**）来定义路由的参数项。示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//&#123;path:&#x27;/movie:id&#x27;,component:Movie&#125;,</span><br><span class="line"></span><br><span class="line">&#123;path:&#x27;/movie/1&#x27;,component:Movie&#125;,</span><br><span class="line">&#123;path:&#x27;/movie/2&#x27;,component:Movie&#125;,</span><br><span class="line">&#123;path:&#x27;/movie/3&#x27;,component:Movie&#125;,</span><br></pre></td></tr></table></figure>

#### $route.params 参数对象

在动态路由渲染出来的组件中，可以使用 this.$route.params 对象访问到动态匹配的参数值。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Movie组件&#123;&#123;this.router.params.id&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Movie&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

#### 使用 props 接收路由参数

为了简化路由参数的获取形式，vue-router 允许在路由规则中开启 props 传参。示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  //定义</span><br><span class="line">  &#123;path:&#x27;/movie/1&#x27;,component:Movie,props:true&#125;,</span><br><span class="line"></span><br><span class="line">  &lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Movie组件&#123;&#123;id&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Movie&#x27;,</span><br><span class="line">    props:[&#x27;id&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

###  声明式导航 & 编程式导航

在浏览器中，点击链接实现导航的方式，叫做声明式导航。例如： 

普通网页中点击 <a> 链接、vue 项目中点击 <router-link> 都属于声明式导航 

在浏览器中，调用 API 方法实现导航的方式，叫做编程式导航。例如： 

普通网页中调用 location.href 跳转到新页面的方式，属于编程式导航

### 编程式导航

#### $router.push

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Home组件&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&#x27;gotoMovie&#x27;&gt;</span><br><span class="line">    跳转到Movie页面</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">   methods:&#123;</span><br><span class="line">     gotoMovie()&#123;</span><br><span class="line">       this.$router.push(&#x27;/movie/1&#x27;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



#### $router.replace

调用 this.$router.replace() 方法，可以跳转到指定的 hash 地址，从而展示对应的组件页面。 

push 和 replace 的区别： 

push 会增加一条历史记录 

replace 不会增加历史记录，而是替换掉当前的历史记录

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Home组件&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&#x27;gotoMovie&#x27;&gt;</span><br><span class="line">    跳转到Movie页面</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">   methods:&#123;</span><br><span class="line">     gotoMovie()&#123;</span><br><span class="line">       this.$router.replace(&#x27;/movie/1&#x27;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



#### $router.go

调用 this.$router.go() 方法，可以在浏览历史中前进和后退。

$router.back()  在历史记录中，后退到上一个页面 。

 $router.forward()  在历史记录中，前进到下一个页面。

示例代码如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;templace&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Home组件&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&#x27;gotoMovie&#x27;&gt;</span><br><span class="line">    跳转到Movie页面</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templace&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">   methods:&#123;</span><br><span class="line">     gotoMovie()&#123;</span><br><span class="line">       this.$router.go(-1)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

### 路由守卫

控制路由的访问权限

####  全局前置守卫

每次发生路由的导航跳转时，都会触发全局前置守卫。因此，在全局前置守卫中，程序员可以对每个路由进行访问权限的控制：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建路由实例对象</span><br><span class="line">const router=new VueRouter(&#123;...&#125;)</span><br><span class="line">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line">    //to 目的</span><br><span class="line">    //from 来源</span><br><span class="line">    // next 放行</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    //netx的调用状态</span><br><span class="line">    next()、next(&#x27;/login&#x27;)、next（false）</span><br><span class="line">    </span><br><span class="line">// 控制后台主页的访问权限</span><br><span class="line">    router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line"> if(token)&#123;</span><br><span class="line">    next()</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    next(&#x27;/login&#x27;)</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    next()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

# 三、vuex状态机

vuex是使用vue中必不可少的一部分，基于父子、兄弟组件，我们传值可能会很方便，但是如果是没有关联的组件之间要使用同一组数据，就显得很无能为力，那么vuex就很好的解决了我们这种问题，它相当于一个公共仓库，保存着所有组件都能共用的数据。

1、在store文件夹，新建个index.js文件

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import Vuex from &quot;vuex&quot;</span><br><span class="line"> </span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"> </span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        pathName: &quot;&quot;,</span><br><span class="line">        currDbSource: &#123;&#125;,</span><br><span class="line">        currJobData: &#123;&#125;,</span><br><span class="line">        DbSource: []</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        // 保存当前菜单栏的路径</span><br><span class="line">        savePath(state,pathName)&#123;</span><br><span class="line">            state.pathName = pathName;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 保存当前点击的数据源</span><br><span class="line">        saveCurrDbSource(state,currDbSource)&#123;</span><br><span class="line">            state.currDbSource = currDbSource;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 保存当前点击的元数据</span><br><span class="line">        saveCurrJobData(state,currJobData)&#123;</span><br><span class="line">            state.currJobData = currJobData;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 保存所有数据源</span><br><span class="line">        saveDbSource(state,DbSource)&#123;</span><br><span class="line">            state.DbSource = DbSource;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

2、main.js引用：（注意路径即可）

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入vuex-store</span><br><span class="line">import store from &#x27;./store/index&#x27;;</span><br><span class="line"> </span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

3、保存数据：（场景举例：当我点击按钮后，我需要把当前的数据保存到vuex中，然后跳转到别的路由，然后使用这些数据）

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    click()&#123;</span><br><span class="line">        // 点击按钮进行一些操作，然后保存数据</span><br><span class="line">        this.$store.commit(&#x27;saveCurrDbSource&#x27;,this.db)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  第一个参数是要触发的方法，也就是上面mutations中的方法，</span><br><span class="line">  第二个参数是你要传递的数据</span><br></pre></td></tr></table></figure>

4、获取变量：（当数据初始获取不到时，可以使用计算属性用来获取）

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$store.state.变量名</span><br><span class="line"> </span><br><span class="line">// 例如</span><br><span class="line">this.$store.state.currDbSource</span><br></pre></td></tr></table></figure>

# 四、ElementUI库

一个现成的ui库，相对于其它ui库较为简单。

## [Element UI官网](https://element.eleme.cn/#/zh-CN)

### 1、安装

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i element-ui -S</span><br></pre></td></tr></table></figure>

### 2、引入

打开项目的**main.js**

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>

### 开发后台管理系统的常用标签

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">el-container：构建整个页面框架</span><br><span class="line">el-aside：构建左侧菜单</span><br><span class="line">el-menu：左侧菜单内容，常用属性：</span><br><span class="line">:default-openeds=[&#x27;index&#x27;]：默认展开的菜单，通过菜单的index值来关联</span><br><span class="line">:default-active=[&#x27;index&#x27;]：默认选中菜单，通过index关联</span><br><span class="line">el-submenu：可展开的菜单，常用属性：</span><br><span class="line">index：菜单的下标，文本类型，不是数值类型。例&lt;el-submenu index=&quot;xx&quot;&gt;</span><br><span class="line">template：对应el-submenu的菜单名。</span><br><span class="line">i标签：设置菜单图标，通过class属性来设置。&lt;i calss=&quot;el-icon-iconName&quot;/&gt;</span><br><span class="line">el-menu-item：设置菜单的子节点，不可再展开</span><br><span class="line">index：菜单的下标，文本类型，不是数值类型。例&lt;el-menu-item index=&quot;xx&quot;&gt;</span><br></pre></td></tr></table></figure>

## 使用实例

### App.vue

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-container style=&quot;height: 500px; border: 1px solid #eee&quot;&gt;</span><br><span class="line">  &lt;!--左侧菜单--&gt;</span><br><span class="line">    &lt;el-aside width=&quot;200px&quot; style=&quot;background-color: white&quot;&gt;</span><br><span class="line">      &lt;!--一级菜单，默认打开导航1和导航2--&gt;</span><br><span class="line">      &lt;el-menu router :default-openeds=&quot;[&#x27;0&#x27;,&#x27;1&#x27;]&quot;&gt; </span><br><span class="line">      	&lt;!-- 遍历一级菜单的内容,若show为true则显示出来--&gt;</span><br><span class="line">        &lt;el-submenu v-for=&quot;(item,index) in $router.options.routes&quot; :index=&quot;index+&#x27;&#x27;&quot; v-if=&quot;item.show&quot;&gt;</span><br><span class="line">          &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-message&quot;&gt;&lt;/i&gt;&#123;&#123; item.name &#125;&#125;&lt;/template&gt;</span><br><span class="line">          &lt;!--遍历二级菜单内容并显示，class是选择某页面后展示的样式--&gt;</span><br><span class="line">          &lt;el-menu-item v-for=&quot;(item2,index2) in item.children&quot; :index=&quot;item2.path&quot;</span><br><span class="line">            :class=&quot;$route.path==item2.path?&#x27;is-active&#x27;:&#x27;&#x27;&quot;&gt;&#123;&#123; item2.name &#125;&#125;&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line">    &lt;!--右侧主页面--&gt;</span><br><span class="line">    &lt;el-main&gt;</span><br><span class="line">      &lt;!--展示选择的页面--&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/el-main&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br></pre></td></tr></table></figure>

### index.vue

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

### router/index.js

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const routes =[</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;导航1&#x27;,</span><br><span class="line">    component:Index,</span><br><span class="line">    show:true,</span><br><span class="line">    redirect:&quot;/PageOne&quot;,	//默认页面</span><br><span class="line">    children:[&#123;</span><br><span class="line">        path: &#x27;/PageOne&#x27;,</span><br><span class="line">        name: &#x27;页面1&#x27;,</span><br><span class="line">        component:PageOne&#125;,</span><br><span class="line">      &#123;path: &#x27;/页面2&#x27;,</span><br><span class="line">        name: &#x27;添加图书&#x27;,</span><br><span class="line">        component:PageTwo&#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:&#x27;/navigation&#x27;,</span><br><span class="line">    name:&#x27;导航二&#x27;,</span><br><span class="line">    show:true,</span><br><span class="line">    component:Index,</span><br><span class="line">    children:[&#123;</span><br><span class="line">        path: &#x27;/PageThree&#x27;,</span><br><span class="line">        name: &#x27;页面3&#x27;,</span><br><span class="line">        component:PageThree</span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure>

### 效果图：

![](https://pic.imgdb.cn/item/63d67776face21e9ef1d28a3.png)

# 五、axios与vue-axios

## [axios](https://so.csdn.net/so/search?q=axios&spm=1001.2101.3001.7020)和vue-axios区别

1、axios是基于promise的HTTP库，可以使用在浏览器和node.js中，它不是vue的第三方插件

2、axios使用的时候不能像vue的插件（如：Vue-Router、VueX等）通过Vue.use()安装插件，需要在原型上进行绑定：Vue.prototype.$axios = axios;

3、vue-axios是axios集成到Vue.js的小包装器，可以像插件一样安装:Vue.use(vueAxios);

注意: 使用vue的插件的写法（vue-axios）更符合vue整体的生态环境，直接写原型链会有些粗暴，且直接写原型链你取名为$http，你的项目成员可能取另外的名字，维护起来比较麻烦，而统一使用vue-axios就没有太多歧义.



## axios的使用

### 安装

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装axios</span><br><span class="line">npm install axios -S  </span><br></pre></td></tr></table></figure>

### 引入

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line">Vue.use(axios);</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = &#x27;http://test.fastadmin.cn&#x27; //全局方式生成环境使用的地址</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

### 使用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//get请求</span><br><span class="line">axios.get(&#x27;/user&#x27;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  //post请求</span><br><span class="line">    axios.post(&#x27;/user&#x27;, &#123;</span><br><span class="line">    firstName: &#x27;Fred&#x27;,</span><br><span class="line">    lastName: &#x27;Flintstone&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //执行多个并发请求</span><br><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&#x27;/user/12345&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&#x27;/user/12345/permissions&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure>

## vue-axios的使用

### 安装

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装axios</span><br><span class="line">npm install axios -S  </span><br><span class="line"># 安装vue-axios</span><br><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>

### 引入

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line">Vue.use(VueAxios, axios);</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

### 使用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//get请求</span><br><span class="line">Vue.axios.get(&#x27;url&#x27;,&#123;params:userId:1&#125;).then(res =&gt; &#123;&#125;).catch(err =&gt; &#123;&#125;);</span><br><span class="line">this.axios.get(&#x27;url&#x27;,&#123;params:userId:1&#125;).then(res =&gt; &#123;&#125;).catch(err =&gt; &#123;&#125;);</span><br><span class="line">this.$http.get(&#x27;url&#x27;,&#123;params:userId:1&#125;).then(res =&gt; &#123;&#125;).catch(err =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">//post请求</span><br><span class="line">Vue.axios.post(&#x27;url&#x27;,&#123;params:userId:1&#125;).then(res =&gt; &#123;&#125;).catch(err =&gt; &#123;&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2023/01/29/TypeScript/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>由微软开发的一个开源JavaScript的超集，主要提供了类型系统和对ES6的支持，他可以编译成纯JavaScript，任何现有的JavaScript都是合法的TypeScript的程序。</p>
<p>ts编写的文件采用ts作为文件后缀。</p>
<h2 id="二、与Flow区别"><a href="#二、与Flow区别" class="headerlink" title="二、与Flow区别"></a>二、与Flow区别</h2><p>本质区别上Flow是一种JavaScript的静态类型检查工具， 和TypeScript是一种语言。</p>
<span id="more"></span>

<h2 id="三、优势以及缺点"><a href="#三、优势以及缺点" class="headerlink" title="三、优势以及缺点"></a>三、优势以及缺点</h2><p><strong>TypeScript 增加了代码的可读性和可维护性</strong></p>
<ul>
<li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li>
<li>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</li>
<li>增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等</li>
</ul>
<p><strong>TypeScript 非常包容</strong></p>
<ul>
<li>TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可</li>
<li>即使不显式的定义类型，也能够自动做出类型推论</li>
<li>可以定义从简单到复杂的几乎一切类型</li>
<li>即使 TypeScript 编译报错，也可以生成 JavaScript 文件</li>
<li>兼容第三方库，即使第三方库不是用 TypeScript 写的，也可以编写单独的类型文件供 TypeScript 读取</li>
</ul>
<p><strong>TypeScript 拥有活跃的社区</strong></p>
<ul>
<li>大部分第三方库都有提供给 TypeScript 的类型定义文件</li>
<li>Google 开发的 Angular2 就是使用 TypeScript 编写的</li>
<li>TypeScript 拥抱了 ES6 规范，也支持部分 ESNext 草案的规范</li>
</ul>
<p><strong>TypeScript 的缺点</strong></p>
<p>任何事物都是有两面性的，我认为 TypeScript 的弊端在于：</p>
<ul>
<li>有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）、枚举类型（Enums）等前端工程师可能不是很熟悉的概念</li>
<li>短期可能会增加一些开发成本，毕竟要多写一些类型的定义，不过对于一个需要长期维护的项目，TypeScript 能够减少其维护成本</li>
<li>集成到构建流程需要一些工作量</li>
<li>可能和一些库结合的不是很完美</li>
</ul>
<p>大家可以根据自己团队和项目的情况判断是否需要使用 TypeScript。</p>
<h2 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h2><p><strong>TypeScript</strong> 提供一个cli工具， 让我们可以直接在命令行使用他。</p>
<p><strong>NPM安装</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<p>安装完成以后， 我们会得到一个全局命令 tsc</p>
<p>我们可以很轻易的去使用它。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>

<p>如果你的代码没有出现任何问题，你将会得到一个<strong>hello.js</strong>， 这是通过ts编译器转换而成的js文件， 可直接运行。</p>
<h2 id="五、配置文件"><a href="#五、配置文件" class="headerlink" title="五、配置文件"></a>五、配置文件</h2><p>通过cli工具，快速创建配置文件</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>


<p>将ts代码转换成哪个es规范的代码，默认是es5</p>
<p><strong>module</strong></p>
<p>将ts代码转换成js代码之后，使用的模块化标准，默认是commonjs</p>
<p><strong>outDir</strong></p>
<p>将ts代码转换成js代码后的输出路径，默认是.&#x2F;, 我们习惯.&#x2F;dist</p>
<p><strong>rootDir</strong></p>
<p>将哪个目录中的ts代码进行转换，默认是.&#x2F; ，我们习惯 .&#x2F;src</p>
<p><strong>strict</strong></p>
<p>是否转换成采用严格模式的js代码</p>
<h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">tsc -p ./tsconfig.json</span><br></pre></td></tr></table></figure>

<p>指定ts配置文件</p>
<h2 id="六、类型声明"><a href="#六、类型声明" class="headerlink" title="六、类型声明"></a>六、类型声明</h2><p>我们可以通过：冒号对变量进行类型声明</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&#x27;jelly&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>当我们去试图修改name这个变量的时候，修改成其他类型的时候是不被允许的</p>
<p>类型声明还有非常多的类型比如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isActive</span>:<span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">no</span>:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>



<h3 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h3><p>可以利用 <strong>&lt;&gt;</strong> 泛型去定义一个数组，描述数组的元素的类型组成</p>
<p>或者直接在元素类型在前，[]在后的形式去声明数组</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> girlFriend : Array&lt;string&gt; = [<span class="comment">&#x27;bb&#x27;,&#x27;cc&#x27;,&#x27;dd&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> girlFriend : string[] = [<span class="comment">&#x27;bb&#x27;,&#x27;cc&#x27;,&#x27;dd&#x27;]</span></span><br></pre></td></tr></table></figure>



<h3 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h3><p>对于已经了解数组的元素类型和元素个数的情况，我们直接可以使用<strong>元组Tuple</strong>去定义这个数组</p>
<p>比如说我这边需要一个数组，去存我三个朋友的名字，那么我可以利用<strong>元组的写法</strong>去声明类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> friends : [<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>] = [<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;vv&#x27;</span>,<span class="string">&#x27;dd&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>或者说这边使用一个数组去装我其中一个女朋友的信息，名字和年龄还有身高</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> friends : [<span class="built_in">string</span>,<span class="built_in">number</span>,<span class="built_in">number</span>] = [<span class="string">&#x27;bb&#x27;</span>,<span class="number">18</span>,<span class="number">168</span>]</span><br></pre></td></tr></table></figure>

<h3 id="空值void"><a href="#空值void" class="headerlink" title="空值void"></a>空值void</h3><p>与Flow一致，只能赋值为undefined</p>
<p><strong>注意：早期的TS版本void类型可以赋值为null，在最新版本void只能赋值为undefined</strong></p>
<h3 id="undefined，null"><a href="#undefined，null" class="headerlink" title="undefined，null"></a>undefined，null</h3><p>只能赋值undefined或者null类型</p>
<h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>一般用于定义一个函数永远不可以出现终点，即这个函数不可能执行完毕，常见的要么报错，要么死循环。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> err = ():<span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要区分与无返回值函数的区别。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这代码其实是可行的，void不代表函数不可以有return关键字， 只是限制了return必须返回void类型</span></span><br><span class="line"><span class="keyword">const</span> fn = ():<span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// never表示函数一旦执行了， 无法跳出这个函数。</span></span><br><span class="line"><span class="keyword">const</span> deelLoop = ():<span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="任意类型any"><a href="#任意类型any" class="headerlink" title="任意类型any"></a>任意类型any</h3><p>任意类型都可以，即为不对其进行类型检查。</p>
<p><strong>如果声明变量的时候没有对变量类型进行声明 并且没有赋值 ，那么将会默认声明成any类型的变量。</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> variable; </span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">variable</span>:<span class="built_in">any</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>

<p>可以认为，<strong>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值</strong>。</p>
<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>声明变量的时候如果没有声明类型，那么会自动根据赋值的类型进行类型推断</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">name</span> = <span class="comment">&#x27;jelly&#x27;</span></span><br><span class="line">//等价于</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">name</span>:string = <span class="comment">&#x27;jelly&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="object表示非原始类型"><a href="#object表示非原始类型" class="headerlink" title="object表示非原始类型"></a>object表示非原始类型</h3><p><strong>object</strong>表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。</p>
<p>这里要注意，null在ts中不属于object类型，即使在js中typeof null &#x3D;&#x3D; ‘object’</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>:<span class="built_in">object</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> == <span class="string">&#x27;object&#x27;</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举enum"><a href="#枚举enum" class="headerlink" title="枚举enum"></a>枚举enum</h3><p>typescript提供一种JavaScript中不存在的枚举类型，可以方便显性地为某一类数据的可能性做出命名声明。使其代码约束性更强， 可读性也更强。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> myname &#123;</span><br><span class="line">  oldName=<span class="string">&#x27;GD&#x27;</span>,</span><br><span class="line">  newName=<span class="string">&#x27;jelly&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的新名字是:&#x27;</span> + myname.<span class="property">newName</span>)</span><br><span class="line"><span class="comment">//&#x27;我的新名字是：jelly&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayName = (<span class="attr">name</span>:myname):<span class="function"><span class="params">void</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是:&#x27;</span>+ name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayName</span>(myname.<span class="property">newName</span>)</span><br><span class="line"><span class="comment">// &#x27;我的名字是:jelly&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>枚举自增</strong></p>
<ul>
<li>枚举的内容可以不为其赋值， 当所有内容都没有赋值的时候，所有枚举内容都为0</li>
<li>当为其中一个值赋于数字值，该枚举类型之后的值递增，之前的值从0递增</li>
<li>不可只为其中一个值赋予除数字类型以外的值，除非该值为枚举类型的最后一个</li>
</ul>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名（自定义类型）：为任意类型起别名。 </p>
<p>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，简化该类型的使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CustomArray</span>=(<span class="built_in">number</span>|<span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="title class_">CustomArray</span>=[<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="title class_">CustomArray</span>=[‘s’,<span class="string">&#x27;e&#x27;</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 使用 <span class="keyword">type</span> 关键字来创建类型别名。</span><br><span class="line"><span class="number">2.</span> 类型别名（比如，此处的 <span class="title class_">CustomArray</span>），可以是任意合法的变量名称。</span><br><span class="line"><span class="number">3.</span> 创建类型别名后，直接使用该类型别名作为变量的类型注解即可。</span><br></pre></td></tr></table></figure>



<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>函数的类型实际上指的是：函数参数和返回值的类型。 </p>
<p>为函数指定类型的两种方式：</p>
<p>1 单独指定参数、返回值的类型 2 同时指定参数、返回值的类型。 </p>
<p>\2. 同时指定参数、返回值的类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">add</span>:<span class="function">(<span class="params">num1:<span class="built_in">number</span>,num2:<span class="built_in">number</span></span>)=&gt;</span><span class="function">(<span class="params">num1,num2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、高级特性"><a href="#七、高级特性" class="headerlink" title="七、高级特性"></a>七、高级特性</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>表示可以取值为多种类型中的一种。类似<strong>Flow的或</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">variable</span>:<span class="built_in">string</span>|<span class="built_in">number</span> = <span class="string">&#x27;jelly&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>表示为两个类型的合并类型，使用 <strong>&amp;</strong> 连接</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> interfaceA  &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> interfaceB &#123;</span><br><span class="line">  <span class="attr">sayHi</span>:<span class="function">()=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: interfaceA &amp; interfaceB  = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;ahreal&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">sayHi</span>:<span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> &amp; <span class="built_in">number</span> = <span class="string">&#x27;ahreal&#x27;</span></span><br><span class="line"><span class="comment">// error , 基本类型合并以后会得到never类型, 字符串无法赋值给never类型</span></span><br></pre></td></tr></table></figure>

<h3 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h3><p>TS能够在代码编译阶段进行错误检查，但有一些情况必须只有在代码运行时候才知道是否是可靠的。</p>
<p>我们可以创建一个函数，这个函数返回值为boolean类型，可以声明函数的执行结果为类型声明。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: [<span class="built_in">string</span>,<span class="built_in">number</span>] = [</span><br><span class="line">  <span class="string">&#x27;ahreal&#x27;</span>,</span><br><span class="line">  <span class="number">18</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomSelect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> randomNum = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(randomNum&gt;<span class="number">50</span>) <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">randomSelect</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型保护函数</span></span><br><span class="line"><span class="keyword">const</span> isString = (value): value is <span class="built_in">string</span> =&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(value.<span class="property">length</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">isString</span>(result))&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">length</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">toFixed</span>(<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>当然，js内置的 typeof 方法也可解决这个方法，类型保护函数更适用于适用于复杂的类型判断</strong></p>
<p><strong>且typeof 类型保护在 TS中仅使用于 string&#x2F;number&#x2F;boolean&#x2F;symbol</strong></p>
<h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><p>字面量类型分为数字字面量以及字符串字面量类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>|<span class="string">&#x27;gd&#x27;</span> = <span class="string">&#x27;GD&#x27;</span></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>|<span class="string">&#x27;gd&#x27;</span> = <span class="string">&#x27;gd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>|<span class="string">&#x27;gd&#x27;</span> = <span class="string">&#x27;GD&#x27;</span></span><br><span class="line"><span class="comment">// success</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">age</span>:<span class="number">19</span> = <span class="number">19</span></span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure>

<h3 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h3><p>可将一个接口类型的所有属性名提取成一个字面量联合类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = keyof <span class="title class_">Person</span></span><br><span class="line"><span class="comment">// &quot;name&quot; | &quot;age&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Props</span>:<span class="title class_">Props</span> = <span class="string">&#x27;age&#x27;</span></span><br><span class="line"><span class="comment">// success</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Props</span>:<span class="title class_">Props</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// success</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Props</span>:<span class="title class_">Props</span> = <span class="string">&#x27;sex&#x27;</span></span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<p>有了keyof以后，我们可以判断动态属性名类型。</p>
<p>假设我有一个函数，函数接收两个参数</p>
<ul>
<li>对象</li>
<li>属性名</li>
</ul>
<p>函数返回对象属性名的值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">func1</span> = (<span class="params">obj:<span class="built_in">object</span>, key:<span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;ahreal&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func1</span>(person,<span class="string">&#x27;sex&#x27;</span>)</span><br><span class="line"><span class="comment">// 得到undefined，显然这些是可以在编译阶段检查出来的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们可以很容易的限制参数obj为一个对象，key为一个字符串，但是我们如果不使用keyof，</span><br><span class="line">便很难限制，key必须为obj的一个属性名。</span><br><span class="line">使用keyof以后。</span><br><span class="line"><span class="keyword">const</span> func1 = <span class="language-xml"><span class="tag">&lt;<span class="name">T</span> <span class="attr">extneds</span> &#123;[<span class="attr">prop:string</span>]<span class="attr">:any</span>&#125;&gt;</span>(obj:T, key:keyof T) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">  return obj[key]</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">const person = &#123;</span></span><br><span class="line"><span class="language-xml">  name:&#x27;ahreal&#x27;,</span></span><br><span class="line"><span class="language-xml">  age:19</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">func1(person,&#x27;sex&#x27;)</span></span><br><span class="line"><span class="language-xml">// error</span></span><br></pre></td></tr></table></figure>

<h3 id="索引访问操作符"><a href="#索引访问操作符" class="headerlink" title="索引访问操作符[]"></a>索引访问操作符[]</h3><p>我们如何才能访问接口中某个属性的类型呢，使用[]即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyStringType</span> = <span class="title class_">MyInterface</span>[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>TypeScript内置了几种映射类型，映射类型可以简单的认为是对接口的属性进行遍历操作。</p>
<ul>
<li>Readonly 只读</li>
<li>Partial 可选</li>
<li>Pick 选出接口中指定属性的类型</li>
<li>Record 用于描述接口属性类型以及属性值类型，返回一个新的接口</li>
</ul>
<p>假设我们有一个接口，我们需要为接口所有属性添加readonly描述。</p>
<p>我们可以手动添加readonly关键字</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用<strong>Readonly</strong>映射类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> readonlyMyInterFace = <span class="title class_">Readonly</span>&lt;<span class="title class_">MyInterface</span>&gt;</span><br></pre></td></tr></table></figure>

<p>同理，需要将所有属性转换为可选属性，使用<strong>Partial</strong>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialMyInterFace</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">MyInterface</span>&gt;</span><br></pre></td></tr></table></figure>

<p>假设，我们需要一个类型是某个接口精简过的，我们可使用<strong>Pick</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="attr">address</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickInterFace</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">MyInterface</span>, <span class="string">&#x27;name&#x27;</span>|<span class="string">&#x27;age&#x27;</span>&gt;</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:string</span></span><br><span class="line"><span class="comment">//   age:number</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>假设我们需要定义一组animals数据，用一个对象承载，对象属性名为动物的种类，对象属性值为动物的名字和属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;</span><br><span class="line">  <span class="attr">dog</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cat</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mouse</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">15</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以用<strong>Record</strong>快速的定义类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="title class_">Record</span>&lt;<span class="string">&#x27;dog&#x27;</span>|<span class="string">&#x27;cat&#x27;</span>|<span class="string">&#x27;mouse&#x27;</span>, <span class="title class_">Animal</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">animals</span>:<span class="title class_">Animals</span> = &#123;</span><br><span class="line">  <span class="attr">dog</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cat</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mouse</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">15</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增加或删除属性修饰符"><a href="#增加或删除属性修饰符" class="headerlink" title="增加或删除属性修饰符"></a>增加或删除属性修饰符</h3><p>可在类型修饰符前面使用+或者-号</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> readOnly&lt;T&gt; = &#123;</span><br><span class="line">  +<span class="keyword">readonly</span> [ p <span class="keyword">in</span> keyof T ] : T[p]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> unReadOnly&lt;T&gt; = &#123;</span><br><span class="line">  -<span class="keyword">readonly</span> [ p <span class="keyword">in</span> keyof T ] : T[p]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><ul>
<li>任何类型的值都可赋值给unknown</li>
<li>如果没有类型断言，unknown不可赋值给其他类型（除了any和unknown）</li>
<li>与其他类型组合的交叉类型，都等于其他类型</li>
<li>与其他类型组合（除了any）的联合类型，都为unknown</li>
<li>never是unknown的子类型</li>
</ul>
<h3 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h3><p>表示等待推断的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> inferType&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt; ? U : <span class="built_in">never</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> type1 = inferType&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> type2 = inferType&lt;<span class="built_in">string</span>[]&gt;</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> type3 = unType&lt;[<span class="built_in">string</span>,<span class="built_in">number</span>]&gt;</span><br><span class="line"><span class="comment">// string | number</span></span><br></pre></td></tr></table></figure>

<h3 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h3><p>接收两个类型参数，返回类型参数一中<strong>不兼容</strong>类型参数二的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">type</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>|<span class="built_in">boolean</span>, <span class="built_in">string</span>|<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>

<h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h3><p>接收两个类型参数，返回类型参数一中<strong>兼容</strong>类型参数二的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">type</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>|<span class="built_in">boolean</span>, <span class="built_in">string</span>|<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">// number | string</span></span><br></pre></td></tr></table></figure>

<h3 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable</h3><p>找出参数类型中所有不为undefined, null, never类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">type</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="comment">// number|string</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">type</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt;</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">type</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>|<span class="literal">undefined</span>&gt;</span><br><span class="line"><span class="comment">// number|string</span></span><br></pre></td></tr></table></figure>

<h3 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType</h3><p>返回函数类型的返回值类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> fnType = <span class="function">()=&gt;</span><span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> returnType = <span class="title class_">ReturnType</span>&lt;fnType&gt;</span><br><span class="line"><span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<h2 id="八、类型断言"><a href="#八、类型断言" class="headerlink" title="八、类型断言"></a>八、类型断言</h2><p>通常发生在你明白一个类型有比它现有类型更加确切的类型，这时候可以使用类型断言。</p>
<p>有两种写法：</p>
<p><strong>尖括号</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<p><strong>as</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<p>注意， 在<strong>jsx</strong>中，只可以使用as对类型进行断言</p>
<h2 id="九、TS中的类"><a href="#九、TS中的类" class="headerlink" title="九、TS中的类"></a>九、TS中的类</h2><p>与ES6的类大抵相似，稍微有些不同。</p>
<p>假设我们在ES6声明一个person类。</p>
<p><strong>ES6</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TypeScript</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayName</span>():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TS与ES6不同的是：</p>
<ul>
<li>使用到的类属性，需要事先定义。</li>
<li>类属性必须在<strong>constructor</strong>中赋值， 否则得事先声明默认值</li>
</ul>
<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>可以在类成员前通过添加关键字来设置当前类成员的访问权限</p>
<p>修饰符有三种：</p>
<ul>
<li>public 公开的，默认</li>
<li>privcate 私有的，只能在当前类中访问</li>
<li>protected 受保护的，只能在当前类中或者子类中访问</li>
</ul>
<p><strong>public</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认即为public， 加与不加效果一致</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayName</span>():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jelly&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// allen</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// 18</span></span><br></pre></td></tr></table></figure>

<p><strong>private</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private能且只能在当前类中访问</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sayName</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayName</span>():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">   <span class="comment">// private可以在当前类中访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jelly&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<p><strong>protected</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// protected能在当前类或者子类中进行访问</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">sayName</span>():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">sayFatherName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sayName</span>()</span><br><span class="line">    <span class="comment">// protected 的成员属性可在子类中访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>前面的例子， 我们在使用类的属性的时候，必须事先在类里面声明。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TS提供了一种能让我们更加快速定义类的方式， 即 <strong>参数属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只需要在构造函数参数前面加上访问修饰符， 即可视为声明了相应类的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类的只读属性"><a href="#类的只读属性" class="headerlink" title="类的只读属性"></a>类的只读属性</h3><p>我们可以声明某个类属性为只读属性，使用<strong>readonly</strong>关键字，只读具有只可访问，不可修改的特点。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">  male = <span class="number">0</span>,</span><br><span class="line">  female = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>, <span class="keyword">public</span> <span class="keyword">readonly</span> sex:Sex</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;GD&#x27;</span>, <span class="title class_">Sex</span>.<span class="property">male</span>)</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;jelly&#x27;</span></span><br><span class="line"></span><br><span class="line">person.<span class="property">sex</span> = <span class="title class_">Sex</span>.<span class="property">female</span></span><br><span class="line"><span class="comment">// error sex is a read-only property</span></span><br></pre></td></tr></table></figure>

<h3 id="类属性存取器"><a href="#类属性存取器" class="headerlink" title="类属性存取器"></a>类属性存取器</h3><p>我们可以显性的为类的属性添加get和set方法，当用户访问实例属性的时候，会调用get方法，当用户设置实例属性的时候，会调用set方法。</p>
<p>假设我们有一个场景，我们需要在设置属性之前检查一下属性的合法性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_name</span>:<span class="built_in">string</span> = <span class="string">&#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>():<span class="built_in">string</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">validate</span>(name)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;名字长度不合法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 我们检查了参数的合法性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">validate</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(name.<span class="property">length</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jelly&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;jellyGD&#x27;</span></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">_name</span>)</span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<p>当某一个类属性具有存取器时， 这个类属性的访问修饰符最好设置为private，不允许外部直接访问属性。而是必须通过get和set进行访问</p>
<h2 id="十、接口"><a href="#十、接口" class="headerlink" title="十、接口"></a>十、接口</h2><p><strong>interface</strong>，是对格式的一种规范，接口不会去检查属性的顺序，<strong>只会检查属性是否存在以及属性的类型</strong></p>
<p><strong>接口也是一种类型</strong></p>
<h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> boy&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">money</span>:<span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">success</span>:<span class="function">(<span class="params">data:<span class="built_in">Object</span></span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params">option:boy</span>):<span class="built_in">void</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">change</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>,</span><br><span class="line">  <span class="attr">money</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="attr">success</span>:<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们定义了一个change函数，change函数的接收的参数option必须是boy接口类型。</p>
<h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p><strong>?表示可选属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> boy &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="built_in">string</span>;	<span class="comment">//一个boy，可以没钱，但是必须要有自己的名字</span></span><br><span class="line">	money?:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>？如果我们把参数名字拼错，TS还会帮我们检查其参数名错误</strong></p>
<h3 id="接口的只读属性"><a href="#接口的只读属性" class="headerlink" title="接口的只读属性"></a>接口的只读属性</h3><p>readonly 只读属性，只可以在声明的时候赋值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> boy &#123;</span><br><span class="line">	<span class="keyword">readonly</span> <span class="attr">sex</span>:<span class="built_in">string</span>;	<span class="comment">//一个boy，一出生就定好性别，不可以改变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数组也可以作为一个只读的数组，ReadonlyArray<T></strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ro</span>:<span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = a	<span class="comment">//这样a数组就不可以被修改了</span></span><br></pre></td></tr></table></figure>

<p><strong>接口同时也可帮助我们限制对象某些属性为只读属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> boy &#123;</span><br><span class="line">	<span class="keyword">readonly</span> <span class="attr">sex</span>:<span class="built_in">string</span>;	<span class="comment">//一个boy，一出生就定好性别，不可以改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>:boy = &#123; <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">b.<span class="property">sex</span> = <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><p>对索引类型得到值的类型进行定义</p>
<p><strong>值得注意的是，设置number索引的时候，ts会将其转换成对应的字符串形式进行索引。</strong></p>
<p>**所以，你 数字 1 索引的结果应当和字符串 ‘1’ 索引的结果一致 **</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">  [<span class="attr">props</span>:<span class="built_in">string</span>]:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们声明string类型的索引，得到的属性值一定是string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="title class_">Boy</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="comment">// 因为我们规定string类型的索引返回值一定是string类型，我们如上定义的b[&#x27;age&#x27;]的值确为number</span></span><br></pre></td></tr></table></figure>

<p>我们常用<strong>可索引的类型</strong>这个特性，来帮助我们规定除接口<strong>定义以外的属性的类型</strong>。</p>
<p>比如说我们现在有个接口Boy，规范了b这个对象的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="title class_">Boy</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们需要在b身上添加属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">b.<span class="property">hobby</span> = <span class="string">&#x27;game&#x27;</span></span><br><span class="line"><span class="comment">// error， 因为Boy这个接口未定义hobby</span></span><br></pre></td></tr></table></figure>

<p>但其实我们并不希望这个Boy接口去约束hobby，Boy只约束他事先声明的属性，我们可以</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">  [<span class="attr">props</span>:<span class="built_in">string</span>]:<span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>规定了字符串类型的索引得到的属性类型为 <strong>any</strong></p>
<p>这样我们就可以在boy身上任意设置除了name, age以外的属性。</p>
<h3 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> myFn &#123;</span><br><span class="line">	(<span class="attr">name</span>:<span class="built_in">string</span>,<span class="attr">age</span>:<span class="built_in">number</span>,<span class="attr">isBoy</span>:<span class="built_in">boolean</span>):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> logInfo : myFn</span><br><span class="line"></span><br><span class="line">logInfo = <span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span>,isBoy:<span class="built_in">boolean</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>,im a <span class="subst">$&#123;isBoy?<span class="string">&#x27;boy&#x27;</span>:<span class="string">&#x27;gril&#x27;</span>&#125;</span>,i&#x27;m <span class="subst">$&#123;age&#125;</span> year&#x27;s old`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h3><p>我们可以定义一个接口来规定类的属性以及类的方法。</p>
<p>使用 <strong>implements</strong> 关键性声明类所实现的接口。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> person &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">eat</span>:<span class="function">()=&gt;</span><span class="built_in">void</span>,</span><br><span class="line">  [<span class="attr">props</span>:<span class="built_in">string</span>]:<span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> person &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="attr">sex</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span>, sex:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>= age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>接口继承接口， 子接口拥有父接口的所有特性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> twoPoint &#123;</span><br><span class="line">  <span class="attr">x</span>:<span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> threePoint <span class="keyword">extends</span> twoPoint &#123;</span><br><span class="line">  <span class="attr">z</span>:<span class="built_in">number</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>:threePoint = &#123;</span><br><span class="line">  <span class="attr">x</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">z</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口可实现多继承</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> twoPoint &#123;</span><br><span class="line">  <span class="attr">x</span>:<span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> pointInfo &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> threePoint <span class="keyword">extends</span> twoPoint, pointInfo &#123;</span><br><span class="line">  <span class="attr">z</span>:<span class="built_in">number</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>:threePoint = &#123;</span><br><span class="line">  <span class="attr">x</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">z</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;点点&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>无法随意重写父接口的类型声明</strong></p>
<h2 id="十一、泛型"><a href="#十一、泛型" class="headerlink" title="十一、泛型"></a>十一、泛型</h2><p>有时候我们使用TS能够十分好的去控制我们想要得到的结果，但是有时候我们希望我们的做的API能够拥有良好的可重用性，不仅支持我们预期的类型， 还支持一些未知的类型，这种类型我们称之为泛型。</p>
<h3 id="类型变量"><a href="#类型变量" class="headerlink" title="类型变量"></a>类型变量</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子中，我们定义了我们接收的arg参数，它的类型是变量T（当然我们需要事先使用&lt;&gt;声明这个变量）。</p>
<p>有了这个变量，例子中我们做到了输入的类型和输出的类型始终保持一致。</p>
<p>以上的例子中的identity函数，我们称其为<strong>泛型函数</strong></p>
<p>与any不同的是，any是<strong>不可控</strong>的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在未使用类型变量时，我们<strong>无法确保</strong>参数类型和返回值类型始终保持一致。</p>
<p><strong>类型变量其实是函数的第二种参数</strong></p>
<p>我们可知，函数可以接收参数，声明于括号里面<strong>（）</strong></p>
<p>类型参数是函数的第二种参数，声明于 <strong>&lt;&gt;</strong> 里面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;T&gt;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn&lt;<span class="built_in">string</span>&gt;([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>例子中，我们声明了一个函数fn，函数fn接收一个数组参数， 数组元素类型为T，而具体T是什么类型是由调用者传递。</p>
<p><strong>调用泛型函数时也可以不传递类型参数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;T&gt;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>例子中，我们没有传递类型参数，TS会自动帮助我们推断T我们传递的类型参数是string</p>
<h2 id="十二、声明合并"><a href="#十二、声明合并" class="headerlink" title="十二、声明合并"></a>十二、声明合并</h2><h3 id="接口合并"><a href="#接口合并" class="headerlink" title="接口合并"></a>接口合并</h3><ul>
<li>从根本上说，合并的机制是把双方的成员放到一个同名的接口里。</li>
<li>接口的非函数的成员应该是唯一的。如果它们不是唯一的，那么它们必须是相同的类型。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="attr">force</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="comment">// width: string; // 后续属性声明必须属于同一类型。</span></span><br><span class="line">  <span class="title function_">transform</span>(<span class="attr">force</span>: <span class="built_in">number</span>, <span class="attr">radius</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">box</span>: <span class="title class_">Box</span> = (&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">force: <span class="built_in">number</span>, radius: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;)  <span class="keyword">as</span> <span class="title class_">Box</span></span><br></pre></td></tr></table></figure>

<p>命名空间的合并</p>
<ul>
<li>对于命名空间的合并，模块导出的同名接口进行合并，构成单一命名空间内含合并后的接口。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Man</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">Human</span>); </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Person &#123;</span></span><br><span class="line"><span class="comment"> *  Human() &#123;&#125;,</span></span><br><span class="line"><span class="comment"> *  Man() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>接口合并&amp;命名空间合并，其实就是往自己内部添加；</li>
<li>类，函数与命名空间合并，其实就是往函数体上增加属性；</li>
<li>枚举与命名空间合并，就是往枚举对象内部添加命名空间导出的属性；</li>
</ul>
<h2 id="十三、类型兼容性"><a href="#十三、类型兼容性" class="headerlink" title="十三、类型兼容性"></a>十三、类型兼容性</h2><p>在TypeScript中类型存在包含关系，当变量类型兼容时可以正常赋值。</p>
<h3 id="接口兼容性"><a href="#接口兼容性" class="headerlink" title="接口兼容性"></a>接口兼容性</h3><p>先来个错误的例子🎃</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> infoInterFace&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:infoInterFace = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    <span class="comment">// error infoInterFace不存在age属性的类型定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改成这样写编译竟然能通过</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> infoInterFace&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:infoInterFace</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jelly&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj3</span>:<span class="built_in">any</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj = obj2</span><br><span class="line"><span class="comment">// success</span></span><br><span class="line">obj = obj3</span><br><span class="line"><span class="comment">// success</span></span><br><span class="line">obj = obj4</span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>TypeScript对变量字面量赋值时候进行了严格的类型检查</li>
<li>对变量赋值给变量时，等号右边的类型必须<strong>大于或等于</strong>左边的类型， 小于则会不兼容。</li>
</ul>
<h3 id="函数兼容性"><a href="#函数兼容性" class="headerlink" title="函数兼容性"></a>函数兼容性</h3><p><strong>参数个数兼容性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">func1</span> = (<span class="params">name:<span class="built_in">string</span></span>) =&gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func2</span> = (<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span></span>) =&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">func1 = func2</span><br><span class="line"><span class="comment">// success</span></span><br><span class="line"></span><br><span class="line">func2 = func1</span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数参数个数必须小于或者等于函数类型定义的参数个数</li>
</ul>
<p><strong>参数类型兼容性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">func1</span> = (<span class="params">age:<span class="built_in">string</span></span>) =&gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func2</span> = (<span class="params">age:<span class="built_in">number</span></span>) =&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">func1 = func2 </span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func3</span> = (<span class="params">opt:&#123; age:<span class="built_in">number</span>, name:<span class="built_in">string</span> &#125;</span>) =&gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func4</span> = (<span class="params">opt:&#123; age:<span class="built_in">number</span> &#125;</span>) =&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">func4 = func3</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">func3 = func4</span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数参数类型必须小于或者等于函数定义的参数类型。</li>
<li>函数参数具有逆变兼容，返回值具有协变兼容</li>
</ul>
<h2 id="十四、声明文件"><a href="#十四、声明文件" class="headerlink" title="十四、声明文件"></a>十四、声明文件</h2><p>当我们使用第三方库的时候，我们需要引用他的声明文件，才能获得对应的代码补全，接口提示等功能。</p>
<p>一个 ***.d.ts** 文件为一个声明文件。</p>
<h3 id="第三方文件声明"><a href="#第三方文件声明" class="headerlink" title="第三方文件声明"></a>第三方文件声明</h3><p>一些著名的库一般都已经有了对应的声明文件。</p>
<p>我们可以直接下载下来使用，但是更推荐的是使用 @types 统一管理第三方库的声明文件。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie与Session</title>
    <url>/2023/01/29/Cookie%E4%B8%8ESession/</url>
    <content><![CDATA[<p>基础概念<br>cookie<br>cookie，翻译过来就是 饼干&#x2F;小甜点 的意思，cookie一种在浏览器用于存储来自不同域的信息，cookie由键值对的形式存储，能够永久存储于浏览器的一种数据形式，因为cookie是存储于浏览器（客户端）的，所以浏览器对cookie做了一些限制确保cookie不会被恶意使用，同时又不会占据太多空间，所以每个域能够在客户端存储的cookie是有限的。</p>
<span id="more"></span>

<p>文中提到的session和token都是以cookie的形式存储在客户端的浏览器的。<br>session<br>session，会话，用于标记每个不同客户端。<br>首先我们要知道HTTP是一种无状态的协议，这也就意味着，每次客户端访问服务器，服务器收到的都是一个全新的请求，不知道谁是谁，等于说一次访问前后就失去了关联。<br>张三（客户端）：你好，我是张三。					&#x2F;&#x2F;客户端登录<br>李四（服务端）：好的，张三，我知道你，你是我们这儿的会员，请问你需要什么帮助？&#x2F;&#x2F;服务端验证通过<br>张三（客户端）：我想要查询我的个人信息。		&#x2F;&#x2F;客户端操作（新的请求）<br>李四（服务端）：你是谁？你还没告诉我？		&#x2F;&#x2F;服务端提示未登录<br>。。。<br>session的出现，解决了HTTP无状态带来的问题，客户端舒服了，但是服务器就惨了，具体由session引发的问题在下面发展史会讲。</p>
<p>token<br>token的出现，是为了解决由于session带来的问题，一种升级版的HTTP无状态问题解决方案。<br>首先token是一串通过HMAC-SHA256算法加密过的字符串<br>一次完整的token验证流程为：</p>
<ol>
<li>客户端首次发起请求，带上自己的独有信息（例如浏览器信息，ip地址，用户名等等）</li>
<li>服务端接收到请求，将客户端的带来的信息，和自己一串私有的密钥，通过HMAC-SHA256算法加密生成一串token字符串，响应的时候讲这串token字符串返回，自己不存储这串token。</li>
<li>客户端将token保存在自己的本地，再次发起请求的时候带上这串token。</li>
<li>服务端将客户端带来的独有信息，通过和自己私有的密钥，通过HMAC-SHA256算法加密生成一串token字符串，再将这串新生成的token和客户端带来的token进行比较，如果一致，则访问通过。</li>
</ol>
<p>发展史<br>早期的上网模式，浏览器访问某个网站都是文档形式浏览，服务端仅仅是将客户端请求的东西返回回去，不需要记录谁再某一段时间内浏览了什么内容，所以每次HTTP请求都是一次全新的请求，服务端也不用管对方是谁，你要啥我给你啥就完事了。<br>随着web的发展，像购物网站，论坛等的发展，最简单的，只要是需要登录的网站，服务器必须管理会话，必须知道谁是谁，而不是你要啥我就给你啥，这时候session出现了。<br>你访问我，我给你一串session id，我自己备份一个，你下次过来，我对比下我自己记录的session id，我就可以知道你是谁了。<br>随机带来的问题也很严重：</p>
<ol>
<li>内存开销：因为往往一个网站是有成千上万的人同时来访问，如果每个人我都要存一份session id在我这，那么对于我的服务器的存储是一个巨大的开销。</li>
<li>拓展限制：服务器A想拓展自己的服务器，多开一个服务器B来做负载均衡，那就是一个棘手的问题：<br>  a. 例如客户端小a访问服务器A，服务器A给了小a一份session id，自己存一份，小a又来发请求，但是这次请求被转发到了服务器B，服务器B并没有存储小a的session id，那么小a这时候又得重新验证。<br>  b. 如果每次服务器创建一个新的session id，就往自己其他的服务器复制粘贴一份，开销代价就会升高。<br>  c. 如果统一集中将session id都存在一个服务器，其他的服务器都来这里做验证，万一这个session服务器挂了，那么全部都挂了。</li>
<li>安全问题：客户端session id一旦泄露，他人便可带着这个session id来访问我的服务器，我服务器经过验证这个session id是可以通过的（之前存储过），那么便会造成了其他人冒名顶替的问题，这里有个专业名词叫CSRF(跨站请求伪造)<br>于是乎token横空出世，我服务器不保存这个可恶的session id，我给你个token，你下次来访问我带上token，我临时再赶紧算一下这个token对不对，对就让你过了，所以事情目前也就得到了解决方案。<br>小结<br>token的出现解决的大头问题的服务器端的压力，但是本质上换汤不换药（个人理解），新的验证形式罢了。</li>
</ol>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2023/01/29/HTTP/</url>
    <content><![CDATA[<h1 id="一、HyperText-Transfer-Protocol"><a href="#一、HyperText-Transfer-Protocol" class="headerlink" title="一、HyperText Transfer Protocol"></a>一、HyperText Transfer Protocol</h1><p>超文本传输协议</p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>为了实现相同的目标，约束多方参与人的行为。</p>
<p>即你想参与进某一件事，那么就得遵守这件事所定下的标准，才能流畅和第三方合作。</p>
<p>http本身就是一份协议，是交流通信的规范，以及各种控制和错误的处理方式。</p>
<h2 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h2><p>传输是个动词，表示把某些数据从A搬运到B，A为请求方，B为应答方，一应一答，就实现了数据了搬运。<br>所以 <strong>传输</strong> 表示http是用于描述两点之间传输数据的协议</p>
<span id="more"></span>

<h2 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h2><p>表示http传输的不是普通的文本，而是文字、图片、音频和视频等的混合体</p>
<p>总结下来就是：</p>
<p><strong>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。</strong></p>
<h1 id="二、TCP-x2F-IP网络分层模型"><a href="#二、TCP-x2F-IP网络分层模型" class="headerlink" title="二、TCP&#x2F;IP网络分层模型"></a>二、TCP&#x2F;IP网络分层模型</h1><p><strong>分层图例</strong></p>
<p><img src="https://pic.imgdb.cn/item/63d674fdface21e9ef17b2d1.png"></p>
<p>TCP&#x2F;IP网络分层就是我们常说的四层协议，模型是一个自下而上的模型，每层协议都依托下层协议的支持。</p>
<h2 id="link-链接层"><a href="#link-链接层" class="headerlink" title="link 链接层"></a>link 链接层</h2><p>底层网络协议，工作在网卡层级，传输原始数据包，使用MAC地址来标记。</p>
<h2 id="internet-网际层"><a href="#internet-网际层" class="headerlink" title="internet 网际层"></a>internet 网际层</h2><p>又叫“网络互连层”，IP协议所在的分层，描述了如何将各个小型的本地网络，串联起来。用IP地址取代MAC地址，在需要寻找某一个具体设备时，在通过IP地址转换成MAC地址。</p>
<h2 id="transport-传输层"><a href="#transport-传输层" class="headerlink" title="transport 传输层"></a>transport 传输层</h2><p>描述两个IP地址之间如何进行传输，TCP&#x2F;UDP工作在这层。</p>
<p>TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。</p>
<p>而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。</p>
<p>TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。</p>
<h2 id="application-应用层"><a href="#application-应用层" class="headerlink" title="application 应用层"></a>application 应用层</h2><p>SSH、FTP、SMTP 、HTTP等</p>
<p>MAC 层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。</p>
<h1 id="三、OSI网络分层模型"><a href="#三、OSI网络分层模型" class="headerlink" title="三、OSI网络分层模型"></a>三、OSI网络分层模型</h1><p>即为七层协议<strong>，OSI，全称是“开放式系统互联通信参考模型”</strong></p>
<p><img src="https://pic.imgdb.cn/item/63d6750bface21e9ef17d180.png"></p>
<p>OSI也是一个自底向上的协议栈</p>
<ol>
<li>第一层：物理层，网络的物理形式，例如电缆、光纤、网卡、集线器等等；</li>
<li>第二层：数据链路层，它基本相当于 TCP&#x2F;IP 的链接层；</li>
<li>第三层：网络层，相当于 TCP&#x2F;IP 里的网际层；</li>
<li>第四层：传输层，相当于 TCP&#x2F;IP 里的传输层；</li>
<li>第五层：会话层，维护网络中的连接状态，即保持会话和同步；</li>
<li>第六层：表示层，把数据转换为合适、可理解的语法和语义；</li>
<li>第七层：应用层，面向具体的应用传输数据。</li>
</ol>
<p>OSI更多是一个理论层面的模型，实际现实中跑的更多还是TCP&#x2F;IP模型。</p>
<h1 id="四、TCP-x2F-IP协议栈工作方式"><a href="#四、TCP-x2F-IP协议栈工作方式" class="headerlink" title="四、TCP&#x2F;IP协议栈工作方式"></a>四、TCP&#x2F;IP协议栈工作方式</h1><p><img src="https://pic.imgdb.cn/item/63d6751cface21e9ef17f0f4.png"></p>
<p>一些数据的发送，需要自顶向下层层封包，加上TCP头，IP头、MAC头，再经过链接层传输到远端，远端收到数据包以后，再自底向上层层解包，最终到达应用层。</p>
<p>层的传输过程对于上层是完全“透明”的，上层也不需要关心下层的具体实现细节，所以就 HTTP 层次来看，它不管下层是不是 TCP&#x2F;IP 协议，看到的只是一个可靠的传输链路，只要把数据加上自己的头，对方就能原样收到。</p>
<h1 id="五、域名"><a href="#五、域名" class="headerlink" title="五、域名"></a>五、域名</h1><p>我们都知道，访问一个服务，我们可以通过公网ip地址找到，但是ip地址是纯数字组成，难以记忆。所以就诞生了域名，域名是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。</p>
<h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是“<strong>域名解析”</strong>。</p>
<p>由左到右，挨个查询。</p>
<p>DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：</p>
<ol>
<li>根域名服务器（Root DNS Server）：管理顶级域名服务器，返回“com”“net”“cn”等顶级域名服务器的 IP 地址；</li>
<li>顶级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址；</li>
<li>权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 IP 地址。</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/63d6752aface21e9ef180bfa.png"></p>
<h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><p>各大运营商，或者公司内网会自己搭建DNS服务器，作为用户DNS查询的代理，代替访问DNS核心系统。<br>一般来说，如果之前查询过的域名，则会缓存查询结果的IP地址，从而加快DNS解析的速度。</p>
<p>并且操作系统也会自己记录DNS解析的记录，并写入host文件，以后再访问这个域名，就可以直接拿到本地记录的IP地址了。</p>
<h1 id="六、报文结构"><a href="#六、报文结构" class="headerlink" title="六、报文结构"></a>六、报文结构</h1><p>HTTP报文是一个<strong>纯文本</strong>协议，所有头数据都是ASCII码文本。</p>
<p>HTTP报文分为<strong>请求报文</strong>和<strong>响应报文</strong>，首先两种报文的结构一致，只有在头上有所区别。</p>
<p>结构：</p>
<p><img src="https://pic.imgdb.cn/item/63d67535face21e9ef18241a.png"></p>
<ol>
<li>起始行：描述请求或响应的基本信息</li>
<li>头字段（头部）：使用key：value描述报文</li>
<li>消息正文（实体）：实际传输的数据，不一定是文本，也可以是二进制数据</li>
</ol>
<p><strong>请求行</strong></p>
<p>请求的起始行也叫请求行，由三部分构成：</p>
<p><img src="https://pic.imgdb.cn/item/63d67542face21e9ef18559c.png"></p>
<ol>
<li>请求方法：是一个动词，如 GET&#x2F;POST，表示对资源的操作；</li>
<li>请求目标：通常是一个 URI，标记了请求方法要操作的资源；</li>
<li>版本号：表示报文使用的 HTTP 协议版本。</li>
</ol>
<p><strong>状态行</strong></p>
<p>响应的起始行也叫状态行，由三部分构成：</p>
<p><img src="https://pic.imgdb.cn/item/63d6754dface21e9ef187117.png"></p>
<ol>
<li>版本号：表示报文使用的 HTTP 协议版本；</li>
<li>状态码：一个三位数，用代码的形式表示处理的结果，比如 200 是成功，500 是服务器错误；</li>
<li>原因：作为数字状态码补充，是更详细的解释文字，帮助人理解原因。</li>
</ol>
<p><strong>头字段</strong></p>
<p><img src="https://pic.imgdb.cn/item/63d6755dface21e9ef18992a.png"></p>
<p>头部字段是 key-value 的形式，key 和 value 之间用“:”分隔，最后用 CRLF 换行表示字段结束。</p>
<p>HTTP 协议规定了非常多的头部字段，实现各种各样的功能，但基本上可以分为四大类：</p>
<ol>
<li>通用字段：在请求头和响应头里都可以出现；</li>
<li>请求字段：仅能出现在请求头里，进一步说明请求信息或者额外的附加条件；</li>
<li>响应字段：仅能出现在响应头里，补充说明响应报文的信息；</li>
<li>实体字段：它实际上属于通用字段，但专门描述 body 的额外信息。</li>
</ol>
<h1 id="七、Method"><a href="#七、Method" class="headerlink" title="七、Method"></a>七、Method</h1><p>Method表示一次请求执行的具体动作，比如是获取，更改，还是删除等。</p>
<p>目前 HTTP&#x2F;1.1 规定了八种方法。</p>
<ol>
<li>GET：获取资源，可以理解为读取或者下载数据；</li>
<li>HEAD：获取资源的元信息；</li>
<li>POST：向资源提交数据，相当于写入或上传数据；</li>
<li>PUT：类似 POST；</li>
<li>DELETE：删除资源；</li>
<li>CONNECT：建立特殊的连接隧道；</li>
<li>OPTIONS：列出可对资源实行的方法；</li>
<li>TRACE：追踪请求 - 响应的传输路径。</li>
</ol>
<p><strong>GET&#x2F;HEAD</strong></p>
<p>HEAD 方法与 GET 方法类似，也是请求从服务器获取资源，服务器的处理机制也是一样的，但服务器不会返回请求的实体数据，只会传回响应头，也就是资源的 <strong>元信息</strong>。</p>
<p>HEAD 方法可以看做是 GET 方法的一个“简化版”或者“轻量版”。因为它的响应头与 GET 完全相同，所以可以用在很多并不真正需要资源的场合，避免传输 body 数据的浪费。</p>
<p><strong>PUT&#x2F;POST</strong></p>
<p>PUT 的作用与 POST 类似，也可以向服务器提交数据，但与 POST 存在微妙的不同，通常 POST 表示的是<strong>“新建”“create”</strong>的含义，而 PUT 则是<strong>“修改”“update”</strong>的含义。</p>
<p>在实际应用中，PUT 用到的比较少。而且，因为它与 POST 的语义、功能太过近似，有的服务器甚至就直接禁止使用 PUT 方法，只用 POST 方法上传数据。</p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>在 HTTP 协议里，<strong>“安全”</strong> 是指请求方法不会“破坏”服务器上的资源，即不会对服务器上的资源造成实质的修改。</p>
<p>按照这个定义，只有 GET 和 HEAD 方法是“安全”的，因为它们是“只读”操作，只要服务器不故意曲解请求方法的处理方式，无论 GET 和 HEAD 操作多少次，服务器上的数据都是“安全的”。</p>
<p>而 POST&#x2F;PUT&#x2F;DELETE 操作会修改服务器上的资源，增加或删除数据，所以是“不安全”的。</p>
<h2 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h2><p><strong>“幂等”</strong> 实际上是一个数学用语，被借用到了 HTTP 协议里，意思是多次执行相同的操作，结果也都是相同的，即多次“幂”后结果“相等”。</p>
<p>很显然，GET 和 HEAD 既是安全的也是幂等的，DELETE 可以多次删除同一个资源，效果都是“资源不存在”，所以也是幂等的。</p>
<p>按照 RFC 里的语义，POST 是“新增或提交数据”，多次提交数据会创建多个资源，所以不是幂等的；而 PUT 是“替换或更新数据”，多次更新一个资源，资源还是会第一次更新的状态，所以是幂等的。</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6后续语法</title>
    <url>/2023/01/29/ES6%E5%90%8E%E7%BB%AD%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、变量："><a href="#一、变量：" class="headerlink" title="一、变量："></a>一、变量：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//let声明变量：</span></span><br><span class="line"><span class="number">1.</span>变量不可重复声明，</span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;jelly&#x27;</span> <span class="keyword">let</span> star = <span class="string">&#x27;gd&#x27;</span></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="number">2.</span>块级作用域，</span><br><span class="line"></span><br><span class="line">&#123; <span class="keyword">let</span> girl = <span class="string">&#x27;刘亦菲&#x27;</span> &#125;</span><br><span class="line">在大括号内的都属于作用域内</span><br><span class="line"><span class="number">3.</span>不存在变量提升</span><br><span class="line"><span class="number">4.</span>不影响作用域链</span><br><span class="line"><span class="keyword">const</span>声明常量：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = ‘学校’;一般习惯把常量全用大写字母</span><br><span class="line"><span class="number">1.</span>一定要赋初始值</span><br><span class="line"><span class="number">2.</span>一般常量使用大写（潜规则）</span><br><span class="line"><span class="number">3.</span>常量值不能修改</span><br><span class="line"><span class="number">4.</span>块级作用域</span><br><span class="line"><span class="number">5.</span>对数组和对象的元素修改，不算对常量的修改，不会报错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">变量的结构赋值：es6语序按照一定的模式从数组和对象中提取值，对变量进行赋值。</span><br><span class="line">被称为结构赋值</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的解构</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&quot;小沈阳&quot;</span>, <span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;宋小宝&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的解构</span></span><br><span class="line">  <span class="keyword">const</span> zhaob = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;赵本山&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&quot;no&quot;</span>,</span><br><span class="line">    <span class="attr">xiaopin</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会小品&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> &#123; name, age, xiaopin &#125; = zhaob;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xiaopin);</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="二、模版字符串-96-96-反引号"><a href="#二、模版字符串-96-96-反引号" class="headerlink" title="二、模版字符串&#96;&#96;(反引号)"></a>二、模版字符串&#96;&#96;(反引号)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`我也是一个字符串哦`</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;c&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt; </span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">//变量拼接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let name1 = &quot;jelly&quot;;</span></span><br><span class="line"><span class="string">let job = `</span>$&#123;name1&#125;是女神是刘亦菲<span class="string">`;</span></span><br><span class="line"><span class="string">console.log(job);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//<span class="subst">$&#123;&#125;</span>是变量拼接的固定格式</span></span><br></pre></td></tr></table></figure>



<h2 id="三、大括号里直接写入变量和函数"><a href="#三、大括号里直接写入变量和函数" class="headerlink" title="三、大括号里直接写入变量和函数"></a>三、大括号里直接写入变量和函数</h2><p>作为对象的属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name1 = <span class="string">&quot;jelly&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> job = <span class="string">`<span class="subst">$&#123;name1&#125;</span>是女神是刘亦菲`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(job);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> school = &#123;</span><br><span class="line">      name1,</span><br><span class="line">      job,</span><br><span class="line">      <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//当变量作为对象的属性时，不用再写成name1：name1，方法fun：fuction()&#123;&#125;也可以直接简写成fun()&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、箭头函数"><a href="#四、箭头函数" class="headerlink" title="四、箭头函数"></a>四、箭头函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">以前的函数为：<span class="keyword">let</span> fun = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;&#125;</span><br><span class="line">箭头函数则改为：<span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params">a,b</span>)=&gt;&#123;&#125;</span><br><span class="line"><span class="number">1.</span><span class="variable language_">this</span>是静态的，<span class="variable language_">this</span>始终指向函数声明时所在作用域下的<span class="variable language_">this</span>的值</span><br><span class="line"><span class="number">2.</span>不能作为构造函数实例化对象</span><br><span class="line"><span class="number">3.</span>不能使用<span class="variable language_">arguments</span>变量</span><br><span class="line"><span class="number">4.</span>箭头函数的简写</span><br><span class="line">（<span class="number">1</span>）当形参只有一个时候，可以省略小括号</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = a=&gt;&#123;&#125;</span><br><span class="line">(<span class="number">2</span>)当大括号内只有一句话的时候，大括号可以省略,而且语句执行结果就是函数的返回值</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = a=&gt; a+b</span><br><span class="line">(<span class="number">3</span>)箭头函数适合与<span class="variable language_">this</span>无关的回调，如定时器，数组方法的回调。不适合与<span class="variable language_">this</span>有关的回调，如事件回调，对象方法</span><br></pre></td></tr></table></figure>

<h2 id="五、函数参数赋初始值"><a href="#五、函数参数赋初始值" class="headerlink" title="五、函数参数赋初始值"></a>五、函数参数赋初始值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形参初始值，是具有默认值的参数，这种参数一般都在最后（潜规则）并且可以进行解构赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123; a, b, c = <span class="number">101</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="六、rest参数"><a href="#六、rest参数" class="headerlink" title="六、rest参数"></a>六、rest参数</h2><p>用来获取函数实参，形式是：…args，用来代替arguments,并且rest参数必须放到最后，当多个实参时候，…args会形成数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a, b, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h2 id="七、扩展运算符：…"><a href="#七、扩展运算符：…" class="headerlink" title="七、扩展运算符：…"></a>七、扩展运算符：…</h2><p>能将数组转化为逗号分隔的参数序列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun</span>(...arr);</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>扩展运算符的应用合并数组</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&quot;奇拉&quot;</span>, <span class="string">&quot;少卡&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&quot;舒克都&quot;</span>, <span class="string">&quot;放假&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>数组克隆</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&quot;奇拉&quot;</span>, <span class="string">&quot;少卡&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&quot;舒克都&quot;</span>, <span class="string">&quot;放假&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br></pre></td></tr></table></figure>

<h2 id="八、symbol"><a href="#八、symbol" class="headerlink" title="八、symbol"></a>八、symbol</h2><p>一种新的原始数据类型，表示独一无二的值，他的特点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>symbol的值是唯一的，用来解决命名冲突问题</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>symbol不能与其他值进行运算</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>symbol定义的对象属性不能用<span class="keyword">for</span>…<span class="keyword">in</span>遍历循环，单可以使用<span class="title class_">Reflect</span>.<span class="property">ownKeys</span>来获取所有对象的键名</span><br><span class="line"><span class="comment">//创建symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;速度快&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;速度快&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3);</span><br><span class="line"><span class="comment">//symbol.for创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;速度快&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;速度快&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s5);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5);</span><br><span class="line"></span><br><span class="line">symbol的使用：向对象中添加symbol类型的方法</span><br></pre></td></tr></table></figure>

<h2 id="九、迭代器"><a href="#九、迭代器" class="headerlink" title="九、迭代器"></a>九、迭代器</h2><p>是一种接口，为各种不同的数据提供统一的访问机制。任何数据结构只要部署了iterator接口，就可以完成遍历操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="title class_">ES6</span>创造了一种新的遍历命令：<span class="keyword">for</span>…<span class="keyword">of</span>循环，iterator接口主要提供<span class="keyword">for</span>…<span class="keyword">of</span>消费</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>原生具备iterator接口的数据(可用<span class="keyword">for</span>…<span class="keyword">of</span>遍历)</span><br><span class="line"></span><br><span class="line">a)<span class="title class_">Array</span></span><br><span class="line"></span><br><span class="line">b)<span class="title class_">Arguments</span></span><br><span class="line"></span><br><span class="line">c)<span class="title class_">Set</span></span><br><span class="line"></span><br><span class="line">d)<span class="title class_">Map</span></span><br><span class="line"></span><br><span class="line">e)<span class="title class_">String</span></span><br><span class="line"></span><br><span class="line">f)<span class="title class_">TypeArray</span></span><br><span class="line"></span><br><span class="line">g)<span class="title class_">NodeList</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>工作原理</span><br><span class="line"></span><br><span class="line">a)创建一个指针对象，指向当前数据的起始位置</span><br><span class="line"></span><br><span class="line">b)第一次调用对象的next方法，指针自动指向数据结构的第一个成员</span><br><span class="line"></span><br><span class="line">c)接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Uname</span> = [<span class="string">&quot;搜到&quot;</span>, <span class="string">&quot;的撒&quot;</span>, <span class="string">&quot;的风格&quot;</span>, <span class="string">&quot;范德萨&quot;</span>, <span class="string">&quot;公司发&quot;</span>, <span class="string">&quot;告诉对方&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> <span class="title class_">Uname</span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title class_">Uname</span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//false表示数组成员没遍历结束，true表示结束。</span></span><br></pre></td></tr></table></figure>

<h2 id="十、生成器"><a href="#十、生成器" class="headerlink" title="十、生成器"></a>十、生成器</h2><p>是es6提供的一种异步编程解决方案，是一个特殊的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">yield</span><span class="string">&#x27;一直没有耳朵&#x27;</span>;</span><br><span class="line">   <span class="keyword">yield</span><span class="string">&#x27;一直没有尾巴&#x27;</span>;</span><br><span class="line">   <span class="keyword">yield</span><span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tor = <span class="title function_">fun2</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>())</span><br><span class="line"></span><br><span class="line">生成器的函数参数：<span class="title function_">next</span>()方法在调用的时候可以传递实参的，</span><br><span class="line">第二个next传递的参数将作为第一个<span class="keyword">yield</span>整体的返回结果，后面的依次，</span><br><span class="line">第三个next传递的参数将作为第二个<span class="keyword">yield</span>的整体返回结果</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">fun2</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    <span class="keyword">let</span> A =  <span class="keyword">yield</span><span class="string">&#x27;一直没有耳朵&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(A)</span><br><span class="line">    <span class="keyword">let</span> B = <span class="keyword">yield</span><span class="string">&#x27;一直没有尾巴&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(B)</span><br><span class="line">    <span class="keyword">let</span> C = <span class="keyword">yield</span><span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(C)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tor = <span class="title function_">fun2</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>(<span class="string">&#x27;bbb&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>(<span class="string">&#x27;ccc&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tor.<span class="title function_">next</span>(<span class="string">&#x27;ddd&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">生成器的实例：模拟获取 用户数据 订单数据 商品数据，每隔一秒显示。</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span></span><br><span class="line">        <span class="comment">//调用next方法，并且把数据传入</span></span><br><span class="line">        iterator2.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrder</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span></span><br><span class="line">        iterator2.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFGoods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span></span><br><span class="line">        iterator2.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">yield</span> <span class="title function_">getUser</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Order</span> = <span class="keyword">yield</span> <span class="title function_">getOrder</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Order</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Goods</span> = <span class="keyword">yield</span> <span class="title function_">getFGoods</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Goods</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator2 = <span class="title function_">fun3</span>()</span><br><span class="line">iterator2.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h2 id="十一、Promise"><a href="#十一、Promise" class="headerlink" title="十一、Promise"></a>十一、Promise</h2><p>是es6引入的异步编程新的解决方案。用来封装异步操作并且可以获取其成功或者失败的结果,promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="string">&#x27;大奥古斯&#x27;</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;,<span class="number">4000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//promise有三个状态：</span></span><br><span class="line"><span class="number">1</span>、pending[待定]初始状态</span><br><span class="line"><span class="number">2</span>、fulfilled[实现]操作成功</span><br><span class="line"><span class="number">3</span>、rejected[被否决]操作失败</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>含有两个参数，resolve,reject。</span><br><span class="line">resolve作用是，将<span class="title class_">Promise</span>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），</span><br><span class="line">  在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</span><br><span class="line">reject作用是，将<span class="title class_">Promise</span>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），</span><br><span class="line">  在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</span><br><span class="line">当promise状态发生改变，就会触发<span class="title function_">then</span>()里的响应函数处理后续步骤；promise状态一经改变，不会再变。</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="string">&quot;大奥古斯&quot;</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">      &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//错误可以用catch进行抓取</span></span><br></pre></td></tr></table></figure>

<h2 id="十二、set"><a href="#十二、set" class="headerlink" title="十二、set"></a>十二、set</h2><p>ES6提供了新的数据结构set（集合），它类似于数组，但成员的值都是唯一的，集合实现了 iterator接口，所以可以使用扩展运算符和for of进行遍历，</p>
<p>集合的属性和方法：(1)size:返回集合的个数，(2)add:增加一个新元素，返回当前集合，(3)delete：删除元素，返回布尔值，(4)has：检测集合中是否包含某个元素，返回布尔值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//声明一个set</span></span><br><span class="line">    <span class="keyword">let</span> se = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> se2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;da&quot;</span>, <span class="string">&quot;xiao&quot;</span>, <span class="string">&quot;gao&quot;</span>, <span class="string">&quot;pang&quot;</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(se2);</span><br><span class="line">    <span class="comment">//添加新元素</span></span><br><span class="line">    se2.<span class="title function_">add</span>(<span class="string">&quot;xishi&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(se2);</span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line">    se2.<span class="title function_">delete</span>(<span class="string">&quot;gao&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(se2);</span><br><span class="line">    <span class="comment">//检测</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(se2.<span class="title function_">has</span>(<span class="string">&quot;da&quot;</span>));</span><br><span class="line">    <span class="comment">//清空</span></span><br><span class="line">    se2.<span class="title function_">clear</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(se2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">set</span>:<span class="title class_">ES6</span>提供了数据结构<span class="title class_">Map</span>，它类似于对象，也是键值对的集合。但键的范围不限于字符串，</span><br><span class="line">  各种类型的值（包括对象）都可以当做键。<span class="title class_">Map</span>也实现了iterator接口，</span><br><span class="line">    所以可以使用扩展运算符和<span class="keyword">for</span> <span class="keyword">of</span>进行遍历，</span><br><span class="line"></span><br><span class="line"><span class="title class_">Map</span>的属性和方法：(<span class="number">1</span>)<span class="attr">size</span>:返回<span class="title class_">Map</span>元素的个数，(<span class="number">2</span>)<span class="attr">set</span>:增加一个新元素，返回当前<span class="title class_">Map</span>，</span><br><span class="line">  (<span class="number">3</span>)get：返回键名对象的键值，(<span class="number">4</span>)has：检测<span class="title class_">Map</span>中是否包含某个元素，返回布尔值,</span><br><span class="line">  (<span class="number">5</span>)<span class="attr">clear</span>:清空集合，返回<span class="literal">undefined</span></span><br><span class="line"><span class="comment">//声明一个Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zmy&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11111</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line"><span class="attr">school</span>: <span class="string">&quot;ahgy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(key, <span class="string">&quot;mm&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="comment">//size</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);</span><br><span class="line"><span class="comment">//其中键值可以是字符串，也可以是对象</span></span><br></pre></td></tr></table></figure>

<h2 id="十三、class类"><a href="#十三、class类" class="headerlink" title="十三、class类"></a>十三、class类</h2><p>通过class，可以定义类。基本上es6中可以看作是一个语法糖，新的class写法只是让对象原型的写法更加清晰、更加面向对象编程的语法而已。</p>
<p>(1)class声明类，<br>(2)constructor定义构造函数初始化，当使用new 方法名()，就会执行constructor<br>(3)extends继承父类，<br>(4)super调用父级构造方法，<br>(5)static定义静态方法和属性，<br>(6)父类方法可以重写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span> &#123;</span><br><span class="line"><span class="comment">//构造方法，名字不能修改</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">price, name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法必须使用该语法，不能使用es5对象完整形式call：function&#123;&#125;</span></span><br><span class="line"><span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> oneplus = <span class="keyword">new</span> <span class="title function_">phone</span>(<span class="number">2000</span>, <span class="string">&quot;华为&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oneplus );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//class静态成员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> num = <span class="number">123</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">price, name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">calll</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">smallcall</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">price, name, color, size</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(price, name) <span class="comment">//调用父类的constructor方法</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mi = <span class="keyword">new</span> <span class="title function_">smallcall</span>(<span class="number">133</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="number">4.7</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mi);</span><br></pre></td></tr></table></figure>



<h2 id="十四、数值扩展"><a href="#十四、数值扩展" class="headerlink" title="十四、数值扩展"></a>十四、数值扩展</h2><h3 id="1-Number-EPSILON-是JavaScript表示的最小精度-2-Number-isNaN-检测一个值是否为NaN-3-Number-isInteger-判断一个数是否为整数-4-Math-trunc-将数字的小数部分抹掉"><a href="#1-Number-EPSILON-是JavaScript表示的最小精度-2-Number-isNaN-检测一个值是否为NaN-3-Number-isInteger-判断一个数是否为整数-4-Math-trunc-将数字的小数部分抹掉" class="headerlink" title="1.Number.EPSILON:是JavaScript表示的最小精度  2.Number.isNaN:检测一个值是否为NaN  3.Number.isInteger:判断一个数是否为整数  4.Math.trunc:将数字的小数部分抹掉"></a>1.Number.EPSILON:是JavaScript表示的最小精度  2.Number.isNaN:检测一个值是否为NaN  3.Number.isInteger:判断一个数是否为整数  4.Math.trunc:将数字的小数部分抹掉</h3><h2 id="十五、对象方法扩展"><a href="#十五、对象方法扩展" class="headerlink" title="十五、对象方法扩展"></a>十五、对象方法扩展</h2><h3 id="1-Object-is-判断两个值是否相等-2-Object-assign-对象的合并-3-Object-setPrototypeOf-设置原型对象"><a href="#1-Object-is-判断两个值是否相等-2-Object-assign-对象的合并-3-Object-setPrototypeOf-设置原型对象" class="headerlink" title="1.Object.is:判断两个值是否相等 2.Object.assign:对象的合并 3.Object.setPrototypeOf:设置原型对象"></a>1.Object.is:判断两个值是否相等 2.Object.assign:对象的合并 3.Object.setPrototypeOf:设置原型对象</h3><h2 id="十六、闭包"><a href="#十六、闭包" class="headerlink" title="十六、闭包"></a>十六、闭包</h2><ol>
<li>闭包是什么：闭包是一个函数（一个作用域可以访问另外一个函数的局部变量）。</li>
<li>闭包的作用是什么：延伸变量的作用范围。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">let</span> name = <span class="string">&#x27;The Window&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> object = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">        <span class="title function_">getNameFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> f = object.<span class="title function_">getNameFunc</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()) <span class="comment">//The Window</span></span><br><span class="line">产生了闭包：因为 <span class="variable language_">this</span> 在函数内部被赋值给了 that，指向的是 object 这个对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> name = <span class="string">&#x27;The Window&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> object = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">        <span class="title function_">getNameFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> that.<span class="property">name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> f = object.<span class="title function_">getNameFunc</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()) <span class="comment">//My Object</span></span><br></pre></td></tr></table></figure>

<h2 id="十七、Es6模块化"><a href="#十七、Es6模块化" class="headerlink" title="十七、Es6模块化"></a>十七、Es6模块化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>分别暴露：就是在每个需要暴露的变量前加<span class="keyword">export</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">let</span> mi = <span class="string">&#x27;xiaomi&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>统一暴露</span><br><span class="line"><span class="keyword">let</span> mi = <span class="string">&#x27;xiaomi&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;mi,name&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>默认暴露</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">mi</span>:<span class="string">&#x27;xiaomi&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="keyword">function</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">引入模块</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>通用导入模块：<span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> ‘/xx.<span class="property">js</span>’,其中用<span class="keyword">as</span>定义别名为m。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>解构赋值：<span class="keyword">import</span> &#123;a,b <span class="keyword">as</span> c&#125; <span class="keyword">from</span> ‘/xx.<span class="property">js</span>’ 如果多个引入的值中有重复的会报错，可以用<span class="keyword">as</span>如把b的值换成c，在默认暴露<span class="keyword">default</span>的引入中：<span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> s2&#125;，不能使用<span class="keyword">default</span>，需要用<span class="keyword">as</span>把<span class="keyword">default</span>重定义一个值s2</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>只有默认暴露可以使用简便的方法：<span class="keyword">import</span> m <span class="keyword">from</span> ‘/xx.<span class="property">js</span>’</span><br></pre></td></tr></table></figure>

<h2 id="十八、ES7部分特性"><a href="#十八、ES7部分特性" class="headerlink" title="十八、ES7部分特性"></a>十八、ES7部分特性</h2><h3 id="1-includes：检测数组中是否包含某个元素，返回值是布尔值"><a href="#1-includes：检测数组中是否包含某个元素，返回值是布尔值" class="headerlink" title="1.includes：检测数组中是否包含某个元素，返回值是布尔值"></a>1.includes：检测数组中是否包含某个元素，返回值是布尔值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;米&#x27;</span>, <span class="string">&#x27;jaj&#x27;</span>, <span class="string">&#x27;midq&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">includes</span>(<span class="string">&#x27;jaj&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-指数操作符：-console-log-2-5-x2F-x2F-32"><a href="#2-指数操作符：-console-log-2-5-x2F-x2F-32" class="headerlink" title="2.指数操作符：**   console.log(2**5) &#x2F;&#x2F;32"></a>2.指数操作符：**   console.log(2**5) &#x2F;&#x2F;32</h3><h2 id="十九、async和await"><a href="#十九、async和await" class="headerlink" title="十九、async和await"></a>十九、async和await</h2><p>async用于申明function异步，await用于等待一个异步方法执行完成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">async</span>函数返回一个 <span class="title class_">Promise</span> 对象</span><br><span class="line"><span class="comment">//一个普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;syy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getData</span>())  <span class="comment">//syy</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//加上async后</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;syy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getData</span>());  <span class="comment">//Promise &#123;&lt;resolved&gt;: &quot;syy&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="keyword">async</span>函数内部<span class="keyword">return</span>语句返回的值，会成为then方法回调函数的参数</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;syy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)  <span class="comment">//syy</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">3</span>、<span class="keyword">async</span>函数内部抛出错误，会导致返回的 <span class="title class_">Promise</span> 对象变为reject状态，抛出的错误对象会被<span class="keyword">catch</span>方法回调函数接收到</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v),</span><br><span class="line">    <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e)   <span class="comment">//Error: 出错了</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">await</span>:<span class="number">1.</span><span class="keyword">await</span>必须放在<span class="keyword">async</span>中。</span><br><span class="line"><span class="number">2.</span><span class="keyword">await</span>右侧一般都是promise对象。</span><br><span class="line"><span class="number">3.</span><span class="keyword">await</span>一般返回的都是promise成功过的值</span><br><span class="line"><span class="number">4.</span><span class="keyword">await</span>的promise失败了，会抛出异常需要<span class="keyword">try</span>-<span class="keyword">catch</span>进行捕获</span><br><span class="line"></span><br><span class="line">正常情况下，<span class="keyword">await</span>命令后面是一个<span class="title class_">Promise</span>对象。如果不是，会被转成一个立即resolve的<span class="title class_">Promise</span>对象。</span><br><span class="line"> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> name = <span class="string">&quot;syy&quot;</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(name)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">await</span> <span class="title function_">getData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">//syy</span></span><br></pre></td></tr></table></figure>



<h2 id="二十、ES8对象方法的扩展"><a href="#二十、ES8对象方法的扩展" class="headerlink" title="二十、ES8对象方法的扩展"></a>二十、ES8对象方法的扩展</h2><p>Object.values():返回一个给定对象所有可枚举属性值的数组</p>
<p>Object.entries():返回一个给定对象自身可遍历属性[key,value]的数组，方便map()方法遍历</p>
<p>对象的扩展运算符</p>
<p>对象的解构赋值用于从一个对象取值，相当于将所有哦可遍历的、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br><span class="line">对象扩展方法</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>():将二维数组转换为对象。和<span class="title class_">Object</span>.<span class="title function_">entries</span>()是将对象转换成二维数组。正好相反</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">字符串扩展方法：trimStart，trimEnd</span><br><span class="line"></span><br><span class="line">在es5中<span class="title function_">trim</span>()方法用来清除字符串两端的空格。所以在es10中引入trimStart清除左边空白，trimEnd</span><br><span class="line">清除右边的空白</span><br><span class="line"><span class="keyword">let</span> arr14 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr14.<span class="title function_">flat</span>())</span><br></pre></td></tr></table></figure>

<h2 id="二一、ES10数组扩展方法flat"><a href="#二一、ES10数组扩展方法flat" class="headerlink" title="二一、ES10数组扩展方法flat"></a>二一、ES10数组扩展方法flat</h2><p>将多维数组转换为低维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr14 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr14.<span class="title function_">flat</span>())</span><br></pre></td></tr></table></figure>

<h2 id="二二、私有属性"><a href="#二二、私有属性" class="headerlink" title="二二、私有属性"></a>二二、私有属性</h2><p>私有属性用#进行标识，私有属性无法在外部使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    name;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    #age;</span><br><span class="line">    #weight;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,weight</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.#age = age</span><br><span class="line">        <span class="variable language_">this</span>.#weight = weight</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">con</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lisa&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;45g&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl)</span><br><span class="line">girl.<span class="title function_">con</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2023/01/29/JavaScript/</url>
    <content><![CDATA[<h2 id="一、JavaScript的组成"><a href="#一、JavaScript的组成" class="headerlink" title="一、JavaScript的组成"></a>一、JavaScript的组成</h2><p><img src="https://pic.imgdb.cn/item/63d67236face21e9ef119c8b.png"></p>
<span id="more"></span>

<h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><p>声明变量&#x3D;&gt;赋值变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;jelly&#x27;</span></span><br><span class="line"><span class="comment">/*var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。</span></span><br><span class="line"><span class="comment">使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</span></span><br><span class="line"><span class="comment">name是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间*/</span></span><br><span class="line">name = <span class="string">&#x27;gd&#x27;</span>;   <span class="comment">// 最后的结果就是gd因为jelly被覆盖掉了     </span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>,  name = <span class="string">&#x27;zs&#x27;</span>, sex = <span class="number">2</span>;<span class="comment">//连续声明变量</span></span><br></pre></td></tr></table></figure>



<h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>js常用的基本数据类型包括undefined、null、number、boolean、string；</p>
<p>js的引用数据类型也就是对象类型Object，比如：Object、array、function、data等；</p>
<h2 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h2><p>JavaScript中常用的运算符有： 算数运算符 递增和递减运算符 比较运算符 逻辑运算符 赋值运算符</p>
<p><img src="https://pic.imgdb.cn/item/63d6725cface21e9ef11e3f9.png"></p>
<h3 id="（1）浮点数精度问题（0-1-0-2-x3D-0-3）"><a href="#（1）浮点数精度问题（0-1-0-2-x3D-0-3）" class="headerlink" title="（1）浮点数精度问题（0.1+0.2!&#x3D;0.3）"></a>（1）浮点数精度问题（0.1+0.2!&#x3D;0.3）<img src="https://pic.imgdb.cn/item/63d6726aface21e9ef11fee0.png"></h3><h3 id="（2）递增与递减"><a href="#（2）递增与递减" class="headerlink" title="（2）递增与递减"></a>（2）递增与递减</h3><p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。在 JavaScript 中，递增（++）和递减（ – ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。注意：递增和递减运算符必须和变量配合使用。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count=<span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>（count++）;<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>（count--）;</span><br><span class="line"><span class="comment">//前置递增</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>（++count+<span class="number">10</span>）<span class="comment">//12;</span></span><br></pre></td></tr></table></figure>



<h3 id="（3）比较运算符"><a href="#（3）比较运算符" class="headerlink" title="（3）比较运算符"></a>（3）比较运算符</h3><p><img src="https://pic.imgdb.cn/item/63d6727dface21e9ef1228ae.png"></p>
<h3 id="（4）逻辑运算符"><a href="#（4）逻辑运算符" class="headerlink" title="（4）逻辑运算符"></a>（4）逻辑运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span> ,b=<span class="number">1</span>,c=<span class="number">5</span></span><br><span class="line">a&gt;b&amp;&amp;c=<span class="literal">true</span> <span class="comment">//两者都才成立</span></span><br><span class="line">c&gt;a&amp;&amp;b=<span class="literal">false</span> </span><br><span class="line">c&gt;a||b=<span class="literal">true</span> <span class="comment">// 两者中有一者符合就成立</span></span><br><span class="line">a&lt;<span class="number">10</span>=!<span class="literal">true</span> <span class="comment">// false=!true 取反</span></span><br></pre></td></tr></table></figure>

<h3 id="（5）运算符优先级"><a href="#（5）运算符优先级" class="headerlink" title="（5）运算符优先级"></a>（5）运算符优先级</h3><p><img src="https://pic.imgdb.cn/item/63d6728fface21e9ef124e91.png"></p>
<h2 id="五、流程控制"><a href="#五、流程控制" class="headerlink" title="五、流程控制"></a>五、流程控制</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span> , b=<span class="number">5</span> ,c=<span class="number">1</span></span><br><span class="line"><span class="comment">//if语句</span></span><br><span class="line"><span class="keyword">if</span>(a&gt;b+c)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="property">log</span>（<span class="string">&#x27;yes&#x27;</span>）;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="property">log</span>（<span class="string">&#x27;no&#x27;</span>）;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//yes,10&gt;5+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//switch语句</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入分数:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;宝贝，你是我的骄傲&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;宝贝，你已经很出色了&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;你要继续加油喽&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;孩子，你很危险&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;熊孩子，我不想和你说话，我只想用鞭子和你说话&#x27;</span>)</span><br><span class="line">  <span class="comment">//input:85;宝贝，你已经很出色了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//三元表达式</span></span><br><span class="line"><span class="keyword">var</span> res=a&gt;<span class="number">11</span>?:<span class="string">&#x27;yes&#x27;</span>:<span class="string">&#x27;no&#x27;</span></span><br><span class="line">  <span class="comment">//a&lt;11,no</span></span><br></pre></td></tr></table></figure>

<h2 id="六、数组"><a href="#六、数组" class="headerlink" title="六、数组"></a>六、数组</h2><p>数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通变量一次只能存储一个值</span></span><br><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>; </span><br><span class="line"><span class="comment">// 数组一次可以存储多个值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="title class_">Array</span>() ; <span class="comment">// 字面量创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();   <span class="comment">// 创建一个新的空数组</span></span><br><span class="line"><span class="comment">//数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="string">&#x27;小白&#x27;</span>,<span class="number">12</span>,<span class="literal">true</span>,<span class="number">28.9</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的索引</span></span><br><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素</span></span><br><span class="line"><span class="title function_">alert</span>(arrStus[<span class="number">1</span>]);  </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]) <span class="comment">// green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]) <span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for遍历数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;  <span class="comment">//使用“数组名.length”可以访问数组元素的数量（数组长度）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrStus[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历计算</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">average = sum / arr.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这组数的和是：&#x27;</span> + sum);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这组数的平均值是：&#x27;</span> + average);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的属性</span></span><br><span class="line"><span class="comment">/*数组是对象的一种，每次的位置都是从0开始。也就是索引号</span></span><br><span class="line"><span class="comment">数组属性，length会显示数组的长度</span></span><br><span class="line"><span class="comment">（1）：增删数组：pop，unshift，shift，push</span></span><br><span class="line"><span class="comment">unshift：在数组的最前面增加一个或多个值，返回的值是新的数组长度</span></span><br><span class="line"><span class="comment">shift：删除数组最前面的，返回的值是被删除的哪一个</span></span><br><span class="line"><span class="comment">pop：删除最后一个，返回的值是被删除的哪一个</span></span><br><span class="line"><span class="comment">push：在数组的最后面增加一个或多个值，返回的值是新的数组长度</span></span><br><span class="line"><span class="comment">（2）indexOf：查找值在数组的某一位置，返回的值是length（长度），如果没有此值则返回-1.</span></span><br><span class="line"><span class="comment">lastindexOf：如果此数组里有重复值，就可以用这个属性。查到元素在数组里面最后一次出现的位置</span></span><br><span class="line"><span class="comment">（3）slice（start，end）start开始位置，end结束位置，start含有此位置的元素，end不含此位置的元素。返回的值是最新数组</span></span><br><span class="line"><span class="comment">（4）splice（start，end，需要在此中间删除的元素），返回的值是最新数组</span></span><br><span class="line"><span class="comment">（5）reverse：将数组内容反转输出，如：var a=[1,2,3,4]; var b=a.reverse(); //结果4321 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">64</span>, <span class="number">9</span>, <span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;      <span class="comment">// 降a序</span></span><br><span class="line">    <span class="comment">// return a - b;   // 升序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组转字符串</span></span><br><span class="line">toString（）</span><br><span class="line">join（）</span><br></pre></td></tr></table></figure>

<h3 id="数组的遍历方法：（12种）"><a href="#数组的遍历方法：（12种）" class="headerlink" title="数组的遍历方法：（12种）"></a>数组的遍历方法：（12种）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>;i++  )&#123;</span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>forEach循环</span><br><span class="line"> arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//代码</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">/*forEach接收一个回调函数作为参数,而这个回调函数有接受三个参数,作为参数。</span></span><br><span class="line"><span class="comment">item是每个元素,index元素在数组中的下标,arr数组本身。没有返回值！*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>map循环 (<span class="title class_">React</span>循环渲染用map)</span><br><span class="line"><span class="keyword">var</span> brr= arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//代码</span></span><br><span class="line">        <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">/*map的用法和forEach差不多。但是map是有返回值的。他的返回值是一个新数组</span></span><br><span class="line"><span class="comment">    arr----&gt;[1,2,3]</span></span><br><span class="line"><span class="comment">    brr----&gt;[2,4,6]*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="keyword">for</span>–<span class="keyword">of</span></span><br><span class="line"><span class="comment">//对象不能遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line">        <span class="comment">//代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>filter</span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="string">&quot;50&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span>;</span><br><span class="line">        <span class="comment">//返回值是 arr本身，所以元素的name都为true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">age</span>&gt;<span class="number">30</span>;</span><br><span class="line">        <span class="comment">//[&#123;name:&quot;李四&quot;,age:&quot;50&quot;&#125;]</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//接受一个回调函数作为参数,返回值是一个新数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>every遍历</span><br><span class="line"><span class="comment">//every()是对数组中的每一项运行给定函数，如果该函数对每一项返回true,则返回true。(全部符合条件)</span></span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">50</span>,<span class="number">6</span>,<span class="number">70</span>,<span class="number">80</span>];</span><br><span class="line">    arr.<span class="title function_">every</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">50</span>; <span class="comment">//每一项数据都要大于50</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//false   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>some遍历</span><br><span class="line"><span class="comment">//some()是对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。(只要有一个符合)</span></span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">50</span>,<span class="number">6</span>,<span class="number">70</span>,<span class="number">80</span>];</span><br><span class="line">    arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">50</span>; <span class="comment">//只要有一项数据都要大于50</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>reduce （累加器）</span><br><span class="line"><span class="comment">///reduce()方法接收一个函数作为累加器,数组中每个值(从左往右)开始缩减,最重为一个值</span></span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;<span class="comment">//6   </span></span><br><span class="line">    &#125;)</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue,currentValue,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reduce还有第二个参数，我们可以把这个参数作为第一次调用callback时的第一个参数，上面这个例子因为没有第二个参数，所以直接从数组的第二项开始，如果我们给了第二个参数为5</span></span><br><span class="line">     [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue,currentValue,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">    &#125;,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6, 8 ,11</span></span><br><span class="line">    <span class="comment">//第一次调用的previousValue的值就用传入的第二个参数代替，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>reduceRight</span><br><span class="line"><span class="comment">/*reduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加。</span></span><br><span class="line"><span class="comment">    reduceRight()首次调用回调函数callbackfn时，prevValue 和 curValue 可以是两个值之一。</span></span><br><span class="line"><span class="comment">    如果调用 reduceRight() 时提供了 initialValue 参数，则 prevValue 等于 initialValue，curValue 等于数组中的最后一个值。</span></span><br><span class="line"><span class="comment">    如果没有提供 initialValue 参数，则 prevValue 等于数组最后一个值， curValue 等于数组中倒数第二个值。*/</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    arr.<span class="title function_">reduceRight</span>(<span class="keyword">function</span> (<span class="params">preValue,curValue,index,array</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> preValue + curValue;</span><br><span class="line">    &#125;); <span class="comment">// 10</span></span><br><span class="line">    <span class="number">7</span> = <span class="number">4</span> + <span class="number">3</span>   第一次</span><br><span class="line">    <span class="number">9</span> = <span class="number">2</span> + <span class="number">7</span>   第二次</span><br><span class="line">   <span class="number">10</span> = <span class="number">9</span> + <span class="number">1</span>   第三次</span><br><span class="line">   <span class="number">10</span> = <span class="number">10</span> + <span class="number">0</span>  第四次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>find</span><br><span class="line"> <span class="comment">//find()方法返回数组中符合测试函数条件的第一个元素。否则返回undefined </span></span><br><span class="line">    <span class="keyword">const</span> stu = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getStu</span>(<span class="params">element</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="property">name</span> == <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stu.<span class="title function_">find</span>(getStu)</span><br><span class="line">    <span class="comment">//返回结果为</span></span><br><span class="line">    <span class="comment">//&#123;name: &quot;李四&quot;, gender: &quot;女&quot;, age: 22&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>findIndex</span><br><span class="line"><span class="comment">/*对于数组中的每个元素，findIndex 方法都会调用一次回调函数（采用升序索引顺序），直到有元素返回 true。</span></span><br><span class="line"><span class="comment">只要有一个元素返回 true，findIndex 立即返回该返回 true 的元素的索引值。</span></span><br><span class="line"><span class="comment">如果数组中没有任何元素返回 true，则 findIndex 返回 -1。findIndex 不会改变数组对象!!!!!*/</span></span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">x</span>) &#123; x == <span class="number">2</span>; &#125;);</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">findIndex</span>(<span class="function"><span class="params">x</span> =&gt;</span> x == <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>keys,values,entries</span><br><span class="line"><span class="comment">/*ES6 提供三个新的方法 —— entries()，keys()和values() —— 用于遍历数组。它们都返回一个遍历器对象，</span></span><br><span class="line"><span class="comment">可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，</span></span><br><span class="line"><span class="comment">entries()是对键值对的遍历*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">keys</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">values</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、字符串"><a href="#七、字符串" class="headerlink" title="七、字符串"></a>七、字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.charAt(index) 返回指定索引位置的字符，（index）表示字符串中某个位置的数字，字符在该字符串中的下标，</span></span><br><span class="line"><span class="comment">//若index超出字符串的length，.charAt（）返回空。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">1</span>));    <span class="comment">//输出字符串中第二个位置的字符，结果为 b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">9</span>));    <span class="comment">//选定位置超出字符串的长度，结果为 空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.charCodeAt(index)返回指定索引位置字符的Unicode编码。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)); <span class="comment">// 97</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.fromCharCode(num) 返回的是ASCII码对应的值，num可以是一个或多个ASCII码值，多个用逗号分割。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>));    <span class="comment">//结果为 abc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.concat(str) 连接两个或多个字符串，返回连接后的字符串。</span></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">&#x27;hello&#x27;</span>;<span class="keyword">var</span> str2=<span class="string">&#x27; world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(str1.<span class="title function_">concat</span>(str2)); <span class="comment">// 返回拼接后的hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.indexOf(str) 返回指定字符串第一次出现的位置，若没有则返回-1。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;hello world,hello moee&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>)); <span class="comment">//返回第一次出现的o对应的位置 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;s&#x27;</span>)); <span class="comment">//若未出现返回 -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.lastIndexOf(str) 返回指定字符串最后一次出现的位置，没有返回-1</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;hello world,hello moee&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;o&#x27;</span>)); <span class="comment">//19</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;s&#x27;</span>)); <span class="comment">//若未出现返回 -1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.match() 找到一个或多个正则表达式的匹配，没有返回null。正则是全局匹配则返回匹配到的所有字符串组成的数组；</span></span><br><span class="line"><span class="comment">//诺正则并非是全局匹配，因此返回的数组里只匹配到一个，它位于数组的第1项，数组的第2项是匹配到的内容位于字符串起始位置，</span></span><br><span class="line"><span class="comment">//第3项是原始字符串内容，第4项groups一个捕获组数组 或 undefined（如果没有定义命名捕获组）。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1 week 1 2 abcd 3 1 2&quot;</span>; <span class="comment">//match方法返回值为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">//[&quot;1&quot;, index: 0, input: &quot;1 week 1 2 abcd 3 1 2&quot;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[0-9]/g</span>)); <span class="comment">//[&quot;1&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;1&quot;, &quot;2&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.replace() 替换与正则表达式匹配的子串（默认只替换第一个匹配的子串，加g可以替换所有匹配的子串）。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1 week 1 2 abcd 3 1 2 week&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/week/</span>,<span class="string">&#x27;month&#x27;</span>)) <span class="comment">//返回 &quot;1 month 1 2 abcd 3 1 2 week&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/week\g/</span>,<span class="string">&#x27;month&#x27;</span>)) <span class="comment">//返回 &quot;1 week 1 2 abcd 3 1 2 week&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.search() 返回与正则表达式匹配的子串的起始位置，没有返回-1。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1 week 1 2 abcd 3 1 2 week&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="regexp">/week/</span>)) <span class="comment">//返回 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.slice(num1,num2) 返回指定开始位置（包括开始位置，若为负数则从末尾处开始计算起始位置，即-1表示倒数第一个）到指定结束位置（不包括结束位置，若未指定此参数，则包括从指定的开始位置开始到字符串结尾的所有字符）的字符串。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">4</span>,<span class="number">9</span>)) <span class="comment">//返回 &quot;o wor&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//返回 &quot;hello world&quot; 不改变原字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.split()将字符串分割为子字符串数组（第二个参数可指定返回的数组的最大长度，可选）</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)) <span class="comment">//返回  [&quot;hello&quot;, &quot;world&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//返回 &quot;hello world&quot; 不改变原字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.substr(index,length) 提取从指定index（索引，必需，若为负数则从末尾处开始计算起始位置，即-1表示倒数第一个）开始的length（长度，可选，若未指定此参数，则包括从指定的index开始到字符串结尾的所有字符）个字符。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">4</span>)) <span class="comment">//返回 &quot;llo &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//返回 &quot;hello world&quot; 不改变原字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.substring(num1,num2) 提取指定开始位置（包括开始位置）到结束位置（不包括结束位置，可选，若未指定此参数，则包括从指定的开始位置开始到字符串结尾的所有字符）的字符。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">4</span>)) <span class="comment">//返回 &quot;ll&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>)) <span class="comment">//返回 &quot;llo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//返回 &quot;hello world&quot; 不改变原字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.toLowerCase() 将字符串转换为小写。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>()) <span class="comment">//返回 &quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.toUpperCase() 将字符串转换为大写。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>()) <span class="comment">//返回 &quot;HELLO WORLD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.trim() 可以去除字符串头尾空格。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;        Hello World    &quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>()) <span class="comment">// 返回 &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。函数：就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*function 是声明函数的关键字,必须小写</span></span><br><span class="line"><span class="comment">由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   计算1-100之间值的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> sumNum = <span class="number">0</span>;<span class="comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sumNum += i;<span class="comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">alert</span>(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">getSum</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..) &#123; <span class="comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">6</span>, <span class="number">5</span>); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名（）&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br><span class="line"> <span class="comment">/*在使用 return 语句时，函数会停止执行，并返回指定的值</span></span><br><span class="line"><span class="comment"> 如果函数没有 return ，返回的值是 undefined*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> sum（）&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">666</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sum</span>();      <span class="comment">// 此时 sum 的值就等于666，因为 return 语句会把自身后面的值返回给调用者 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 终止函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1，num2</span>)&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// 注意：return 后的代码不执行</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我不会被执行，因为前面有 return&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = <span class="title function_">add</span>(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line"><span class="title function_">alert</span>(resNum);          <span class="comment">// 27</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数都是有返回值的，返回最后一个值</span></span><br><span class="line"><span class="comment">如果有return 则返回 return 后面的值</span></span><br><span class="line"><span class="comment">如果没有return 则返回 undefined */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*break ：结束当前的循环体（如 for、while）</span></span><br><span class="line"><span class="comment">continue ：跳出本次循环，继续执行下次循环（如 for、while）</span></span><br><span class="line"><span class="comment">return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用另一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">  <span class="title function_">fn2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<h2 id="九、作用域"><a href="#九、作用域" class="headerlink" title="九、作用域"></a>九、作用域</h2><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<p>JavaScript（es6前）中的作用域有两种：全局作用域局部作用域（函数作用域）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//块级作用域有&#123;&#125;包裹</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  int num = <span class="number">123</span>;</span><br><span class="line">  system.<span class="property">out</span>.<span class="title function_">print</span>(num);  <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.<span class="property">out</span>.<span class="title function_">print</span>(num);    <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>( num );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="title function_">f1</span>();<span class="comment">//123</span></span><br><span class="line"><span class="comment">//作用域链：采取就近原则的方式来查找变量最终的值。</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/63d672acface21e9ef128a81.png"></p>
<h2 id="十、预解析"><a href="#十、预解析" class="headerlink" title="十、预解析"></a>十、预解析</h2><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。代码执行： 从上到下执行JS语句。预解析只会发生在通过 var 定义的变量和 function 上。学习预解析能够让我们知道为什么在变量声明之前访问变量的值是 undefined，为什么在函数声明之前就可以调用函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;      <span class="comment">// 10</span></span><br><span class="line">预解析也叫做变量、函数提升。</span><br><span class="line">变量提升： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数提升</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</span><br></pre></td></tr></table></figure>



<h2 id="十一、对象"><a href="#十一、对象" class="headerlink" title="十一、对象"></a>十一、对象</h2><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。对象是由属性和方法组成的。属性：事物的特征，在对象中用属性来表示（常用名词）方法：事物的行为，在对象中用方法来表示（常用动词）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star.<span class="property">name</span>)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line">star.<span class="title function_">sayHi</span>();              <span class="comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用newObject创建对象</span></span><br><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> <span class="title class_">Obect</span>();</span><br><span class="line">andy.<span class="property">name</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">andy.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">andy.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">andy.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用构造函数创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;我的名字叫：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;，年龄：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27;，性别：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">sex</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bigbai = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;大白&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> smallbai = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小白&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigbai.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(smallbai.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历对象属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十二、内置对象"><a href="#十二、内置对象" class="headerlink" title="十二、内置对象"></a>十二、内置对象</h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN&#x2F;W3C来查询。Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。MDN:   <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>		 <span class="comment">// 圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() 	 <span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()            <span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()           <span class="comment">// 四舍五入版 就近取整   注意 -3.5   结果是  -3 </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>()		 <span class="comment">// 绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>()	 <span class="comment">// 求最大和最小值 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//随机数方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Date时间 （建议使用第三方包 moment.js/day.js）</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组对象</span></span><br><span class="line"> <span class="keyword">instanceof</span> 运算符，可以判断一个对象是否属于某种类型</span><br><span class="line"> <span class="title class_">Array</span>.<span class="title function_">isArray</span>()用于判断一个对象是否为数组，<span class="title function_">isArray</span>() 是 <span class="title class_">HTML5</span> 中提供的方法	 </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/63d672beface21e9ef12ad10.png"></p>
<h2 id="十三、简单型与复杂性数据"><a href="#十三、简单型与复杂性数据" class="headerlink" title="十三、简单型与复杂性数据"></a>十三、简单型与复杂性数据</h2><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。 值类型：简单数据类型&#x2F;基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型string ，number，boolean，undefined，null 引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型 通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单型</span></span><br><span class="line"><span class="comment">//函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，</span></span><br><span class="line"><span class="comment">//其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，</span></span><br><span class="line"><span class="comment">//都不会影响到的外部变量。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fn</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)；</span><br><span class="line"></span><br><span class="line"><span class="comment">//复杂型</span></span><br><span class="line"><span class="comment">//函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，</span></span><br><span class="line"><span class="comment">//其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，</span></span><br><span class="line"><span class="comment">//所以操作的是同一个对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">    x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 1. 这个输出什么 ?   </span></span><br><span class="line"><span class="title function_">f1</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 4. 这个输出什么 ?  </span></span><br></pre></td></tr></table></figure>



<h2 id="十四、Dom"><a href="#十四、Dom" class="headerlink" title="十四、Dom"></a>十四、Dom</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 getElementById() 方法可以获取带有 ID 的元素对象。</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以获取某个元素(父元素)内部所有指定标签名的子元素.</span></span><br><span class="line">element.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 HTML5 新增的方法获取</span></span><br><span class="line"><span class="number">1.</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(‘类名’)；<span class="comment">// 根据类名返回元素对象集合</span></span><br><span class="line"><span class="number">2.</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>);        <span class="comment">// 根据指定选择器返回第一个元素对象</span></span><br><span class="line"><span class="number">3.</span> <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>);     <span class="comment">// 根据指定选择器返回</span></span><br><span class="line"></span><br><span class="line"> doucumnet.<span class="property">body</span>  <span class="comment">// 返回body元素对象</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">documentElement</span>  <span class="comment">// 返回html元素对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按钮点击事件</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;你好吗&#x27;</span>);  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变元素内容</span></span><br><span class="line">element.<span class="property">innerText</span></span><br><span class="line">element.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用 DOM 可以操作如下表单元素的属性：</span></span><br><span class="line">type、value、checked、selected、disabled</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过 JS 修改元素的大小、颜色、位置等样式。</span></span><br><span class="line"><span class="number">1.</span> element.<span class="property">style</span>     行内样式操作</span><br><span class="line"><span class="number">2.</span> element.<span class="property">className</span> 类名样式操作</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/63d672cdface21e9ef12d231.png"></p>
<p>Dom核心</p>
<p>关于dom操作，主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">write</span></span><br><span class="line">innerHTML</span><br><span class="line">createElement</span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="number">1.</span> appendChild</span><br><span class="line"><span class="number">2.</span> insertBefore</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="number">1.</span> removeChild</span><br><span class="line"></span><br><span class="line"><span class="comment">//改  主要修改dom的元素属性，dom元素的内容、属性, 表单的值等</span></span><br><span class="line">修改元素属性： src、href、title等</span><br><span class="line">修改普通元素内容： innerHTML 、innerText</span><br><span class="line">修改表单元素： value、type、disabled等</span><br><span class="line">修改元素样式： style、className</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="variable constant_">DOM</span>提供的<span class="variable constant_">API</span> 方法：  getElementById、getElementsByTagName  古老用法 不太推荐 </span><br><span class="line"><span class="variable constant_">H5</span>提供的新方法： querySelector、querySelectorAll   提倡</span><br><span class="line">利用节点操作获取元素： 父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling)  提倡</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性操作</span></span><br><span class="line"><span class="number">1.</span> setAttribute：设置dom的属性值</span><br><span class="line"><span class="number">2.</span> getAttribute：得到dom的属性值</span><br><span class="line"><span class="number">3.</span> removeAttribute移除属性</span><br></pre></td></tr></table></figure>



<h2 id="十五、Bom"><a href="#十五、Bom" class="headerlink" title="十五、Bom"></a>十五、Bom</h2><p>window 对象是浏览器的顶级对象，它具有双重角色。它是 JS 访问浏览器窗口的一个接口。它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt() 等。注意：window下的一个特殊属性 window.name</p>
<p><img src="https://pic.imgdb.cn/item/63d672e1face21e9ef12fab2.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器页面加载</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">或者 </span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知窗口大小</span></span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器</span></span><br><span class="line"><span class="variable language_">window</span> 对象给我们提供了 <span class="number">2</span> 个非常好用的方法-定时器。</span><br><span class="line"> <span class="built_in">setTimeout</span>() </span><br><span class="line"> <span class="built_in">setInterval</span>()  </span><br><span class="line"></span><br><span class="line"><span class="comment">//this</span></span><br><span class="line"><span class="variable language_">this</span>的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定<span class="variable language_">this</span>到底指向谁，</span><br><span class="line">一般情况下<span class="variable language_">this</span>的最终指向的是那个调用它的对象</span><br><span class="line">现阶段，我们先了解一下几个<span class="variable language_">this</span>指向</span><br><span class="line"><span class="number">1.</span> 全局作用域或者普通函数中<span class="variable language_">this</span>指向全局对象<span class="variable language_">window</span>（注意定时器里面的<span class="variable language_">this</span>指向<span class="variable language_">window</span>）</span><br><span class="line"><span class="number">2.</span> 方法调用中谁调用<span class="variable language_">this</span>指向谁</span><br><span class="line"><span class="number">3.</span>构造函数中<span class="variable language_">this</span>指向构造函数的实例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行机制（单线程）</span></span><br><span class="line"><span class="comment">//同步</span></span><br><span class="line">前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。</span><br><span class="line">比如做饭的同步做法：我们要烧水煮饭，等水开了（<span class="number">10</span>分钟之后），再去切菜，炒菜。</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line">你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。</span><br><span class="line">比如做饭的异步做法，我们在烧水的同时，利用这<span class="number">10</span>分钟，去切菜，炒菜。</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行机制步骤</span></span><br><span class="line"><span class="number">1.</span> 先执行执行栈中的同步任务。</span><br><span class="line"><span class="number">2.</span> 异步任务（回调函数）放入任务队列中。</span><br><span class="line"><span class="number">3.</span> 一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，</span><br><span class="line">  于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</span><br><span class="line"></span><br><span class="line"><span class="comment">//location对象</span></span><br><span class="line"><span class="variable language_">window</span> 对象给我们提供了一个 location 属性用于获取或设置窗体的 <span class="variable constant_">URL</span>，并且可以用于解析 <span class="variable constant_">URL</span> 。</span><br><span class="line">因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</span><br><span class="line"></span><br><span class="line"><span class="comment">//URL</span></span><br><span class="line">统一资源定位符 (<span class="title class_">Uniform</span> <span class="title class_">Resource</span> <span class="title class_">Locator</span>, <span class="variable constant_">URL</span>) 是互联网上标准资源的地址。</span><br><span class="line">互联网上的每个文件都有一个唯一的 <span class="variable constant_">URL</span>，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</span><br><span class="line"><span class="variable constant_">URL</span> 的一般语法格式为：</span><br><span class="line"> <span class="attr">protocol</span>:<span class="comment">//host[:port]/path/[?query]#fragment</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">http</span>:<span class="comment">//www.itcast.cn/index.html?name=andy&amp;age=18#link</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//navigator对象</span></span><br><span class="line">navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，</span><br><span class="line">该属性可以返回由客户机发送服务器的 user-agent 头部的值。</span><br><span class="line">下面前端代码可以判断用户那个终端打开页面，实现跳转</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//history对象</span></span><br><span class="line"><span class="variable language_">window</span> 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。</span><br><span class="line">该对象包含用户（在浏览器窗口中）访问过的 <span class="variable constant_">URL</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">//本地存储</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sessionStorage</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、数据存储在用户浏览器中</span><br><span class="line"><span class="number">2</span>、设置、读取方便、甚至页面刷新不丢失数据</span><br><span class="line"><span class="number">3</span>、容量较大，sessionStorage约5M、<span class="variable language_">localStorage</span>约20M</span><br><span class="line"><span class="number">4</span>、只能存储字符串，可以将对象<span class="title class_">JSON</span>.<span class="title function_">stringify</span>() 编码后存储</span><br><span class="line"></span><br><span class="line"><span class="comment">//存</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(key, value)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取</span></span><br><span class="line">sessionStorage.<span class="title function_">getItem</span>(key)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(key)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除全部</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/63d672efface21e9ef13160a.png"></p>
<p><img src="https://pic.imgdb.cn/item/63d672fbface21e9ef133071.png"></p>
<p><img src="https://pic.imgdb.cn/item/63d67306face21e9ef134a12.png"></p>
<p><img src="https://pic.imgdb.cn/item/63d67311face21e9ef13649a.png"></p>
<h2 id="十六、事件"><a href="#十六、事件" class="headerlink" title="十六、事件"></a>十六、事件</h2><h3 id="（1）事件绑定"><a href="#（1）事件绑定" class="headerlink" title="（1）事件绑定"></a>（1）事件绑定</h3><p>element.addEventListener</p>
<p>element.onclick</p>
<p>行内元素绑定 <p onclick="alert('click')"></p>
<h3 id="（2）事件冒泡"><a href="#（2）事件冒泡" class="headerlink" title="（2）事件冒泡"></a>（2）事件冒泡</h3><p>事件的触发默认会冒泡</p>
<p>阻止事件冒泡e.stopPropagation()</p>
<h3 id="（3）事件代理"><a href="#（3）事件代理" class="headerlink" title="（3）事件代理"></a>（3）事件代理</h3><p>利用事件冒泡机制，将相似回调绑定在上级DOM，同一处理事件。</p>
<p>可通过target.matches(selector)去区分触发的具体DOM。</p>
<p>优势：减少DOM操作，减少监听器的创建，节约内存。</p>
<h2 id="十七、深拷贝"><a href="#十七、深拷贝" class="headerlink" title="十七、深拷贝"></a>十七、深拷贝</h2><p>简单例子：没有对正则等一些复杂对象进行特殊处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">deepClone</span> = (<span class="params">obj = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">    result = []</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基础常用的CSS</title>
    <url>/2023/01/29/css/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>基础css样式，此部分就我感觉后期比js还难掌握，毕竟写出炫酷的样式还是需要对css的深度了解去学习，可以说是学无止境了这一门。</p>
<h2 id="一、CSS：层叠样式表（Cascading-style-sheets）"><a href="#一、CSS：层叠样式表（Cascading-style-sheets）" class="headerlink" title="一、CSS：层叠样式表（Cascading style sheets）"></a>一、CSS：层叠样式表（Cascading style sheets）</h2><h3 id="CSS作用是什么？？"><a href="#CSS作用是什么？？" class="headerlink" title="CSS作用是什么？？"></a>CSS作用是什么？？</h3><p>给页面中的HTML标签设置样式，配合HTML使用。</p>
<p><img src="https://pic.imgdb.cn/item/63d66feaface21e9ef0ceee7.png"></p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123; //<span class="selector-tag">p</span>为选择器（标签选择器）</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="二、CSS常见三种方式"><a href="#二、CSS常见三种方式" class="headerlink" title="二、CSS常见三种方式"></a>二、CSS常见三种方式</h2><ol>
<li>内嵌式 </li>
<li>外联式 </li>
<li>行内式</li>
</ol>
<h3 id="CSS常见三种引入方式的特点区别有哪些（书写位置、作用范围、使用场景）-？"><a href="#CSS常见三种引入方式的特点区别有哪些（书写位置、作用范围、使用场景）-？" class="headerlink" title="CSS常见三种引入方式的特点区别有哪些（书写位置、作用范围、使用场景） ？"></a>CSS常见三种引入方式的特点区别有哪些（书写位置、作用范围、使用场景） ？</h3><p><img src="https://pic.imgdb.cn/item/63d67003face21e9ef0d2549.png"></p>
<h2 id="选择器的作用："><a href="#选择器的作用：" class="headerlink" title="选择器的作用："></a>选择器的作用：</h2><ol>
<li>选择页面中对应的标签（找她），方便后续设置样式（改她）</li>
</ol>
<h2 id="三、标签选择器"><a href="#三、标签选择器" class="headerlink" title="三、标签选择器"></a>三、标签选择器</h2><ol>
<li>结构：标签名 { css属性名：属性值； } </li>
<li>作用：通过标签名，找到页面中所有这类标签，设置样式 </li>
<li>注意点： </li>
<li>\1. 标签选择器选择的是一类标签，而不是单独某一个 </li>
<li>\2. 标签选择器无论嵌套关系有多深，都能找到对应的标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123; //<span class="selector-tag">p</span>为选择器（标签选择器）</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、类选择器"><a href="#四、类选择器" class="headerlink" title="四、类选择器"></a>四、类选择器</h2><p>结构：.类名 { css属性名：属性值； } </p>
<p>作用：通过类名，找到页面中所有带有这个类名的标签，设置样式 </p>
<p>注意点： </p>
<p>\1. 所有标签上都有class属性，class属性的属性值称为类名（类似于名字） </p>
<p>\2. 类名可以由数字、字母、下划线、中划线组成，但不能以数字或者中划线开头 </p>
<p>\3. 一个标签可以同时有多个类名，类名之间以空格隔开 </p>
<p>\4. 类名可以重复，一个类选择器可以同时选中多个标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cName</span> &#123; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;cName&#x27;</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="五、id选择器"><a href="#五、id选择器" class="headerlink" title="五、id选择器"></a>五、id选择器</h2><p>结构：**#id属性值** { css属性名：属性值； } </p>
<p>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式 </p>
<p>注意点： </p>
<p>\1. 所有标签上都有id属性 </p>
<p>\2. id属性值类似于身份证号码，在一个页面中是唯一的，不可重复的！ </p>
<p>\3. 一个标签上只能有一个id属性值 </p>
<p>\4. 一个id选择器只能选中一个标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#cName</span> &#123; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;cName&#x27;</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><h3 id="class类名与id属性值的区别"><a href="#class类名与id属性值的区别" class="headerlink" title="class类名与id属性值的区别"></a>class类名与id属性值的区别</h3><p>class类名相当于姓名，可以重复，一个标签可以同时有多个class类名 </p>
<p>id属性值相当于身份证号码，不可重复，一个标签只能有一个id属性值 </p>
<h3 id="类选择器与id选择器的区别"><a href="#类选择器与id选择器的区别" class="headerlink" title="类选择器与id选择器的区别"></a>类选择器与id选择器的区别</h3><p>类选择器以 <strong>.</strong> 开头  </p>
<p>id选择器以 <strong>#</strong> 开头 </p>
<p>实际开发的情况 </p>
<p>类选择器用的最多 </p>
<p>id一般配合js使用，除非特殊情况，否则不要使用id设置样式 </p>
<p>实际开发中会遇到<strong>冗余代码的抽取</strong> （可以将一些公共的代码抽取到一个公共的类中去）</p>
<h2 id="六、通配符选择器"><a href="#六、通配符选择器" class="headerlink" title="六、通配符选择器"></a>六、通配符选择器</h2><p>结构：***** { css属性名：属性值； } </p>
<p>作用：找到页面中所有的标签，设置样式 </p>
<p>注意点： </p>
<p>\1. 开发中使用极少，只会在极特殊情况下才会用到 </p>
<p>\2. 在基础班小页面中可能会用于去除标签默认的margin和padding</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;cName&#x27;</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、字体样式"><a href="#七、字体样式" class="headerlink" title="七、字体样式"></a>七、字体样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p>\1. 字体大小：font-size </p>
<p>\2. 字体粗细：font-weight </p>
<p>\3. 字体样式：font-style ：normal（正常）italic（倾斜）</p>
<p>\4. 字体类型：font-family </p>
<p>\5. 字体类型：font属性连写 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123; //<span class="selector-tag">p</span>为选择器（标签选择器）</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>:<span class="string">&#x27;微软雅黑&#x27;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-style</span> ：<span class="attribute">normal</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="八、层叠样式问题"><a href="#八、层叠样式问题" class="headerlink" title="八、层叠样式问题"></a>八、层叠样式问题</h2><p>问题： 给同一个标签设置了相同的样式，此时浏览器会如何渲染呢？ </p>
<p>结果： </p>
<p>如果给同一个标签设置了相同的属性，此时样式会层叠（覆盖），写在最下面的会生效 </p>
<p>TIP： </p>
<p>CSS （Cascading style sheets） <strong>层叠样式表</strong> </p>
<p>所谓的层叠即叠加的意思，表示样式可以一层一层的层叠覆盖</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#cName</span> &#123; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>：yellow;//此时颜色会为黄色</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;cName&#x27;</span>&gt;</span>Hello world！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="九、文本样式"><a href="#九、文本样式" class="headerlink" title="九、文本样式"></a>九、文本样式</h2><p>\1. 文本缩进：text-indent </p>
<p><img src="https://pic.imgdb.cn/item/63d67022face21e9ef0d6516.png"><br>\2. 文本水平对齐方式：text-align </p>
<p><img src="https://pic.imgdb.cn/item/63d6702bface21e9ef0d783a.png"><br>\3. 文本修饰：text-decoration </p>
<p><img src="https://pic.imgdb.cn/item/63d6705eface21e9ef0de448.png"><br>\3. line-height行高</p>
<h2 id="十、文字水平居中方法总结-text-align-center"><a href="#十、文字水平居中方法总结-text-align-center" class="headerlink" title="十、文字水平居中方法总结 text-align : center"></a>十、文字水平居中方法总结 text-align : center</h2><h2 id="十一、text-align-center-能让那些元素水平居中？"><a href="#十一、text-align-center-能让那些元素水平居中？" class="headerlink" title="十一、text-align : center 能让那些元素水平居中？"></a>十一、text-align : center 能让那些元素水平居中？</h2><ol>
<li>文本 </li>
<li>span标签、a标签 </li>
<li>input标签、img标签</li>
</ol>
<h2 id="十二、水平居中总结"><a href="#十二、水平居中总结" class="headerlink" title="十二、水平居中总结"></a>十二、水平居中总结</h2><p>让div、p、h（大盒子）水平居中</p>
<p>可以通过margin : 0 auto ; 实现 </p>
<p>注意点： </p>
<ol>
<li>如果需要让 div、p、h（大盒子） 水平居中，直接给 当前元素本身 设置即可 </li>
<li>margin：0 auto 一般针对于固定宽度的盒子，如果大盒子没有设置宽度，此时会默认占满父元素的宽度</li>
</ol>
<h2 id="十三、选择器进阶"><a href="#十三、选择器进阶" class="headerlink" title="十三、选择器进阶"></a>十三、选择器进阶</h2><p><img src="https://pic.imgdb.cn/item/63d67085face21e9ef0e3397.png"></p>
<h2 id="十四、伪类选择器"><a href="#十四、伪类选择器" class="headerlink" title="十四、伪类选择器"></a>十四、伪类选择器</h2><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p><img src="https://pic.imgdb.cn/item/63d6708fface21e9ef0e45c7.png"><br><img src="https://pic.imgdb.cn/item/63d670a4face21e9ef0e6f59.png"></p>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><img src="https://pic.imgdb.cn/item/63d670b4face21e9ef0e908f.png"><br>效果图：</p>
<p><img src="https://pic.imgdb.cn/item/63d670c2face21e9ef0eaceb.png"></p>
<h2 id="十五、盒子模型"><a href="#十五、盒子模型" class="headerlink" title="十五、盒子模型"></a>十五、盒子模型</h2><p><img src="https://pic.imgdb.cn/item/63d670ccface21e9ef0ebffc.png"></p>
<h2 id="十六、HTML与CSS常见性质与要求（进阶）"><a href="#十六、HTML与CSS常见性质与要求（进阶）" class="headerlink" title="十六、HTML与CSS常见性质与要求（进阶）"></a>十六、HTML与CSS常见性质与要求（进阶）</h2><h3 id="（1）语意化结构"><a href="#（1）语意化结构" class="headerlink" title="（1）语意化结构"></a>（1）语意化结构</h3><ul>
<li>人阅读代码更加易懂</li>
</ul>
<h3 id="（2）默认情况下，哪些是块级元素，哪些是内联元素"><a href="#（2）默认情况下，哪些是块级元素，哪些是内联元素" class="headerlink" title="（2）默认情况下，哪些是块级元素，哪些是内联元素"></a>（2）默认情况下，哪些是块级元素，哪些是内联元素</h3><ul>
<li>display:block&#x2F;table: div h1 h2 table ul ol p等</li>
<li>display:inline&#x2F;inline-block: span img input button等</li>
</ul>
<h3 id="（3）盒子模型宽度如何计算"><a href="#（3）盒子模型宽度如何计算" class="headerlink" title="（3）盒子模型宽度如何计算"></a>（3）盒子模型宽度如何计算</h3><h3 id="offsetWidth-clientWidth-scrollWidth-区别"><a href="#offsetWidth-clientWidth-scrollWidth-区别" class="headerlink" title="offsetWidth, clientWidth, scrollWidth 区别"></a>offsetWidth, clientWidth, scrollWidth 区别</h3><ul>
<li>offset: border + padding + width</li>
<li><img src="https://pic.imgdb.cn/item/63d670d8face21e9ef0ed87a.png"></li>
<li>client: padding + width</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/63d670e9face21e9ef0ef7dc.png"></p>
<ul>
<li>scroll: padding + width + border</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/63d670f7face21e9ef0f1386.png"><br>以上是W3C标准的解释，各大浏览器厂商对其理解稍有偏差。</p>
<h3 id="（4）margin纵向重叠问题"><a href="#（4）margin纵向重叠问题" class="headerlink" title="（4）margin纵向重叠问题"></a>（4）margin纵向重叠问题</h3><ul>
<li>相邻元素的marginTop与marginBottom存在重叠（取最大值）</li>
</ul>
<h3 id="（5）margin负值的效果"><a href="#（5）margin负值的效果" class="headerlink" title="（5）margin负值的效果"></a>（5）margin负值的效果</h3><ul>
<li><p>主要注意，方向不同（上下左右），效果是不同的。所以在开发中避免混淆，我习惯只使用margin-top以及margin-left</p>
</li>
<li><ul>
<li>上和左</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>自身元素向上和左移动</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>下和右</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>文档流中，自身元素下方和右方的元素被“吸”，往设置的反方向移动，更加准确的来说，是外部的元素认为你减少了文档流所占距离。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="（6）BFC理解和应用"><a href="#（6）BFC理解和应用" class="headerlink" title="（6）BFC理解和应用"></a>（6）BFC理解和应用</h3><ul>
<li><p>BFC全称为 <strong>Block format context</strong>，块级格式化上下文。</p>
</li>
<li><p>BFC是指一类元素的CSS样式类型。</p>
</li>
<li><p>一个BFC的元素，内部渲染不会影响边界以外的元素（容器内部的元素不会超出容器边界，不会影响容器外部）。</p>
</li>
<li><p>形成BFC元素的常见条件：</p>
</li>
<li><ul>
<li>float不是none</li>
<li>position是absolute或者fixed</li>
<li>overflow不是visible</li>
<li>display是flex inline-block等</li>
</ul>
</li>
<li><p>BFC的常见应用</p>
</li>
<li><ul>
<li>浮动清除</li>
</ul>
</li>
</ul>
<h3 id="（7）float布局"><a href="#（7）float布局" class="headerlink" title="（7）float布局"></a>（7）float布局</h3><h4 id="如何实现圣杯布局和双飞翼布局"><a href="#如何实现圣杯布局和双飞翼布局" class="headerlink" title="如何实现圣杯布局和双飞翼布局"></a>如何实现圣杯布局和双飞翼布局</h4><ul>
<li><p>垂直三栏布局，中间一栏（放置重要内容）最先加载和渲染(中间栏放在HTML文档中最前)。</p>
</li>
<li><p>两侧内容固定，中间内容随着屏幕宽度自适应。</p>
</li>
<li><p>一般用于传统的PC网页。</p>
</li>
<li><ul>
<li>实现：</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>使用float布局</li>
<li>两次使用margin负值，以便中间内容横向重叠</li>
<li>防止中间内容被两侧覆盖，一个用padding，一个用margin</li>
</ul>
</li>
</ul>
</li>
<li><p>两种布局方式有什么区别</p>
</li>
<li><ul>
<li>解决的问题一样，三栏布局，实现方式不同。</li>
<li>防止中间内容被两侧覆盖，一个用padding，一个用margin</li>
</ul>
</li>
</ul>
<h4 id="clearfix类怎么写，zoom是做什么的？"><a href="#clearfix类怎么写，zoom是做什么的？" class="headerlink" title="clearfix类怎么写，zoom是做什么的？"></a>clearfix类怎么写，zoom是做什么的？</h4><p>当一个元素的子元素都是设置了float属性，那么元素的高度不会被撑开，我们可以使用clear来清除浮动。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">  visibility: hidden;</span><br><span class="line">  display: block;</span><br><span class="line">  font-size: 0;</span><br><span class="line">  content: &quot; &quot;;</span><br><span class="line">  clear: both;</span><br><span class="line">  height: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix&#123;</span><br><span class="line">	/* 兼容低版本的IE浏览器 */ </span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在因为浮动导致高度没有撑开的容器上添加这个类。</p>
<h3 id="（7）flex布局"><a href="#（7）flex布局" class="headerlink" title="（7）flex布局"></a>（7）flex布局</h3><h4 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h4><ul>
<li><p>flex-direction</p>
</li>
<li><p>justify-content</p>
</li>
<li><p>align-items</p>
</li>
<li><p>flex-wrap</p>
</li>
<li><p>align-self</p>
</li>
<li><ul>
<li>自身在交叉轴(副轴)上的对其方式：flex-start, center, flex-end</li>
</ul>
</li>
</ul>
<h3 id="（8）定位相关"><a href="#（8）定位相关" class="headerlink" title="（8）定位相关"></a>（8）定位相关</h3><h4 id="relative和absolute定位"><a href="#relative和absolute定位" class="headerlink" title="relative和absolute定位"></a>relative和absolute定位</h4><ul>
<li>relative依据自身当前所在文档流位置进行定位</li>
<li>absolute依据最近一层的父定位元素进行定位</li>
</ul>
<h4 id="居中对齐的方式"><a href="#居中对齐的方式" class="headerlink" title="居中对齐的方式"></a>居中对齐的方式</h4><h5 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h5><ul>
<li>inline元素，可以使用text-aligin: center</li>
<li>block元素，margin:auto</li>
<li>absoulte元素， left: 50% + margin-left负自身50宽度</li>
</ul>
<h5 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h5><ul>
<li>inline元素，设置容器行高等于自身高度</li>
<li>absoulte元素，top:50% + margin-top负自身50高度</li>
<li>absoulte元素，transform(-50%, -50%)</li>
<li>absoulte元素，top,left,bottom,right &#x3D; 0 + margin： auto</li>
</ul>
<h3 id="（9）图文相关"><a href="#（9）图文相关" class="headerlink" title="（9）图文相关"></a>（9）图文相关</h3><h4 id="line-height如何继承"><a href="#line-height如何继承" class="headerlink" title="line-height如何继承"></a>line-height如何继承</h4><p>继承最近一层的父元素。</p>
<p>在父元素设置百分比line-height的时候，line-height并不会直接继承，而是在父元素计算后再继承。</p>
<h3 id="（10）响应式"><a href="#（10）响应式" class="headerlink" title="（10）响应式"></a>（10）响应式</h3><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>相对根元素(html)的font-size。</p>
<h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>相对父元素的font-size。</p>
<h4 id="vw-x2F-vh-x2F-vmax-x2F-vmin"><a href="#vw-x2F-vh-x2F-vmax-x2F-vmin" class="headerlink" title="vw&#x2F;vh&#x2F;vmax&#x2F;vmin"></a>vw&#x2F;vh&#x2F;vmax&#x2F;vmin</h4><ul>
<li>1vw 视口宽度1%</li>
<li>1vh 视口高度1%</li>
<li>1vmax 视口高度&#x2F;宽度取两者较大值为基准的1%</li>
<li>1vmin 视口高度&#x2F;宽度取两者较小值为基准的1%</li>
</ul>
<h4 id="响应式布局原理"><a href="#响应式布局原理" class="headerlink" title="响应式布局原理"></a>响应式布局原理</h4><p>通过媒体查询，实现在不同宽度设备下的不同css样式。</p>
<p>常与rem进行配合，通过媒体查询，动态修改根元素的font-size来保证不同宽度设备下的显示比例一致。</p>
<h4 id="设备高度"><a href="#设备高度" class="headerlink" title="设备高度"></a>设备高度</h4><ul>
<li><p>window.screen.height</p>
</li>
<li><ul>
<li>设备屏幕的高度，包括网页内容以外的东西（地址栏，状态栏）</li>
</ul>
</li>
<li><p>widnow.innerHeight</p>
</li>
<li><ul>
<li>网页的视口高度</li>
</ul>
</li>
<li><p>document.body.clientHeight</p>
</li>
<li><ul>
<li>body元素的高度</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>基础常见的HTML结构标签</title>
    <url>/2023/01/29/html/</url>
    <content><![CDATA[<h2 id="一、Web标准的构成"><a href="#一、Web标准的构成" class="headerlink" title="一、Web标准的构成"></a>一、Web标准的构成</h2><h3 id="结构：HTML-→-页面元素"><a href="#结构：HTML-→-页面元素" class="headerlink" title="结构：HTML → 页面元素"></a>结构：HTML → 页面元素</h3><h3 id="表现：CSS-→-页面样式"><a href="#表现：CSS-→-页面样式" class="headerlink" title="表现：CSS → 页面样式"></a>表现：CSS → 页面样式</h3><h3 id="行为：JavaScript-→-页面交互的动态效果"><a href="#行为：JavaScript-→-页面交互的动态效果" class="headerlink" title="行为：JavaScript → 页面交互的动态效果"></a>行为：JavaScript → 页面交互的动态效果</h3><span id="more"></span>


<h2 id="二、标题标签"><a href="#二、标题标签" class="headerlink" title="二、标题标签"></a>二、标题标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//一级标题 </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>//二级标题 </span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>//三级标题 </span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span>//四级标题 </span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span>//五级标题 </span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span>//六级标题 </span><br></pre></td></tr></table></figure>

<h3 id="标题标签有哪些特点？"><a href="#标题标签有哪些特点？" class="headerlink" title="标题标签有哪些特点？"></a>标题标签有哪些特点？</h3><ol>
<li>文字都有加粗 </li>
<li>文字都有变大，但是从h1 → h6文字逐渐减小 </li>
<li>独占一行</li>
</ol>
<h2 id="三、段落标签"><a href="#三、段落标签" class="headerlink" title="三、段落标签"></a>三、段落标签</h2><ol>
<li>p标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="段落标签有哪些特点？"><a href="#段落标签有哪些特点？" class="headerlink" title="段落标签有哪些特点？"></a>段落标签有哪些特点？</h3><ol>
<li>段落之间存在间隙 </li>
<li>独占一行</li>
</ol>
<h2 id="四、换行标签"><a href="#四、换行标签" class="headerlink" title="四、换行标签"></a>四、换行标签</h2><ol>
<li>br标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、水平标签"><a href="#五、水平标签" class="headerlink" title="五、水平标签"></a>五、水平标签</h2><ol>
<li>hr标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://pic.imgdb.cn/item/63d66bd0face21e9ef048ba2.png"></p>
<h2 id="六、img标签"><a href="#六、img标签" class="headerlink" title="六、img标签"></a>六、img标签</h2><p><img src="https://pic.imgdb.cn/item/63d66a94face21e9ef0208b0.png"></p>
<h2 id="七、audio标签"><a href="#七、audio标签" class="headerlink" title="七、audio标签"></a>七、audio标签</h2><p><img src="https://pic.imgdb.cn/item/63d66abfface21e9ef02621b.png"></p>
<h2 id="八、video标签"><a href="#八、video标签" class="headerlink" title="八、video标签"></a>八、video标签</h2><p><img src="https://pic.imgdb.cn/item/63d66ad6face21e9ef029209.png"></p>
<h2 id="九、a标签"><a href="#九、a标签" class="headerlink" title="九、a标签"></a>九、a标签</h2><p><img src="https://pic.imgdb.cn/item/63d66aeaface21e9ef02bb43.png"></p>
<p><img src="https://pic.imgdb.cn/item/63d66aeaface21e9ef02bb43.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> //空跳转</span><br></pre></td></tr></table></figure>

<h2 id="十、div标签"><a href="#十、div标签" class="headerlink" title="十、div标签"></a>十、div标签</h2><p>盒子标签，自定义组件经常用到</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十一、span标签"><a href="#十一、span标签" class="headerlink" title="十一、span标签"></a>十一、span标签</h2><h3 id="1、div标签会独占一行，span标签不会"><a href="#1、div标签会独占一行，span标签不会" class="headerlink" title="1、div标签会独占一行，span标签不会"></a>1、div标签会独占一行，span标签不会</h3><h3 id="2-div是一个容器级别的标签，span是一个文本级别的标签-一般包裹在div中使用"><a href="#2-div是一个容器级别的标签，span是一个文本级别的标签-一般包裹在div中使用" class="headerlink" title="2.div是一个容器级别的标签，span是一个文本级别的标签,一般包裹在div中使用"></a>2.div是一个容器级别的标签，span是一个文本级别的标签,一般包裹在div中使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十二、input标签"><a href="#十二、input标签" class="headerlink" title="十二、input标签"></a>十二、input标签</h2><h3 id="1、输入文本框标签"><a href="#1、输入文本框标签" class="headerlink" title="1、输入文本框标签"></a>1、输入文本框标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十三、select标签"><a href="#十三、select标签" class="headerlink" title="十三、select标签"></a>十三、select标签</h2><p>配合option使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">option</span>&gt;</span>大师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">option</span>&gt;</span>王者<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">option</span>&gt;</span>青铜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">option</span>&gt;</span>黑铁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="https://pic.imgdb.cn/item/63d66affface21e9ef02eb4f.png"></p>
<h2 id="十四、列表标签"><a href="#十四、列表标签" class="headerlink" title="十四、列表标签"></a>十四、列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>标签组成： </p>
<p><img src="https://pic.imgdb.cn/item/63d66b0dface21e9ef0309d9.png"></p>
<p>显示特点： </p>
<p>列表的每一项前默认显示圆点标识 </p>
<p><img src="https://pic.imgdb.cn/item/63d66b19face21e9ef0320e3.png"></p>
<p>注意点： </p>
<p>ul标签中只允许包含li标签 </p>
<p>li标签可以包含任意内容 </p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>标签组成： </p>
<p><img src="https://pic.imgdb.cn/item/63d66b26face21e9ef03344e.png"></p>
<p>显示特点： </p>
<p><img src="https://pic.imgdb.cn/item/63d66b33face21e9ef0349fe.png"></p>
<p>列表的每一项前默认显示序号标识 </p>
<p>注意点： </p>
<p>ol标签中只允许包含li标签 </p>
<p>li标签可以包含任意内容 </p>
<h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>标签组成： </p>
<p><img src="https://pic.imgdb.cn/item/63d66b3eface21e9ef036d1c.png"></p>
<p>显示特点： </p>
<p><img src="https://pic.imgdb.cn/item/63d66b49face21e9ef03830b.png"></p>
<p>dd前会默认显示缩进效果 </p>
<p>注意点： </p>
<p>dl标签中只允许包含dt&#x2F;dd标签 </p>
<p>dt&#x2F;dd标签可以包含任意内容 </p>
<h2 id="十五、table标签"><a href="#十五、table标签" class="headerlink" title="十五、table标签"></a>十五、table标签</h2><p>HTML表格由table标签以及多个tr、th和td标签组成</p>
<p>table表示表格，整个表格要包含在<table></table>标签中</p>
<ol>
<li>tr表示表格中的行，是单元格的容器，一行可以包括多个单元格</li>
<li>th表示表格中的单元格，我理解为列,th放在tr内表示这一行为标题行，其中的字体会默认粗体居中显示</li>
<li>td表示表格中的单元格，我理解为列，td也要放在tr内，可以理解为内容行</li>
<li>tfoot表示表格最后一行</li>
</ol>
<table>是<tr>的上层标签

<tr>必须在一个<table></table>里面,它不能单独使用,相当于<table的属性标签.

<table>标示一个表格,<tr>标示这个表格中间的一个行，<td>、<th>标示行中的一个列,需要嵌套在<tr></tr>或<tfoot><tfoot>中间。

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-collapse: collapse;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>lily<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>418<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>479<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="https://pic.imgdb.cn/item/63d66b5aface21e9ef03a340.png"></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
